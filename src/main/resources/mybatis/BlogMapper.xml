<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="top.yalexin.rblog.mapper.BlogMapper">

    <!--  ****************************************************  -->
    <!--    Blog findBlog(long id);-->
    <select id="findBlog" parameterType="long" resultMap="blogWithCtgrAndTagMap">
        SELECT blog.* ,tag.`name` AS tag_name, ctgr.`name` AS c_name, tag.`id` AS t_id
        FROM t_blog blog
        LEFT OUTER JOIN t_blog_tags bt ON blog.`id`=bt.`blogs_id`
        LEFT OUTER JOIN t_tag tag ON bt.`tags_id` = tag.`id`
        LEFT OUTER JOIN t_category ctgr ON blog.`category_id` = ctgr.`id`
        WHERE blog.`id`=#{id}
    </select>

    <resultMap id="blogWithCtgrAndTagMap" type="Blog">
        <id property="id" column="id"/>
        <result property="content" column="content"/>
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
        <result property="published" column="published"/>
        <result property="name" column="name"/>
        <result property="description" column="description"/>
        <result property="views" column="views"/>
        <association property="category" javaType="Category">
            <id property="id" column="category_id"/>
            <result property="name" column="c_name"/>
        </association>
        <collection property="tags" ofType="Tag" resultMap="TagMap"/>
    </resultMap>
    <resultMap id="TagMap" type="Tag">
        <id property="id" column="t_id"/>
        <result property="name" column="tag_name"/>
    </resultMap>

    <!--    List<Blog> findBlogByInterval(Long startIndex, Long size);-->
    <select id="findBlogByInterval" parameterType="java.lang.Long" resultMap="blogWithCtgrAndTagMap">
        SELECT blog.* ,tag.`name` AS tag_name, ctgr.`name` AS c_name, tag.`id` AS t_id
        FROM (
	        SELECT * FROM t_blog ORDER BY create_time DESC  LIMIT #{startIndex}, #{size}
        )  blog
        LEFT OUTER JOIN t_blog_tags bt ON blog.`id`=bt.`blogs_id`
        LEFT OUTER JOIN t_tag tag ON bt.`tags_id` = tag.`id`
        LEFT OUTER JOIN t_category ctgr ON blog.`category_id` = ctgr.`id`
        ORDER BY create_time DESC
    </select>


    <!--    List<Blog> findBlogWithCategoryByInterval(Long startIndex, Long size, Long categoryId);-->
    <select id="findBlogWithCategoryByInterval" parameterType="java.lang.Long" resultMap="blogWithCtgrAndTagMap">
        SELECT blog.* ,tag.`name` AS tag_name, ctgr.`name` AS c_name, tag.`id` AS t_id
        FROM (
--         先选出某个分类下的文章 再连接其他表进行查询分类的name和标签的name
                 SELECT * FROM t_blog where category_id=#{categoryId} ORDER BY create_time DESC  LIMIT #{startIndex}, #{size}
             )  blog
         LEFT OUTER JOIN t_blog_tags bt ON blog.`id`=bt.`blogs_id`
         LEFT OUTER JOIN t_tag tag ON bt.`tags_id` = tag.`id`
         LEFT OUTER JOIN t_category ctgr ON blog.`category_id` = ctgr.`id`
        ORDER BY create_time DESC
    </select>
    <!--    List<Blog> findBlogWithTagByInterval(Long startIndex, Long size, Long tagId);-->
    <select id="findBlogWithTagByInterval" parameterType="java.lang.Long" resultMap="blogWithCtgrAndTagMap">
        SELECT blog.* ,tag.`name` AS tag_name, ctgr.`name` AS c_name, tag.`id` AS t_id
        FROM (
         select b.* from
             (select * from t_blog_tags where tags_id=#{tagId} limit #{startIndex},#{size}) b_t
                 left outer join t_blog b on b_t.blogs_id = b.id
         )  blog
         LEFT OUTER JOIN t_blog_tags bt ON blog.`id`=bt.`blogs_id`
         LEFT OUTER JOIN t_tag tag ON bt.`tags_id` = tag.`id`
         LEFT OUTER JOIN t_category ctgr ON blog.`category_id` = ctgr.`id`
        ORDER BY create_time DESC
    </select>

<!--    List<Blog> findBlogByIntervalAndNameOrContent(Long startIndex, Long size, String nameOrContent);-->
    <select id="findBlogByIntervalAndNameOrContent"  resultMap="blogWithCtgrAndTagMap">
        SELECT blog.* ,tag.`name` AS tag_name, ctgr.`name` AS c_name, tag.`id` AS t_id
        FROM (
	        SELECT * FROM t_blog where name like #{nameOrContent} or content like #{nameOrContent} ORDER BY create_time DESC  LIMIT #{startIndex}, #{size}
        )  blog
        LEFT OUTER JOIN t_blog_tags bt ON blog.`id`=bt.`blogs_id`
        LEFT OUTER JOIN t_tag tag ON bt.`tags_id` = tag.`id`
        LEFT OUTER JOIN t_category ctgr ON blog.`category_id` = ctgr.`id`
        ORDER BY create_time DESC
    </select>

    <select id="getAllYears" resultType="java.lang.Long">
        SELECT DISTINCT DATE_FORMAT(create_time, '%Y') AS unique_year FROM t_blog ORDER BY create_time DESC;
    </select>

</mapper>