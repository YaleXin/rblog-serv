version: "3"
volumes: # 自定义数据卷，位于宿主机/var/lib/docker/volumes内
  reputation_db_vol: # 定义数据卷同步容器内mysql数据


services:
  db:
    image: mysql:5.7
    container_name: blog_db
    environment:
      - MYSQL_ROOT_PASSWORD=123456 # 数据库密码
      - MYSQL_DATABASE=blog # 数据库名称
      - MYSQL_USER=root # 数据库用户名
      - MYSQL_PASSWORD=123456 # 用户密码
      - TZ=Asia/Shanghai
    volumes:
      - reputation_db_vol:/var/lib/mysql:rw # 挂载数据库数据, 可读可写
      - ./compose/mysql/conf/my.cnf:/etc/mysql/my.cnf # 挂载配置文件
      - ./compose/mysql/init:/docker-entrypoint-initdb.d/ # 挂载数据初始化sql脚本
    ports:
      - "3306:3306" # 与配置文件保持一致，映射端口
    expose:
      - "3306"
    restart: always

  blog_api:
    image: blog_api:2.0.0
    container_name: blog_api
    environment:
      - TZ=Asia/Shanghai
    build: ./api # 使用 api 目录下的Dockerfile
    ports:
      - "8080:8080"
    expose:
      - "8080"
    volumes:
      - ./api/log:/opt/blog/log # 挂载后端日志
      - ./api/link:/opt/blog/link
    restart: always
    tty: true
    stdin_open: true
    deploy:
      resources:
        limits:
          cpus: '0.30'
          memory: 600M


  nginx_web:
    #定义主机名
    container_name: blog_nginx
    #使用的镜像
    image: nginx:1.16.1
    #容器的映射端口
    ports:
      - 80:80
      - 443:443
    #定义挂载点
    volumes:
      - ./compose/nginx/html:/usr/share/nginx/html
      - ./compose/nginx/conf/nginx.conf:/etc/nginx/nginx.conf
      - ./compose/nginx/conf.d:/etc/nginx/conf.d
      - ./compose/nginx/logs:/var/log/nginx
      - ./compose/nginx/cert:/etc/nginx/cert

    #docker 重启后，容器自启动
    restart: always
    links:
      - node
      - db
      - blog_api
    depends_on: # 依赖关系
      - node
      - db
      - blog_api
  node:
    build:
      context: ./front # 使用 front 目录下的Dockerfile
    container_name: blog_node
    volumes:
      - ./front/log:/root/.npm/_logs/ # 挂载日志
    ports:
      - "3000:3000"
    expose:
      - "3000"
    restart: always # always表容器运行发生错误时一直重启
    deploy:
      resources:
        limits:
          cpus: '0.30'
          memory: 1500M
