2021-02-09 00:00:32.756  INFO 7304 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 00:00:32.762  INFO 7304 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 00:00:34.571  INFO 7304 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 00:00:34.571  INFO 7304 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Type{id=6, name='脚本'}, Type{id=7, name='效率'}, Type{id=8, name='教程'}, Type{id=10, name='C'}, Type{id=11, name='分享'}, Type{id=12, name='工具'}, Type{id=13, name='学习'}, Type{id=14, name='命令行'}, Type{id=15, name='HTML基础'}, Type{id=16, name='CSS基础'}, Type{id=17, name='JavaScript基础'}, Type{id=18, name='Vue'}, Type{id=19, name='动态规划'}, Type{id=20, name='动态规划'}, Type{id=21, name='排序'}, Type{id=22, name='分治'}, Type{id=23, name='java'}, Type{id=24, name='并查集'}, Type{id=25, name='Shell'}, Type{id=26, name='字符串'}, Type{id=27, name='进程通信'}, Type{id=28, name='单例模式'}, Type{id=29, name='静态代理'}, Type{id=30, name='动态代理'}, Type{id=31, name='模板方法'}, Type{id=32, name='观察者模式'}, Type{id=33, name='高精度'}, Type{id=34, name='阶乘'}, Type{id=35, name='深度优先'}, Type{id=36, name='递归'}, Type{id=37, name='BFS'}, Type{id=38, name='最大流'}, Type{id=39, name='C语言课程设计'}, Type{id=40, name='操作系课设'}, Type{id=41, name='数据库'}, Type{id=42, name='MySql'}, Type{id=43, name='Git'}, Type{id=44, name='SpringBoot'}, Type{id=45, name='缓存'}]}
2021-02-09 00:03:04.841  INFO 7304 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 00:03:04.845  INFO 7304 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Type{id=6, name='脚本'}, Type{id=7, name='效率'}, Type{id=8, name='教程'}, Type{id=10, name='C'}, Type{id=11, name='分享'}, Type{id=12, name='工具'}, Type{id=13, name='学习'}, Type{id=14, name='命令行'}, Type{id=15, name='HTML基础'}, Type{id=16, name='CSS基础'}, Type{id=17, name='JavaScript基础'}, Type{id=18, name='Vue'}, Type{id=19, name='动态规划'}, Type{id=20, name='动态规划'}, Type{id=21, name='排序'}, Type{id=22, name='分治'}, Type{id=23, name='java'}, Type{id=24, name='并查集'}, Type{id=25, name='Shell'}, Type{id=26, name='字符串'}, Type{id=27, name='进程通信'}, Type{id=28, name='单例模式'}, Type{id=29, name='静态代理'}, Type{id=30, name='动态代理'}, Type{id=31, name='模板方法'}, Type{id=32, name='观察者模式'}, Type{id=33, name='高精度'}, Type{id=34, name='阶乘'}, Type{id=35, name='深度优先'}, Type{id=36, name='递归'}, Type{id=37, name='BFS'}, Type{id=38, name='最大流'}, Type{id=39, name='C语言课程设计'}, Type{id=40, name='操作系课设'}, Type{id=41, name='数据库'}, Type{id=42, name='MySql'}, Type{id=43, name='Git'}, Type{id=44, name='SpringBoot'}, Type{id=45, name='缓存'}]}
2021-02-09 00:03:05.013  INFO 7304 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 00:03:05.016  INFO 7304 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 00:03:17.986  INFO 7304 --- [http-nio-8080-exec-7] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 00:03:17.988  INFO 7304 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 00:03:17.992  INFO 7304 --- [http-nio-8080-exec-7] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Type{id=6, name='脚本'}, Type{id=7, name='效率'}, Type{id=8, name='教程'}, Type{id=10, name='C'}, Type{id=11, name='分享'}, Type{id=12, name='工具'}, Type{id=13, name='学习'}, Type{id=14, name='命令行'}, Type{id=15, name='HTML基础'}, Type{id=16, name='CSS基础'}, Type{id=17, name='JavaScript基础'}, Type{id=18, name='Vue'}, Type{id=19, name='动态规划'}, Type{id=20, name='动态规划'}, Type{id=21, name='排序'}, Type{id=22, name='分治'}, Type{id=23, name='java'}, Type{id=24, name='并查集'}, Type{id=25, name='Shell'}, Type{id=26, name='字符串'}, Type{id=27, name='进程通信'}, Type{id=28, name='单例模式'}, Type{id=29, name='静态代理'}, Type{id=30, name='动态代理'}, Type{id=31, name='模板方法'}, Type{id=32, name='观察者模式'}, Type{id=33, name='高精度'}, Type{id=34, name='阶乘'}, Type{id=35, name='深度优先'}, Type{id=36, name='递归'}, Type{id=37, name='BFS'}, Type{id=38, name='最大流'}, Type{id=39, name='C语言课程设计'}, Type{id=40, name='操作系课设'}, Type{id=41, name='数据库'}, Type{id=42, name='MySql'}, Type{id=43, name='Git'}, Type{id=44, name='SpringBoot'}, Type{id=45, name='缓存'}]}
2021-02-09 00:03:17.992  INFO 7304 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 00:05:02.020  INFO 7304 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 00:05:02.020  INFO 7304 --- [http-nio-8080-exec-9] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 00:05:02.023  INFO 7304 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 00:05:02.026  INFO 7304 --- [http-nio-8080-exec-9] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Type{id=6, name='脚本'}, Type{id=7, name='效率'}, Type{id=8, name='教程'}, Type{id=10, name='C'}, Type{id=11, name='分享'}, Type{id=12, name='工具'}, Type{id=13, name='学习'}, Type{id=14, name='命令行'}, Type{id=15, name='HTML基础'}, Type{id=16, name='CSS基础'}, Type{id=17, name='JavaScript基础'}, Type{id=18, name='Vue'}, Type{id=19, name='动态规划'}, Type{id=20, name='动态规划'}, Type{id=21, name='排序'}, Type{id=22, name='分治'}, Type{id=23, name='java'}, Type{id=24, name='并查集'}, Type{id=25, name='Shell'}, Type{id=26, name='字符串'}, Type{id=27, name='进程通信'}, Type{id=28, name='单例模式'}, Type{id=29, name='静态代理'}, Type{id=30, name='动态代理'}, Type{id=31, name='模板方法'}, Type{id=32, name='观察者模式'}, Type{id=33, name='高精度'}, Type{id=34, name='阶乘'}, Type{id=35, name='深度优先'}, Type{id=36, name='递归'}, Type{id=37, name='BFS'}, Type{id=38, name='最大流'}, Type{id=39, name='C语言课程设计'}, Type{id=40, name='操作系课设'}, Type{id=41, name='数据库'}, Type{id=42, name='MySql'}, Type{id=43, name='Git'}, Type{id=44, name='SpringBoot'}, Type{id=45, name='缓存'}]}
2021-02-09 00:06:30.158  INFO 7304 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 00:06:30.157  INFO 7304 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 00:06:30.165  INFO 7304 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 00:06:30.167  INFO 7304 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Type{id=6, name='脚本'}, Type{id=7, name='效率'}, Type{id=8, name='教程'}, Type{id=10, name='C'}, Type{id=11, name='分享'}, Type{id=12, name='工具'}, Type{id=13, name='学习'}, Type{id=14, name='命令行'}, Type{id=15, name='HTML基础'}, Type{id=16, name='CSS基础'}, Type{id=17, name='JavaScript基础'}, Type{id=18, name='Vue'}, Type{id=19, name='动态规划'}, Type{id=20, name='动态规划'}, Type{id=21, name='排序'}, Type{id=22, name='分治'}, Type{id=23, name='java'}, Type{id=24, name='并查集'}, Type{id=25, name='Shell'}, Type{id=26, name='字符串'}, Type{id=27, name='进程通信'}, Type{id=28, name='单例模式'}, Type{id=29, name='静态代理'}, Type{id=30, name='动态代理'}, Type{id=31, name='模板方法'}, Type{id=32, name='观察者模式'}, Type{id=33, name='高精度'}, Type{id=34, name='阶乘'}, Type{id=35, name='深度优先'}, Type{id=36, name='递归'}, Type{id=37, name='BFS'}, Type{id=38, name='最大流'}, Type{id=39, name='C语言课程设计'}, Type{id=40, name='操作系课设'}, Type{id=41, name='数据库'}, Type{id=42, name='MySql'}, Type{id=43, name='Git'}, Type{id=44, name='SpringBoot'}, Type{id=45, name='缓存'}]}
2021-02-09 00:06:45.018  INFO 7304 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 00:06:45.018  INFO 7304 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 00:06:45.021  INFO 7304 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 00:06:45.021  INFO 7304 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Type{id=6, name='脚本'}, Type{id=7, name='效率'}, Type{id=8, name='教程'}, Type{id=10, name='C'}, Type{id=11, name='分享'}, Type{id=12, name='工具'}, Type{id=13, name='学习'}, Type{id=14, name='命令行'}, Type{id=15, name='HTML基础'}, Type{id=16, name='CSS基础'}, Type{id=17, name='JavaScript基础'}, Type{id=18, name='Vue'}, Type{id=19, name='动态规划'}, Type{id=20, name='动态规划'}, Type{id=21, name='排序'}, Type{id=22, name='分治'}, Type{id=23, name='java'}, Type{id=24, name='并查集'}, Type{id=25, name='Shell'}, Type{id=26, name='字符串'}, Type{id=27, name='进程通信'}, Type{id=28, name='单例模式'}, Type{id=29, name='静态代理'}, Type{id=30, name='动态代理'}, Type{id=31, name='模板方法'}, Type{id=32, name='观察者模式'}, Type{id=33, name='高精度'}, Type{id=34, name='阶乘'}, Type{id=35, name='深度优先'}, Type{id=36, name='递归'}, Type{id=37, name='BFS'}, Type{id=38, name='最大流'}, Type{id=39, name='C语言课程设计'}, Type{id=40, name='操作系课设'}, Type{id=41, name='数据库'}, Type{id=42, name='MySql'}, Type{id=43, name='Git'}, Type{id=44, name='SpringBoot'}, Type{id=45, name='缓存'}]}
2021-02-09 00:08:19.196  INFO 7304 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 00:08:19.196  INFO 7304 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 00:08:19.199  INFO 7304 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 00:08:19.238  INFO 7304 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Type{id=6, name='脚本'}, Type{id=7, name='效率'}, Type{id=8, name='教程'}, Type{id=10, name='C'}, Type{id=11, name='分享'}, Type{id=12, name='工具'}, Type{id=13, name='学习'}, Type{id=14, name='命令行'}, Type{id=15, name='HTML基础'}, Type{id=16, name='CSS基础'}, Type{id=17, name='JavaScript基础'}, Type{id=18, name='Vue'}, Type{id=19, name='动态规划'}, Type{id=20, name='动态规划'}, Type{id=21, name='排序'}, Type{id=22, name='分治'}, Type{id=23, name='java'}, Type{id=24, name='并查集'}, Type{id=25, name='Shell'}, Type{id=26, name='字符串'}, Type{id=27, name='进程通信'}, Type{id=28, name='单例模式'}, Type{id=29, name='静态代理'}, Type{id=30, name='动态代理'}, Type{id=31, name='模板方法'}, Type{id=32, name='观察者模式'}, Type{id=33, name='高精度'}, Type{id=34, name='阶乘'}, Type{id=35, name='深度优先'}, Type{id=36, name='递归'}, Type{id=37, name='BFS'}, Type{id=38, name='最大流'}, Type{id=39, name='C语言课程设计'}, Type{id=40, name='操作系课设'}, Type{id=41, name='数据库'}, Type{id=42, name='MySql'}, Type{id=43, name='Git'}, Type{id=44, name='SpringBoot'}, Type{id=45, name='缓存'}]}
2021-02-09 00:12:19.572  INFO 7304 --- [http-nio-8080-exec-7] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 00:12:19.576  INFO 7304 --- [http-nio-8080-exec-7] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Type{id=6, name='脚本'}, Type{id=7, name='效率'}, Type{id=8, name='教程'}, Type{id=10, name='C'}, Type{id=11, name='分享'}, Type{id=12, name='工具'}, Type{id=13, name='学习'}, Type{id=14, name='命令行'}, Type{id=15, name='HTML基础'}, Type{id=16, name='CSS基础'}, Type{id=17, name='JavaScript基础'}, Type{id=18, name='Vue'}, Type{id=19, name='动态规划'}, Type{id=20, name='动态规划'}, Type{id=21, name='排序'}, Type{id=22, name='分治'}, Type{id=23, name='java'}, Type{id=24, name='并查集'}, Type{id=25, name='Shell'}, Type{id=26, name='字符串'}, Type{id=27, name='进程通信'}, Type{id=28, name='单例模式'}, Type{id=29, name='静态代理'}, Type{id=30, name='动态代理'}, Type{id=31, name='模板方法'}, Type{id=32, name='观察者模式'}, Type{id=33, name='高精度'}, Type{id=34, name='阶乘'}, Type{id=35, name='深度优先'}, Type{id=36, name='递归'}, Type{id=37, name='BFS'}, Type{id=38, name='最大流'}, Type{id=39, name='C语言课程设计'}, Type{id=40, name='操作系课设'}, Type{id=41, name='数据库'}, Type{id=42, name='MySql'}, Type{id=43, name='Git'}, Type{id=44, name='SpringBoot'}, Type{id=45, name='缓存'}]}
2021-02-09 00:12:19.714  INFO 7304 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 00:12:19.717  INFO 7304 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 00:18:34.623  INFO 7304 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 00:18:34.628  INFO 7304 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Type{id=6, name='脚本'}, Type{id=7, name='效率'}, Type{id=8, name='教程'}, Type{id=10, name='C'}, Type{id=11, name='分享'}, Type{id=12, name='工具'}, Type{id=13, name='学习'}, Type{id=14, name='命令行'}, Type{id=15, name='HTML基础'}, Type{id=16, name='CSS基础'}, Type{id=17, name='JavaScript基础'}, Type{id=18, name='Vue'}, Type{id=19, name='动态规划'}, Type{id=20, name='动态规划'}, Type{id=21, name='排序'}, Type{id=22, name='分治'}, Type{id=23, name='java'}, Type{id=24, name='并查集'}, Type{id=25, name='Shell'}, Type{id=26, name='字符串'}, Type{id=27, name='进程通信'}, Type{id=28, name='单例模式'}, Type{id=29, name='静态代理'}, Type{id=30, name='动态代理'}, Type{id=31, name='模板方法'}, Type{id=32, name='观察者模式'}, Type{id=33, name='高精度'}, Type{id=34, name='阶乘'}, Type{id=35, name='深度优先'}, Type{id=36, name='递归'}, Type{id=37, name='BFS'}, Type{id=38, name='最大流'}, Type{id=39, name='C语言课程设计'}, Type{id=40, name='操作系课设'}, Type{id=41, name='数据库'}, Type{id=42, name='MySql'}, Type{id=43, name='Git'}, Type{id=44, name='SpringBoot'}, Type{id=45, name='缓存'}]}
2021-02-09 00:18:34.779  INFO 7304 --- [http-nio-8080-exec-9] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 00:18:34.782  INFO 7304 --- [http-nio-8080-exec-9] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 00:21:35.401  INFO 7304 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 00:21:35.441  INFO 7304 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 00:21:35.443  INFO 7304 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 00:21:35.519  INFO 7304 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Type{id=6, name='脚本'}, Type{id=7, name='效率'}, Type{id=8, name='教程'}, Type{id=10, name='C'}, Type{id=11, name='分享'}, Type{id=12, name='工具'}, Type{id=13, name='学习'}, Type{id=14, name='命令行'}, Type{id=15, name='HTML基础'}, Type{id=16, name='CSS基础'}, Type{id=17, name='JavaScript基础'}, Type{id=18, name='Vue'}, Type{id=19, name='动态规划'}, Type{id=20, name='动态规划'}, Type{id=21, name='排序'}, Type{id=22, name='分治'}, Type{id=23, name='java'}, Type{id=24, name='并查集'}, Type{id=25, name='Shell'}, Type{id=26, name='字符串'}, Type{id=27, name='进程通信'}, Type{id=28, name='单例模式'}, Type{id=29, name='静态代理'}, Type{id=30, name='动态代理'}, Type{id=31, name='模板方法'}, Type{id=32, name='观察者模式'}, Type{id=33, name='高精度'}, Type{id=34, name='阶乘'}, Type{id=35, name='深度优先'}, Type{id=36, name='递归'}, Type{id=37, name='BFS'}, Type{id=38, name='最大流'}, Type{id=39, name='C语言课程设计'}, Type{id=40, name='操作系课设'}, Type{id=41, name='数据库'}, Type{id=42, name='MySql'}, Type{id=43, name='Git'}, Type{id=44, name='SpringBoot'}, Type{id=45, name='缓存'}]}
2021-02-09 00:28:13.340  INFO 7304 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 00:28:13.343  INFO 7304 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 00:28:13.455  INFO 7304 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 00:28:13.514  INFO 7304 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Type{id=6, name='脚本'}, Type{id=7, name='效率'}, Type{id=8, name='教程'}, Type{id=10, name='C'}, Type{id=11, name='分享'}, Type{id=12, name='工具'}, Type{id=13, name='学习'}, Type{id=14, name='命令行'}, Type{id=15, name='HTML基础'}, Type{id=16, name='CSS基础'}, Type{id=17, name='JavaScript基础'}, Type{id=18, name='Vue'}, Type{id=19, name='动态规划'}, Type{id=20, name='动态规划'}, Type{id=21, name='排序'}, Type{id=22, name='分治'}, Type{id=23, name='java'}, Type{id=24, name='并查集'}, Type{id=25, name='Shell'}, Type{id=26, name='字符串'}, Type{id=27, name='进程通信'}, Type{id=28, name='单例模式'}, Type{id=29, name='静态代理'}, Type{id=30, name='动态代理'}, Type{id=31, name='模板方法'}, Type{id=32, name='观察者模式'}, Type{id=33, name='高精度'}, Type{id=34, name='阶乘'}, Type{id=35, name='深度优先'}, Type{id=36, name='递归'}, Type{id=37, name='BFS'}, Type{id=38, name='最大流'}, Type{id=39, name='C语言课程设计'}, Type{id=40, name='操作系课设'}, Type{id=41, name='数据库'}, Type{id=42, name='MySql'}, Type{id=43, name='Git'}, Type{id=44, name='SpringBoot'}, Type{id=45, name='缓存'}]}
2021-02-09 00:32:41.539  INFO 7304 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 00:32:41.542  INFO 7304 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Type{id=6, name='脚本'}, Type{id=7, name='效率'}, Type{id=8, name='教程'}, Type{id=10, name='C'}, Type{id=11, name='分享'}, Type{id=12, name='工具'}, Type{id=13, name='学习'}, Type{id=14, name='命令行'}, Type{id=15, name='HTML基础'}, Type{id=16, name='CSS基础'}, Type{id=17, name='JavaScript基础'}, Type{id=18, name='Vue'}, Type{id=19, name='动态规划'}, Type{id=20, name='动态规划'}, Type{id=21, name='排序'}, Type{id=22, name='分治'}, Type{id=23, name='java'}, Type{id=24, name='并查集'}, Type{id=25, name='Shell'}, Type{id=26, name='字符串'}, Type{id=27, name='进程通信'}, Type{id=28, name='单例模式'}, Type{id=29, name='静态代理'}, Type{id=30, name='动态代理'}, Type{id=31, name='模板方法'}, Type{id=32, name='观察者模式'}, Type{id=33, name='高精度'}, Type{id=34, name='阶乘'}, Type{id=35, name='深度优先'}, Type{id=36, name='递归'}, Type{id=37, name='BFS'}, Type{id=38, name='最大流'}, Type{id=39, name='C语言课程设计'}, Type{id=40, name='操作系课设'}, Type{id=41, name='数据库'}, Type{id=42, name='MySql'}, Type{id=43, name='Git'}, Type{id=44, name='SpringBoot'}, Type{id=45, name='缓存'}]}
2021-02-09 00:32:41.663  INFO 7304 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 00:32:41.666  INFO 7304 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 00:32:47.833  INFO 7304 --- [http-nio-8080-exec-7] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 00:32:47.837  INFO 7304 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 00:32:47.937  INFO 7304 --- [http-nio-8080-exec-7] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Type{id=6, name='脚本'}, Type{id=7, name='效率'}, Type{id=8, name='教程'}, Type{id=10, name='C'}, Type{id=11, name='分享'}, Type{id=12, name='工具'}, Type{id=13, name='学习'}, Type{id=14, name='命令行'}, Type{id=15, name='HTML基础'}, Type{id=16, name='CSS基础'}, Type{id=17, name='JavaScript基础'}, Type{id=18, name='Vue'}, Type{id=19, name='动态规划'}, Type{id=20, name='动态规划'}, Type{id=21, name='排序'}, Type{id=22, name='分治'}, Type{id=23, name='java'}, Type{id=24, name='并查集'}, Type{id=25, name='Shell'}, Type{id=26, name='字符串'}, Type{id=27, name='进程通信'}, Type{id=28, name='单例模式'}, Type{id=29, name='静态代理'}, Type{id=30, name='动态代理'}, Type{id=31, name='模板方法'}, Type{id=32, name='观察者模式'}, Type{id=33, name='高精度'}, Type{id=34, name='阶乘'}, Type{id=35, name='深度优先'}, Type{id=36, name='递归'}, Type{id=37, name='BFS'}, Type{id=38, name='最大流'}, Type{id=39, name='C语言课程设计'}, Type{id=40, name='操作系课设'}, Type{id=41, name='数据库'}, Type{id=42, name='MySql'}, Type{id=43, name='Git'}, Type{id=44, name='SpringBoot'}, Type{id=45, name='缓存'}]}
2021-02-09 00:32:47.948  INFO 7304 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 00:35:08.996  INFO 7304 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 00:35:09.003  INFO 7304 --- [http-nio-8080-exec-9] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 00:35:09.006  INFO 7304 --- [http-nio-8080-exec-9] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 00:35:09.020  INFO 7304 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Type{id=6, name='脚本'}, Type{id=7, name='效率'}, Type{id=8, name='教程'}, Type{id=10, name='C'}, Type{id=11, name='分享'}, Type{id=12, name='工具'}, Type{id=13, name='学习'}, Type{id=14, name='命令行'}, Type{id=15, name='HTML基础'}, Type{id=16, name='CSS基础'}, Type{id=17, name='JavaScript基础'}, Type{id=18, name='Vue'}, Type{id=19, name='动态规划'}, Type{id=20, name='动态规划'}, Type{id=21, name='排序'}, Type{id=22, name='分治'}, Type{id=23, name='java'}, Type{id=24, name='并查集'}, Type{id=25, name='Shell'}, Type{id=26, name='字符串'}, Type{id=27, name='进程通信'}, Type{id=28, name='单例模式'}, Type{id=29, name='静态代理'}, Type{id=30, name='动态代理'}, Type{id=31, name='模板方法'}, Type{id=32, name='观察者模式'}, Type{id=33, name='高精度'}, Type{id=34, name='阶乘'}, Type{id=35, name='深度优先'}, Type{id=36, name='递归'}, Type{id=37, name='BFS'}, Type{id=38, name='最大流'}, Type{id=39, name='C语言课程设计'}, Type{id=40, name='操作系课设'}, Type{id=41, name='数据库'}, Type{id=42, name='MySql'}, Type{id=43, name='Git'}, Type{id=44, name='SpringBoot'}, Type{id=45, name='缓存'}]}
2021-02-09 00:35:14.068  INFO 7304 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 00:35:14.070  INFO 7304 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 00:35:14.093  INFO 7304 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Type{id=6, name='脚本'}, Type{id=7, name='效率'}, Type{id=8, name='教程'}, Type{id=10, name='C'}, Type{id=11, name='分享'}, Type{id=12, name='工具'}, Type{id=13, name='学习'}, Type{id=14, name='命令行'}, Type{id=15, name='HTML基础'}, Type{id=16, name='CSS基础'}, Type{id=17, name='JavaScript基础'}, Type{id=18, name='Vue'}, Type{id=19, name='动态规划'}, Type{id=20, name='动态规划'}, Type{id=21, name='排序'}, Type{id=22, name='分治'}, Type{id=23, name='java'}, Type{id=24, name='并查集'}, Type{id=25, name='Shell'}, Type{id=26, name='字符串'}, Type{id=27, name='进程通信'}, Type{id=28, name='单例模式'}, Type{id=29, name='静态代理'}, Type{id=30, name='动态代理'}, Type{id=31, name='模板方法'}, Type{id=32, name='观察者模式'}, Type{id=33, name='高精度'}, Type{id=34, name='阶乘'}, Type{id=35, name='深度优先'}, Type{id=36, name='递归'}, Type{id=37, name='BFS'}, Type{id=38, name='最大流'}, Type{id=39, name='C语言课程设计'}, Type{id=40, name='操作系课设'}, Type{id=41, name='数据库'}, Type{id=42, name='MySql'}, Type{id=43, name='Git'}, Type{id=44, name='SpringBoot'}, Type{id=45, name='缓存'}]}
2021-02-09 00:35:14.749  INFO 7304 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 00:37:07.989  INFO 7304 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 00:37:07.992  INFO 7304 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Type{id=6, name='脚本'}, Type{id=7, name='效率'}, Type{id=8, name='教程'}, Type{id=10, name='C'}, Type{id=11, name='分享'}, Type{id=12, name='工具'}, Type{id=13, name='学习'}, Type{id=14, name='命令行'}, Type{id=15, name='HTML基础'}, Type{id=16, name='CSS基础'}, Type{id=17, name='JavaScript基础'}, Type{id=18, name='Vue'}, Type{id=19, name='动态规划'}, Type{id=20, name='动态规划'}, Type{id=21, name='排序'}, Type{id=22, name='分治'}, Type{id=23, name='java'}, Type{id=24, name='并查集'}, Type{id=25, name='Shell'}, Type{id=26, name='字符串'}, Type{id=27, name='进程通信'}, Type{id=28, name='单例模式'}, Type{id=29, name='静态代理'}, Type{id=30, name='动态代理'}, Type{id=31, name='模板方法'}, Type{id=32, name='观察者模式'}, Type{id=33, name='高精度'}, Type{id=34, name='阶乘'}, Type{id=35, name='深度优先'}, Type{id=36, name='递归'}, Type{id=37, name='BFS'}, Type{id=38, name='最大流'}, Type{id=39, name='C语言课程设计'}, Type{id=40, name='操作系课设'}, Type{id=41, name='数据库'}, Type{id=42, name='MySql'}, Type{id=43, name='Git'}, Type{id=44, name='SpringBoot'}, Type{id=45, name='缓存'}]}
2021-02-09 00:37:08.142  INFO 7304 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 00:37:08.154  INFO 7304 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 00:39:49.381  INFO 7304 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 00:39:49.387  INFO 7304 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Type{id=6, name='脚本'}, Type{id=7, name='效率'}, Type{id=8, name='教程'}, Type{id=10, name='C'}, Type{id=11, name='分享'}, Type{id=12, name='工具'}, Type{id=13, name='学习'}, Type{id=14, name='命令行'}, Type{id=15, name='HTML基础'}, Type{id=16, name='CSS基础'}, Type{id=17, name='JavaScript基础'}, Type{id=18, name='Vue'}, Type{id=19, name='动态规划'}, Type{id=20, name='动态规划'}, Type{id=21, name='排序'}, Type{id=22, name='分治'}, Type{id=23, name='java'}, Type{id=24, name='并查集'}, Type{id=25, name='Shell'}, Type{id=26, name='字符串'}, Type{id=27, name='进程通信'}, Type{id=28, name='单例模式'}, Type{id=29, name='静态代理'}, Type{id=30, name='动态代理'}, Type{id=31, name='模板方法'}, Type{id=32, name='观察者模式'}, Type{id=33, name='高精度'}, Type{id=34, name='阶乘'}, Type{id=35, name='深度优先'}, Type{id=36, name='递归'}, Type{id=37, name='BFS'}, Type{id=38, name='最大流'}, Type{id=39, name='C语言课程设计'}, Type{id=40, name='操作系课设'}, Type{id=41, name='数据库'}, Type{id=42, name='MySql'}, Type{id=43, name='Git'}, Type{id=44, name='SpringBoot'}, Type{id=45, name='缓存'}]}
2021-02-09 00:39:49.536  INFO 7304 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 00:39:49.541  INFO 7304 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 00:39:53.616  INFO 7304 --- [http-nio-8080-exec-7] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 00:39:53.621  INFO 7304 --- [http-nio-8080-exec-7] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Type{id=6, name='脚本'}, Type{id=7, name='效率'}, Type{id=8, name='教程'}, Type{id=10, name='C'}, Type{id=11, name='分享'}, Type{id=12, name='工具'}, Type{id=13, name='学习'}, Type{id=14, name='命令行'}, Type{id=15, name='HTML基础'}, Type{id=16, name='CSS基础'}, Type{id=17, name='JavaScript基础'}, Type{id=18, name='Vue'}, Type{id=19, name='动态规划'}, Type{id=20, name='动态规划'}, Type{id=21, name='排序'}, Type{id=22, name='分治'}, Type{id=23, name='java'}, Type{id=24, name='并查集'}, Type{id=25, name='Shell'}, Type{id=26, name='字符串'}, Type{id=27, name='进程通信'}, Type{id=28, name='单例模式'}, Type{id=29, name='静态代理'}, Type{id=30, name='动态代理'}, Type{id=31, name='模板方法'}, Type{id=32, name='观察者模式'}, Type{id=33, name='高精度'}, Type{id=34, name='阶乘'}, Type{id=35, name='深度优先'}, Type{id=36, name='递归'}, Type{id=37, name='BFS'}, Type{id=38, name='最大流'}, Type{id=39, name='C语言课程设计'}, Type{id=40, name='操作系课设'}, Type{id=41, name='数据库'}, Type{id=42, name='MySql'}, Type{id=43, name='Git'}, Type{id=44, name='SpringBoot'}, Type{id=45, name='缓存'}]}
2021-02-09 00:39:53.918  INFO 7304 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 00:39:53.933  INFO 7304 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 00:40:37.835  INFO 7304 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 00:40:37.850  INFO 7304 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Type{id=6, name='脚本'}, Type{id=7, name='效率'}, Type{id=8, name='教程'}, Type{id=10, name='C'}, Type{id=11, name='分享'}, Type{id=12, name='工具'}, Type{id=13, name='学习'}, Type{id=14, name='命令行'}, Type{id=15, name='HTML基础'}, Type{id=16, name='CSS基础'}, Type{id=17, name='JavaScript基础'}, Type{id=18, name='Vue'}, Type{id=19, name='动态规划'}, Type{id=20, name='动态规划'}, Type{id=21, name='排序'}, Type{id=22, name='分治'}, Type{id=23, name='java'}, Type{id=24, name='并查集'}, Type{id=25, name='Shell'}, Type{id=26, name='字符串'}, Type{id=27, name='进程通信'}, Type{id=28, name='单例模式'}, Type{id=29, name='静态代理'}, Type{id=30, name='动态代理'}, Type{id=31, name='模板方法'}, Type{id=32, name='观察者模式'}, Type{id=33, name='高精度'}, Type{id=34, name='阶乘'}, Type{id=35, name='深度优先'}, Type{id=36, name='递归'}, Type{id=37, name='BFS'}, Type{id=38, name='最大流'}, Type{id=39, name='C语言课程设计'}, Type{id=40, name='操作系课设'}, Type{id=41, name='数据库'}, Type{id=42, name='MySql'}, Type{id=43, name='Git'}, Type{id=44, name='SpringBoot'}, Type{id=45, name='缓存'}]}
2021-02-09 00:40:37.985  INFO 7304 --- [http-nio-8080-exec-9] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 00:40:37.989  INFO 7304 --- [http-nio-8080-exec-9] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 08:12:46.722  INFO 5624 --- [main] top.yalexin.rblog.RblogServApplication   : Starting RblogServApplication using Java 14 on DESKTOP-E2AV1HM with PID 5624 (C:\Users\YaleXin\IdeaProjects\rblog\target\classes started by YaleXin in C:\Users\YaleXin\IdeaProjects\rblog)
2021-02-09 08:12:46.749  INFO 5624 --- [main] top.yalexin.rblog.RblogServApplication   : The following profiles are active: dev
2021-02-09 08:12:54.661  INFO 5624 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-09 08:12:54.708  INFO 5624 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-09 08:12:54.708  INFO 5624 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.41]
2021-02-09 08:12:55.052  INFO 5624 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring embedded WebApplicationContext
2021-02-09 08:12:55.052  INFO 5624 --- [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 8139 ms
2021-02-09 08:12:57.295  INFO 5624 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-09 08:12:57.984  INFO 5624 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path '/api'
2021-02-09 08:12:58.031  INFO 5624 --- [main] top.yalexin.rblog.RblogServApplication   : Started RblogServApplication in 13.594 seconds (JVM running for 24.695)
2021-02-09 08:15:01.236  INFO 5624 --- [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-09 08:15:01.237  INFO 5624 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-09 08:15:01.239  INFO 5624 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
2021-02-09 08:15:01.269  INFO 5624 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 08:15:01.269  INFO 5624 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 08:15:01.301  INFO 5624 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-09 08:15:02.152  INFO 5624 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-09 08:15:02.472  INFO 5624 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 08:15:02.626  INFO 5624 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Type{id=6, name='脚本'}, Type{id=7, name='效率'}, Type{id=8, name='教程'}, Type{id=10, name='C'}, Type{id=11, name='分享'}, Type{id=12, name='工具'}, Type{id=13, name='学习'}, Type{id=14, name='命令行'}, Type{id=15, name='HTML基础'}, Type{id=16, name='CSS基础'}, Type{id=17, name='JavaScript基础'}, Type{id=18, name='Vue'}, Type{id=19, name='动态规划'}, Type{id=20, name='动态规划'}, Type{id=21, name='排序'}, Type{id=22, name='分治'}, Type{id=23, name='java'}, Type{id=24, name='并查集'}, Type{id=25, name='Shell'}, Type{id=26, name='字符串'}, Type{id=27, name='进程通信'}, Type{id=28, name='单例模式'}, Type{id=29, name='静态代理'}, Type{id=30, name='动态代理'}, Type{id=31, name='模板方法'}, Type{id=32, name='观察者模式'}, Type{id=33, name='高精度'}, Type{id=34, name='阶乘'}, Type{id=35, name='深度优先'}, Type{id=36, name='递归'}, Type{id=37, name='BFS'}, Type{id=38, name='最大流'}, Type{id=39, name='C语言课程设计'}, Type{id=40, name='操作系课设'}, Type{id=41, name='数据库'}, Type{id=42, name='MySql'}, Type{id=43, name='Git'}, Type{id=44, name='SpringBoot'}, Type{id=45, name='缓存'}]}
2021-02-09 08:17:36.889  INFO 5624 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 08:17:36.889  INFO 5624 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 08:17:36.896  INFO 5624 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 08:17:36.897  INFO 5624 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Type{id=6, name='脚本'}, Type{id=7, name='效率'}, Type{id=8, name='教程'}, Type{id=10, name='C'}, Type{id=11, name='分享'}, Type{id=12, name='工具'}, Type{id=13, name='学习'}, Type{id=14, name='命令行'}, Type{id=15, name='HTML基础'}, Type{id=16, name='CSS基础'}, Type{id=17, name='JavaScript基础'}, Type{id=18, name='Vue'}, Type{id=19, name='动态规划'}, Type{id=20, name='动态规划'}, Type{id=21, name='排序'}, Type{id=22, name='分治'}, Type{id=23, name='java'}, Type{id=24, name='并查集'}, Type{id=25, name='Shell'}, Type{id=26, name='字符串'}, Type{id=27, name='进程通信'}, Type{id=28, name='单例模式'}, Type{id=29, name='静态代理'}, Type{id=30, name='动态代理'}, Type{id=31, name='模板方法'}, Type{id=32, name='观察者模式'}, Type{id=33, name='高精度'}, Type{id=34, name='阶乘'}, Type{id=35, name='深度优先'}, Type{id=36, name='递归'}, Type{id=37, name='BFS'}, Type{id=38, name='最大流'}, Type{id=39, name='C语言课程设计'}, Type{id=40, name='操作系课设'}, Type{id=41, name='数据库'}, Type{id=42, name='MySql'}, Type{id=43, name='Git'}, Type{id=44, name='SpringBoot'}, Type{id=45, name='缓存'}]}
2021-02-09 08:27:58.838  INFO 5624 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 08:27:58.838  INFO 5624 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 08:27:58.850  INFO 5624 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 08:27:58.850  INFO 5624 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Type{id=6, name='脚本'}, Type{id=7, name='效率'}, Type{id=8, name='教程'}, Type{id=10, name='C'}, Type{id=11, name='分享'}, Type{id=12, name='工具'}, Type{id=13, name='学习'}, Type{id=14, name='命令行'}, Type{id=15, name='HTML基础'}, Type{id=16, name='CSS基础'}, Type{id=17, name='JavaScript基础'}, Type{id=18, name='Vue'}, Type{id=19, name='动态规划'}, Type{id=20, name='动态规划'}, Type{id=21, name='排序'}, Type{id=22, name='分治'}, Type{id=23, name='java'}, Type{id=24, name='并查集'}, Type{id=25, name='Shell'}, Type{id=26, name='字符串'}, Type{id=27, name='进程通信'}, Type{id=28, name='单例模式'}, Type{id=29, name='静态代理'}, Type{id=30, name='动态代理'}, Type{id=31, name='模板方法'}, Type{id=32, name='观察者模式'}, Type{id=33, name='高精度'}, Type{id=34, name='阶乘'}, Type{id=35, name='深度优先'}, Type{id=36, name='递归'}, Type{id=37, name='BFS'}, Type{id=38, name='最大流'}, Type{id=39, name='C语言课程设计'}, Type{id=40, name='操作系课设'}, Type{id=41, name='数据库'}, Type{id=42, name='MySql'}, Type{id=43, name='Git'}, Type{id=44, name='SpringBoot'}, Type{id=45, name='缓存'}]}
2021-02-09 08:29:59.411  INFO 5624 --- [http-nio-8080-exec-7] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 08:29:59.421  INFO 5624 --- [http-nio-8080-exec-7] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Type{id=6, name='脚本'}, Type{id=7, name='效率'}, Type{id=8, name='教程'}, Type{id=10, name='C'}, Type{id=11, name='分享'}, Type{id=12, name='工具'}, Type{id=13, name='学习'}, Type{id=14, name='命令行'}, Type{id=15, name='HTML基础'}, Type{id=16, name='CSS基础'}, Type{id=17, name='JavaScript基础'}, Type{id=18, name='Vue'}, Type{id=19, name='动态规划'}, Type{id=20, name='动态规划'}, Type{id=21, name='排序'}, Type{id=22, name='分治'}, Type{id=23, name='java'}, Type{id=24, name='并查集'}, Type{id=25, name='Shell'}, Type{id=26, name='字符串'}, Type{id=27, name='进程通信'}, Type{id=28, name='单例模式'}, Type{id=29, name='静态代理'}, Type{id=30, name='动态代理'}, Type{id=31, name='模板方法'}, Type{id=32, name='观察者模式'}, Type{id=33, name='高精度'}, Type{id=34, name='阶乘'}, Type{id=35, name='深度优先'}, Type{id=36, name='递归'}, Type{id=37, name='BFS'}, Type{id=38, name='最大流'}, Type{id=39, name='C语言课程设计'}, Type{id=40, name='操作系课设'}, Type{id=41, name='数据库'}, Type{id=42, name='MySql'}, Type{id=43, name='Git'}, Type{id=44, name='SpringBoot'}, Type{id=45, name='缓存'}]}
2021-02-09 08:29:59.512  INFO 5624 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 08:29:59.563  INFO 5624 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 08:30:11.803  INFO 5624 --- [http-nio-8080-exec-9] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 08:30:11.803  INFO 5624 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 08:30:11.807  INFO 5624 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 08:30:11.817  INFO 5624 --- [http-nio-8080-exec-9] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Type{id=6, name='脚本'}, Type{id=7, name='效率'}, Type{id=8, name='教程'}, Type{id=10, name='C'}, Type{id=11, name='分享'}, Type{id=12, name='工具'}, Type{id=13, name='学习'}, Type{id=14, name='命令行'}, Type{id=15, name='HTML基础'}, Type{id=16, name='CSS基础'}, Type{id=17, name='JavaScript基础'}, Type{id=18, name='Vue'}, Type{id=19, name='动态规划'}, Type{id=20, name='动态规划'}, Type{id=21, name='排序'}, Type{id=22, name='分治'}, Type{id=23, name='java'}, Type{id=24, name='并查集'}, Type{id=25, name='Shell'}, Type{id=26, name='字符串'}, Type{id=27, name='进程通信'}, Type{id=28, name='单例模式'}, Type{id=29, name='静态代理'}, Type{id=30, name='动态代理'}, Type{id=31, name='模板方法'}, Type{id=32, name='观察者模式'}, Type{id=33, name='高精度'}, Type{id=34, name='阶乘'}, Type{id=35, name='深度优先'}, Type{id=36, name='递归'}, Type{id=37, name='BFS'}, Type{id=38, name='最大流'}, Type{id=39, name='C语言课程设计'}, Type{id=40, name='操作系课设'}, Type{id=41, name='数据库'}, Type{id=42, name='MySql'}, Type{id=43, name='Git'}, Type{id=44, name='SpringBoot'}, Type{id=45, name='缓存'}]}
2021-02-09 08:54:13.792  INFO 5624 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 08:54:13.812  INFO 5624 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Type{id=6, name='脚本'}, Type{id=7, name='效率'}, Type{id=8, name='教程'}, Type{id=10, name='C'}, Type{id=11, name='分享'}, Type{id=12, name='工具'}, Type{id=13, name='学习'}, Type{id=14, name='命令行'}, Type{id=15, name='HTML基础'}, Type{id=16, name='CSS基础'}, Type{id=17, name='JavaScript基础'}, Type{id=18, name='Vue'}, Type{id=19, name='动态规划'}, Type{id=20, name='动态规划'}, Type{id=21, name='排序'}, Type{id=22, name='分治'}, Type{id=23, name='java'}, Type{id=24, name='并查集'}, Type{id=25, name='Shell'}, Type{id=26, name='字符串'}, Type{id=27, name='进程通信'}, Type{id=28, name='单例模式'}, Type{id=29, name='静态代理'}, Type{id=30, name='动态代理'}, Type{id=31, name='模板方法'}, Type{id=32, name='观察者模式'}, Type{id=33, name='高精度'}, Type{id=34, name='阶乘'}, Type{id=35, name='深度优先'}, Type{id=36, name='递归'}, Type{id=37, name='BFS'}, Type{id=38, name='最大流'}, Type{id=39, name='C语言课程设计'}, Type{id=40, name='操作系课设'}, Type{id=41, name='数据库'}, Type{id=42, name='MySql'}, Type{id=43, name='Git'}, Type{id=44, name='SpringBoot'}, Type{id=45, name='缓存'}]}
2021-02-09 08:54:14.102  INFO 5624 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 08:54:14.102  INFO 5624 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 08:54:28.925  INFO 5624 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 08:54:28.925  INFO 5624 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 08:54:28.929  INFO 5624 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 08:54:28.931  INFO 5624 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Type{id=6, name='脚本'}, Type{id=7, name='效率'}, Type{id=8, name='教程'}, Type{id=10, name='C'}, Type{id=11, name='分享'}, Type{id=12, name='工具'}, Type{id=13, name='学习'}, Type{id=14, name='命令行'}, Type{id=15, name='HTML基础'}, Type{id=16, name='CSS基础'}, Type{id=17, name='JavaScript基础'}, Type{id=18, name='Vue'}, Type{id=19, name='动态规划'}, Type{id=20, name='动态规划'}, Type{id=21, name='排序'}, Type{id=22, name='分治'}, Type{id=23, name='java'}, Type{id=24, name='并查集'}, Type{id=25, name='Shell'}, Type{id=26, name='字符串'}, Type{id=27, name='进程通信'}, Type{id=28, name='单例模式'}, Type{id=29, name='静态代理'}, Type{id=30, name='动态代理'}, Type{id=31, name='模板方法'}, Type{id=32, name='观察者模式'}, Type{id=33, name='高精度'}, Type{id=34, name='阶乘'}, Type{id=35, name='深度优先'}, Type{id=36, name='递归'}, Type{id=37, name='BFS'}, Type{id=38, name='最大流'}, Type{id=39, name='C语言课程设计'}, Type{id=40, name='操作系课设'}, Type{id=41, name='数据库'}, Type{id=42, name='MySql'}, Type{id=43, name='Git'}, Type{id=44, name='SpringBoot'}, Type{id=45, name='缓存'}]}
2021-02-09 08:57:34.419  INFO 5624 --- [http-nio-8080-exec-7] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 08:57:34.425  INFO 5624 --- [http-nio-8080-exec-7] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Type{id=6, name='脚本'}, Type{id=7, name='效率'}, Type{id=8, name='教程'}, Type{id=10, name='C'}, Type{id=11, name='分享'}, Type{id=12, name='工具'}, Type{id=13, name='学习'}, Type{id=14, name='命令行'}, Type{id=15, name='HTML基础'}, Type{id=16, name='CSS基础'}, Type{id=17, name='JavaScript基础'}, Type{id=18, name='Vue'}, Type{id=19, name='动态规划'}, Type{id=20, name='动态规划'}, Type{id=21, name='排序'}, Type{id=22, name='分治'}, Type{id=23, name='java'}, Type{id=24, name='并查集'}, Type{id=25, name='Shell'}, Type{id=26, name='字符串'}, Type{id=27, name='进程通信'}, Type{id=28, name='单例模式'}, Type{id=29, name='静态代理'}, Type{id=30, name='动态代理'}, Type{id=31, name='模板方法'}, Type{id=32, name='观察者模式'}, Type{id=33, name='高精度'}, Type{id=34, name='阶乘'}, Type{id=35, name='深度优先'}, Type{id=36, name='递归'}, Type{id=37, name='BFS'}, Type{id=38, name='最大流'}, Type{id=39, name='C语言课程设计'}, Type{id=40, name='操作系课设'}, Type{id=41, name='数据库'}, Type{id=42, name='MySql'}, Type{id=43, name='Git'}, Type{id=44, name='SpringBoot'}, Type{id=45, name='缓存'}]}
2021-02-09 08:57:34.594  INFO 5624 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 08:57:34.600  INFO 5624 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 08:58:16.041  INFO 5624 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 08:58:16.042  INFO 5624 --- [http-nio-8080-exec-9] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 08:58:16.046  INFO 5624 --- [http-nio-8080-exec-9] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 08:58:16.079  INFO 5624 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Type{id=6, name='脚本'}, Type{id=7, name='效率'}, Type{id=8, name='教程'}, Type{id=10, name='C'}, Type{id=11, name='分享'}, Type{id=12, name='工具'}, Type{id=13, name='学习'}, Type{id=14, name='命令行'}, Type{id=15, name='HTML基础'}, Type{id=16, name='CSS基础'}, Type{id=17, name='JavaScript基础'}, Type{id=18, name='Vue'}, Type{id=19, name='动态规划'}, Type{id=20, name='动态规划'}, Type{id=21, name='排序'}, Type{id=22, name='分治'}, Type{id=23, name='java'}, Type{id=24, name='并查集'}, Type{id=25, name='Shell'}, Type{id=26, name='字符串'}, Type{id=27, name='进程通信'}, Type{id=28, name='单例模式'}, Type{id=29, name='静态代理'}, Type{id=30, name='动态代理'}, Type{id=31, name='模板方法'}, Type{id=32, name='观察者模式'}, Type{id=33, name='高精度'}, Type{id=34, name='阶乘'}, Type{id=35, name='深度优先'}, Type{id=36, name='递归'}, Type{id=37, name='BFS'}, Type{id=38, name='最大流'}, Type{id=39, name='C语言课程设计'}, Type{id=40, name='操作系课设'}, Type{id=41, name='数据库'}, Type{id=42, name='MySql'}, Type{id=43, name='Git'}, Type{id=44, name='SpringBoot'}, Type{id=45, name='缓存'}]}
2021-02-09 08:58:24.356  INFO 5624 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 08:58:24.356  INFO 5624 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 08:58:24.361  INFO 5624 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 08:58:24.361  INFO 5624 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Type{id=6, name='脚本'}, Type{id=7, name='效率'}, Type{id=8, name='教程'}, Type{id=10, name='C'}, Type{id=11, name='分享'}, Type{id=12, name='工具'}, Type{id=13, name='学习'}, Type{id=14, name='命令行'}, Type{id=15, name='HTML基础'}, Type{id=16, name='CSS基础'}, Type{id=17, name='JavaScript基础'}, Type{id=18, name='Vue'}, Type{id=19, name='动态规划'}, Type{id=20, name='动态规划'}, Type{id=21, name='排序'}, Type{id=22, name='分治'}, Type{id=23, name='java'}, Type{id=24, name='并查集'}, Type{id=25, name='Shell'}, Type{id=26, name='字符串'}, Type{id=27, name='进程通信'}, Type{id=28, name='单例模式'}, Type{id=29, name='静态代理'}, Type{id=30, name='动态代理'}, Type{id=31, name='模板方法'}, Type{id=32, name='观察者模式'}, Type{id=33, name='高精度'}, Type{id=34, name='阶乘'}, Type{id=35, name='深度优先'}, Type{id=36, name='递归'}, Type{id=37, name='BFS'}, Type{id=38, name='最大流'}, Type{id=39, name='C语言课程设计'}, Type{id=40, name='操作系课设'}, Type{id=41, name='数据库'}, Type{id=42, name='MySql'}, Type{id=43, name='Git'}, Type{id=44, name='SpringBoot'}, Type{id=45, name='缓存'}]}
2021-02-09 08:59:55.162  INFO 5624 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 08:59:55.178  INFO 5624 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Type{id=6, name='脚本'}, Type{id=7, name='效率'}, Type{id=8, name='教程'}, Type{id=10, name='C'}, Type{id=11, name='分享'}, Type{id=12, name='工具'}, Type{id=13, name='学习'}, Type{id=14, name='命令行'}, Type{id=15, name='HTML基础'}, Type{id=16, name='CSS基础'}, Type{id=17, name='JavaScript基础'}, Type{id=18, name='Vue'}, Type{id=19, name='动态规划'}, Type{id=20, name='动态规划'}, Type{id=21, name='排序'}, Type{id=22, name='分治'}, Type{id=23, name='java'}, Type{id=24, name='并查集'}, Type{id=25, name='Shell'}, Type{id=26, name='字符串'}, Type{id=27, name='进程通信'}, Type{id=28, name='单例模式'}, Type{id=29, name='静态代理'}, Type{id=30, name='动态代理'}, Type{id=31, name='模板方法'}, Type{id=32, name='观察者模式'}, Type{id=33, name='高精度'}, Type{id=34, name='阶乘'}, Type{id=35, name='深度优先'}, Type{id=36, name='递归'}, Type{id=37, name='BFS'}, Type{id=38, name='最大流'}, Type{id=39, name='C语言课程设计'}, Type{id=40, name='操作系课设'}, Type{id=41, name='数据库'}, Type{id=42, name='MySql'}, Type{id=43, name='Git'}, Type{id=44, name='SpringBoot'}, Type{id=45, name='缓存'}]}
2021-02-09 08:59:55.507  INFO 5624 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 08:59:55.511  INFO 5624 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 09:03:41.036  INFO 5624 --- [http-nio-8080-exec-7] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 09:03:41.042  INFO 5624 --- [http-nio-8080-exec-7] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Type{id=6, name='脚本'}, Type{id=7, name='效率'}, Type{id=8, name='教程'}, Type{id=10, name='C'}, Type{id=11, name='分享'}, Type{id=12, name='工具'}, Type{id=13, name='学习'}, Type{id=14, name='命令行'}, Type{id=15, name='HTML基础'}, Type{id=16, name='CSS基础'}, Type{id=17, name='JavaScript基础'}, Type{id=18, name='Vue'}, Type{id=19, name='动态规划'}, Type{id=20, name='动态规划'}, Type{id=21, name='排序'}, Type{id=22, name='分治'}, Type{id=23, name='java'}, Type{id=24, name='并查集'}, Type{id=25, name='Shell'}, Type{id=26, name='字符串'}, Type{id=27, name='进程通信'}, Type{id=28, name='单例模式'}, Type{id=29, name='静态代理'}, Type{id=30, name='动态代理'}, Type{id=31, name='模板方法'}, Type{id=32, name='观察者模式'}, Type{id=33, name='高精度'}, Type{id=34, name='阶乘'}, Type{id=35, name='深度优先'}, Type{id=36, name='递归'}, Type{id=37, name='BFS'}, Type{id=38, name='最大流'}, Type{id=39, name='C语言课程设计'}, Type{id=40, name='操作系课设'}, Type{id=41, name='数据库'}, Type{id=42, name='MySql'}, Type{id=43, name='Git'}, Type{id=44, name='SpringBoot'}, Type{id=45, name='缓存'}]}
2021-02-09 09:03:41.126  INFO 5624 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 09:03:41.129  INFO 5624 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 09:07:10.609  INFO 5624 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 09:07:10.616  INFO 5624 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Type{id=6, name='脚本'}, Type{id=7, name='效率'}, Type{id=8, name='教程'}, Type{id=10, name='C'}, Type{id=11, name='分享'}, Type{id=12, name='工具'}, Type{id=13, name='学习'}, Type{id=14, name='命令行'}, Type{id=15, name='HTML基础'}, Type{id=16, name='CSS基础'}, Type{id=17, name='JavaScript基础'}, Type{id=18, name='Vue'}, Type{id=19, name='动态规划'}, Type{id=20, name='动态规划'}, Type{id=21, name='排序'}, Type{id=22, name='分治'}, Type{id=23, name='java'}, Type{id=24, name='并查集'}, Type{id=25, name='Shell'}, Type{id=26, name='字符串'}, Type{id=27, name='进程通信'}, Type{id=28, name='单例模式'}, Type{id=29, name='静态代理'}, Type{id=30, name='动态代理'}, Type{id=31, name='模板方法'}, Type{id=32, name='观察者模式'}, Type{id=33, name='高精度'}, Type{id=34, name='阶乘'}, Type{id=35, name='深度优先'}, Type{id=36, name='递归'}, Type{id=37, name='BFS'}, Type{id=38, name='最大流'}, Type{id=39, name='C语言课程设计'}, Type{id=40, name='操作系课设'}, Type{id=41, name='数据库'}, Type{id=42, name='MySql'}, Type{id=43, name='Git'}, Type{id=44, name='SpringBoot'}, Type{id=45, name='缓存'}]}
2021-02-09 09:07:10.759  INFO 5624 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 09:07:10.761  INFO 5624 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 09:09:47.991  INFO 5624 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 09:09:47.991  INFO 5624 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Type{id=6, name='脚本'}, Type{id=7, name='效率'}, Type{id=8, name='教程'}, Type{id=10, name='C'}, Type{id=11, name='分享'}, Type{id=12, name='工具'}, Type{id=13, name='学习'}, Type{id=14, name='命令行'}, Type{id=15, name='HTML基础'}, Type{id=16, name='CSS基础'}, Type{id=17, name='JavaScript基础'}, Type{id=18, name='Vue'}, Type{id=19, name='动态规划'}, Type{id=20, name='动态规划'}, Type{id=21, name='排序'}, Type{id=22, name='分治'}, Type{id=23, name='java'}, Type{id=24, name='并查集'}, Type{id=25, name='Shell'}, Type{id=26, name='字符串'}, Type{id=27, name='进程通信'}, Type{id=28, name='单例模式'}, Type{id=29, name='静态代理'}, Type{id=30, name='动态代理'}, Type{id=31, name='模板方法'}, Type{id=32, name='观察者模式'}, Type{id=33, name='高精度'}, Type{id=34, name='阶乘'}, Type{id=35, name='深度优先'}, Type{id=36, name='递归'}, Type{id=37, name='BFS'}, Type{id=38, name='最大流'}, Type{id=39, name='C语言课程设计'}, Type{id=40, name='操作系课设'}, Type{id=41, name='数据库'}, Type{id=42, name='MySql'}, Type{id=43, name='Git'}, Type{id=44, name='SpringBoot'}, Type{id=45, name='缓存'}]}
2021-02-09 09:09:48.141  INFO 5624 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 09:09:48.144  INFO 5624 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 09:12:39.493  INFO 5624 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 09:12:39.499  INFO 5624 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Type{id=6, name='脚本'}, Type{id=7, name='效率'}, Type{id=8, name='教程'}, Type{id=10, name='C'}, Type{id=11, name='分享'}, Type{id=12, name='工具'}, Type{id=13, name='学习'}, Type{id=14, name='命令行'}, Type{id=15, name='HTML基础'}, Type{id=16, name='CSS基础'}, Type{id=17, name='JavaScript基础'}, Type{id=18, name='Vue'}, Type{id=19, name='动态规划'}, Type{id=20, name='动态规划'}, Type{id=21, name='排序'}, Type{id=22, name='分治'}, Type{id=23, name='java'}, Type{id=24, name='并查集'}, Type{id=25, name='Shell'}, Type{id=26, name='字符串'}, Type{id=27, name='进程通信'}, Type{id=28, name='单例模式'}, Type{id=29, name='静态代理'}, Type{id=30, name='动态代理'}, Type{id=31, name='模板方法'}, Type{id=32, name='观察者模式'}, Type{id=33, name='高精度'}, Type{id=34, name='阶乘'}, Type{id=35, name='深度优先'}, Type{id=36, name='递归'}, Type{id=37, name='BFS'}, Type{id=38, name='最大流'}, Type{id=39, name='C语言课程设计'}, Type{id=40, name='操作系课设'}, Type{id=41, name='数据库'}, Type{id=42, name='MySql'}, Type{id=43, name='Git'}, Type{id=44, name='SpringBoot'}, Type{id=45, name='缓存'}]}
2021-02-09 09:12:39.503  INFO 5624 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 09:12:39.507  INFO 5624 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 09:15:30.012  INFO 5624 --- [http-nio-8080-exec-9] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 09:15:30.020  INFO 5624 --- [http-nio-8080-exec-9] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Type{id=6, name='脚本'}, Type{id=7, name='效率'}, Type{id=8, name='教程'}, Type{id=10, name='C'}, Type{id=11, name='分享'}, Type{id=12, name='工具'}, Type{id=13, name='学习'}, Type{id=14, name='命令行'}, Type{id=15, name='HTML基础'}, Type{id=16, name='CSS基础'}, Type{id=17, name='JavaScript基础'}, Type{id=18, name='Vue'}, Type{id=19, name='动态规划'}, Type{id=20, name='动态规划'}, Type{id=21, name='排序'}, Type{id=22, name='分治'}, Type{id=23, name='java'}, Type{id=24, name='并查集'}, Type{id=25, name='Shell'}, Type{id=26, name='字符串'}, Type{id=27, name='进程通信'}, Type{id=28, name='单例模式'}, Type{id=29, name='静态代理'}, Type{id=30, name='动态代理'}, Type{id=31, name='模板方法'}, Type{id=32, name='观察者模式'}, Type{id=33, name='高精度'}, Type{id=34, name='阶乘'}, Type{id=35, name='深度优先'}, Type{id=36, name='递归'}, Type{id=37, name='BFS'}, Type{id=38, name='最大流'}, Type{id=39, name='C语言课程设计'}, Type{id=40, name='操作系课设'}, Type{id=41, name='数据库'}, Type{id=42, name='MySql'}, Type{id=43, name='Git'}, Type{id=44, name='SpringBoot'}, Type{id=45, name='缓存'}]}
2021-02-09 09:15:30.076  INFO 5624 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 09:15:30.080  INFO 5624 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 09:17:46.507  INFO 5624 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 09:17:46.512  INFO 5624 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Type{id=6, name='脚本'}, Type{id=7, name='效率'}, Type{id=8, name='教程'}, Type{id=10, name='C'}, Type{id=11, name='分享'}, Type{id=12, name='工具'}, Type{id=13, name='学习'}, Type{id=14, name='命令行'}, Type{id=15, name='HTML基础'}, Type{id=16, name='CSS基础'}, Type{id=17, name='JavaScript基础'}, Type{id=18, name='Vue'}, Type{id=19, name='动态规划'}, Type{id=20, name='动态规划'}, Type{id=21, name='排序'}, Type{id=22, name='分治'}, Type{id=23, name='java'}, Type{id=24, name='并查集'}, Type{id=25, name='Shell'}, Type{id=26, name='字符串'}, Type{id=27, name='进程通信'}, Type{id=28, name='单例模式'}, Type{id=29, name='静态代理'}, Type{id=30, name='动态代理'}, Type{id=31, name='模板方法'}, Type{id=32, name='观察者模式'}, Type{id=33, name='高精度'}, Type{id=34, name='阶乘'}, Type{id=35, name='深度优先'}, Type{id=36, name='递归'}, Type{id=37, name='BFS'}, Type{id=38, name='最大流'}, Type{id=39, name='C语言课程设计'}, Type{id=40, name='操作系课设'}, Type{id=41, name='数据库'}, Type{id=42, name='MySql'}, Type{id=43, name='Git'}, Type{id=44, name='SpringBoot'}, Type{id=45, name='缓存'}]}
2021-02-09 09:17:46.641  INFO 5624 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 09:17:46.645  INFO 5624 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 10:41:15.187  INFO 10428 --- [main] top.yalexin.rblog.RblogServApplication   : Starting RblogServApplication using Java 14 on DESKTOP-E2AV1HM with PID 10428 (C:\Users\YaleXin\IdeaProjects\rblog\target\classes started by YaleXin in C:\Users\YaleXin\IdeaProjects\rblog)
2021-02-09 10:41:15.196  INFO 10428 --- [main] top.yalexin.rblog.RblogServApplication   : The following profiles are active: dev
2021-02-09 10:41:20.508  INFO 10428 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-09 10:41:20.524  INFO 10428 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-09 10:41:20.524  INFO 10428 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.41]
2021-02-09 10:41:20.680  INFO 10428 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring embedded WebApplicationContext
2021-02-09 10:41:20.680  INFO 10428 --- [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 5249 ms
2021-02-09 10:41:21.937 ERROR 10428 --- [main] o.m.spring.mapper.MapperFactoryBean      : Error while adding the mapper 'interface top.yalexin.rblog.mapper.TagMapper' to configuration.

org.apache.ibatis.builder.BuilderException: Parsing error was found in mapping #{id, name}.  Check syntax #{property|(expression), var1=value1, var2=value2, ...} 
	at org.apache.ibatis.builder.SqlSourceBuilder$ParameterMappingTokenHandler.parseParameterMapping(SqlSourceBuilder.java:152) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.SqlSourceBuilder$ParameterMappingTokenHandler.buildParameterMapping(SqlSourceBuilder.java:92) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.SqlSourceBuilder$ParameterMappingTokenHandler.handleToken(SqlSourceBuilder.java:87) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.parsing.GenericTokenParser.parse(GenericTokenParser.java:77) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.SqlSourceBuilder.parse(SqlSourceBuilder.java:50) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.scripting.defaults.RawSqlSource.<init>(RawSqlSource.java:46) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.scripting.xmltags.XMLLanguageDriver.createSqlSource(XMLLanguageDriver.java:60) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.buildSqlSourceFromStrings(MapperAnnotationBuilder.java:635) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.buildSqlSource(MapperAnnotationBuilder.java:624) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.lambda$parseStatement$2(MapperAnnotationBuilder.java:301) ~[mybatis-3.5.6.jar:3.5.6]
	at java.base/java.util.Optional.ifPresent(Optional.java:176) ~[na:na]
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.parseStatement(MapperAnnotationBuilder.java:300) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.parse(MapperAnnotationBuilder.java:132) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.binding.MapperRegistry.addMapper(MapperRegistry.java:72) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.session.Configuration.addMapper(Configuration.java:841) ~[mybatis-3.5.6.jar:3.5.6]
	at org.mybatis.spring.mapper.MapperFactoryBean.checkDaoConfig(MapperFactoryBean.java:80) ~[mybatis-spring-2.0.6.jar:2.0.6]
	at org.springframework.dao.support.DaoSupport.afterPropertiesSet(DaoSupport.java:44) ~[spring-tx-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1847) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1784) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:609) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:531) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1380) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1300) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1415) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:608) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:531) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1380) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1300) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1415) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:608) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:531) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:944) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:923) ~[spring-context-5.3.3.jar:5.3.3]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:588) ~[spring-context-5.3.3.jar:5.3.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:144) ~[spring-boot-2.4.2.jar:2.4.2]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:767) ~[spring-boot-2.4.2.jar:2.4.2]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759) ~[spring-boot-2.4.2.jar:2.4.2]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:426) ~[spring-boot-2.4.2.jar:2.4.2]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:326) ~[spring-boot-2.4.2.jar:2.4.2]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1311) ~[spring-boot-2.4.2.jar:2.4.2]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300) ~[spring-boot-2.4.2.jar:2.4.2]
	at top.yalexin.rblog.RblogServApplication.main(RblogServApplication.java:10) ~[classes/:na]
Caused by: java.lang.StringIndexOutOfBoundsException: String index out of range: 9
	at java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48) ~[na:na]
	at java.base/java.lang.String.charAt(String.java:711) ~[na:na]
	at org.apache.ibatis.builder.ParameterExpression.trimmedStr(ParameterExpression.java:131) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.ParameterExpression.option(ParameterExpression.java:124) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.ParameterExpression.jdbcTypeOpt(ParameterExpression.java:99) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.ParameterExpression.property(ParameterExpression.java:70) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.ParameterExpression.parse(ParameterExpression.java:47) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.ParameterExpression.<init>(ParameterExpression.java:39) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.SqlSourceBuilder$ParameterMappingTokenHandler.parseParameterMapping(SqlSourceBuilder.java:148) ~[mybatis-3.5.6.jar:3.5.6]
	... 61 common frames omitted

2021-02-09 10:41:21.937  WARN 10428 --- [main] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'blogController': Unsatisfied dependency expressed through field 'blogService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'blogServiceImpl': Unsatisfied dependency expressed through field 'tagMapper'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'tagMapper' defined in file [C:\Users\YaleXin\IdeaProjects\rblog\target\classes\top\yalexin\rblog\mapper\TagMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Parsing error was found in mapping #{id, name}.  Check syntax #{property|(expression), var1=value1, var2=value2, ...} 
2021-02-09 10:41:21.937  INFO 10428 --- [main] o.apache.catalina.core.StandardService   : Stopping service [Tomcat]
2021-02-09 10:41:21.952  INFO 10428 --- [main] ConditionEvaluationReportLoggingListener : 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2021-02-09 10:41:22.031 ERROR 10428 --- [main] o.s.boot.SpringApplication               : Application run failed

org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'blogController': Unsatisfied dependency expressed through field 'blogService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'blogServiceImpl': Unsatisfied dependency expressed through field 'tagMapper'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'tagMapper' defined in file [C:\Users\YaleXin\IdeaProjects\rblog\target\classes\top\yalexin\rblog\mapper\TagMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Parsing error was found in mapping #{id, name}.  Check syntax #{property|(expression), var1=value1, var2=value2, ...} 
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1415) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:608) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:531) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:944) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:923) ~[spring-context-5.3.3.jar:5.3.3]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:588) ~[spring-context-5.3.3.jar:5.3.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:144) ~[spring-boot-2.4.2.jar:2.4.2]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:767) ~[spring-boot-2.4.2.jar:2.4.2]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759) ~[spring-boot-2.4.2.jar:2.4.2]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:426) ~[spring-boot-2.4.2.jar:2.4.2]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:326) ~[spring-boot-2.4.2.jar:2.4.2]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1311) ~[spring-boot-2.4.2.jar:2.4.2]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300) ~[spring-boot-2.4.2.jar:2.4.2]
	at top.yalexin.rblog.RblogServApplication.main(RblogServApplication.java:10) ~[classes/:na]
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'blogServiceImpl': Unsatisfied dependency expressed through field 'tagMapper'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'tagMapper' defined in file [C:\Users\YaleXin\IdeaProjects\rblog\target\classes\top\yalexin\rblog\mapper\TagMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Parsing error was found in mapping #{id, name}.  Check syntax #{property|(expression), var1=value1, var2=value2, ...} 
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1415) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:608) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:531) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1380) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1300) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640) ~[spring-beans-5.3.3.jar:5.3.3]
	... 20 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'tagMapper' defined in file [C:\Users\YaleXin\IdeaProjects\rblog\target\classes\top\yalexin\rblog\mapper\TagMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Parsing error was found in mapping #{id, name}.  Check syntax #{property|(expression), var1=value1, var2=value2, ...} 
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1788) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:609) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:531) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1380) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1300) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640) ~[spring-beans-5.3.3.jar:5.3.3]
	... 33 common frames omitted
Caused by: java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Parsing error was found in mapping #{id, name}.  Check syntax #{property|(expression), var1=value1, var2=value2, ...} 
	at org.mybatis.spring.mapper.MapperFactoryBean.checkDaoConfig(MapperFactoryBean.java:83) ~[mybatis-spring-2.0.6.jar:2.0.6]
	at org.springframework.dao.support.DaoSupport.afterPropertiesSet(DaoSupport.java:44) ~[spring-tx-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1847) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1784) ~[spring-beans-5.3.3.jar:5.3.3]
	... 43 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Parsing error was found in mapping #{id, name}.  Check syntax #{property|(expression), var1=value1, var2=value2, ...} 
	at org.apache.ibatis.builder.SqlSourceBuilder$ParameterMappingTokenHandler.parseParameterMapping(SqlSourceBuilder.java:152) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.SqlSourceBuilder$ParameterMappingTokenHandler.buildParameterMapping(SqlSourceBuilder.java:92) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.SqlSourceBuilder$ParameterMappingTokenHandler.handleToken(SqlSourceBuilder.java:87) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.parsing.GenericTokenParser.parse(GenericTokenParser.java:77) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.SqlSourceBuilder.parse(SqlSourceBuilder.java:50) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.scripting.defaults.RawSqlSource.<init>(RawSqlSource.java:46) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.scripting.xmltags.XMLLanguageDriver.createSqlSource(XMLLanguageDriver.java:60) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.buildSqlSourceFromStrings(MapperAnnotationBuilder.java:635) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.buildSqlSource(MapperAnnotationBuilder.java:624) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.lambda$parseStatement$2(MapperAnnotationBuilder.java:301) ~[mybatis-3.5.6.jar:3.5.6]
	at java.base/java.util.Optional.ifPresent(Optional.java:176) ~[na:na]
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.parseStatement(MapperAnnotationBuilder.java:300) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.parse(MapperAnnotationBuilder.java:132) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.binding.MapperRegistry.addMapper(MapperRegistry.java:72) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.session.Configuration.addMapper(Configuration.java:841) ~[mybatis-3.5.6.jar:3.5.6]
	at org.mybatis.spring.mapper.MapperFactoryBean.checkDaoConfig(MapperFactoryBean.java:80) ~[mybatis-spring-2.0.6.jar:2.0.6]
	... 46 common frames omitted
Caused by: java.lang.StringIndexOutOfBoundsException: String index out of range: 9
	at java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48) ~[na:na]
	at java.base/java.lang.String.charAt(String.java:711) ~[na:na]
	at org.apache.ibatis.builder.ParameterExpression.trimmedStr(ParameterExpression.java:131) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.ParameterExpression.option(ParameterExpression.java:124) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.ParameterExpression.jdbcTypeOpt(ParameterExpression.java:99) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.ParameterExpression.property(ParameterExpression.java:70) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.ParameterExpression.parse(ParameterExpression.java:47) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.ParameterExpression.<init>(ParameterExpression.java:39) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.SqlSourceBuilder$ParameterMappingTokenHandler.parseParameterMapping(SqlSourceBuilder.java:148) ~[mybatis-3.5.6.jar:3.5.6]
	... 61 common frames omitted

2021-02-09 10:43:21.770  INFO 8756 --- [main] top.yalexin.rblog.RblogServApplication   : Starting RblogServApplication using Java 14 on DESKTOP-E2AV1HM with PID 8756 (C:\Users\YaleXin\IdeaProjects\rblog\target\classes started by YaleXin in C:\Users\YaleXin\IdeaProjects\rblog)
2021-02-09 10:43:21.786  INFO 8756 --- [main] top.yalexin.rblog.RblogServApplication   : The following profiles are active: dev
2021-02-09 10:43:23.491  INFO 8756 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-09 10:43:23.491  INFO 8756 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-09 10:43:23.491  INFO 8756 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.41]
2021-02-09 10:43:23.585  INFO 8756 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring embedded WebApplicationContext
2021-02-09 10:43:23.585  INFO 8756 --- [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1718 ms
2021-02-09 10:43:23.970 ERROR 8756 --- [main] o.m.spring.mapper.MapperFactoryBean      : Error while adding the mapper 'interface top.yalexin.rblog.mapper.TagMapper' to configuration.

org.apache.ibatis.builder.BuilderException: Parsing error was found in mapping #{id, name}.  Check syntax #{property|(expression), var1=value1, var2=value2, ...} 
	at org.apache.ibatis.builder.SqlSourceBuilder$ParameterMappingTokenHandler.parseParameterMapping(SqlSourceBuilder.java:152) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.SqlSourceBuilder$ParameterMappingTokenHandler.buildParameterMapping(SqlSourceBuilder.java:92) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.SqlSourceBuilder$ParameterMappingTokenHandler.handleToken(SqlSourceBuilder.java:87) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.parsing.GenericTokenParser.parse(GenericTokenParser.java:77) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.SqlSourceBuilder.parse(SqlSourceBuilder.java:50) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.scripting.defaults.RawSqlSource.<init>(RawSqlSource.java:46) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.scripting.xmltags.XMLLanguageDriver.createSqlSource(XMLLanguageDriver.java:60) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.buildSqlSourceFromStrings(MapperAnnotationBuilder.java:635) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.buildSqlSource(MapperAnnotationBuilder.java:624) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.lambda$parseStatement$2(MapperAnnotationBuilder.java:301) ~[mybatis-3.5.6.jar:3.5.6]
	at java.base/java.util.Optional.ifPresent(Optional.java:176) ~[na:na]
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.parseStatement(MapperAnnotationBuilder.java:300) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.parse(MapperAnnotationBuilder.java:132) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.binding.MapperRegistry.addMapper(MapperRegistry.java:72) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.session.Configuration.addMapper(Configuration.java:841) ~[mybatis-3.5.6.jar:3.5.6]
	at org.mybatis.spring.mapper.MapperFactoryBean.checkDaoConfig(MapperFactoryBean.java:80) ~[mybatis-spring-2.0.6.jar:2.0.6]
	at org.springframework.dao.support.DaoSupport.afterPropertiesSet(DaoSupport.java:44) ~[spring-tx-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1847) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1784) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:609) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:531) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1380) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1300) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1415) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:608) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:531) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1380) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1300) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1415) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:608) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:531) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:944) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:923) ~[spring-context-5.3.3.jar:5.3.3]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:588) ~[spring-context-5.3.3.jar:5.3.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:144) ~[spring-boot-2.4.2.jar:2.4.2]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:767) ~[spring-boot-2.4.2.jar:2.4.2]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759) ~[spring-boot-2.4.2.jar:2.4.2]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:426) ~[spring-boot-2.4.2.jar:2.4.2]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:326) ~[spring-boot-2.4.2.jar:2.4.2]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1311) ~[spring-boot-2.4.2.jar:2.4.2]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300) ~[spring-boot-2.4.2.jar:2.4.2]
	at top.yalexin.rblog.RblogServApplication.main(RblogServApplication.java:10) ~[classes/:na]
Caused by: java.lang.StringIndexOutOfBoundsException: String index out of range: 9
	at java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48) ~[na:na]
	at java.base/java.lang.String.charAt(String.java:711) ~[na:na]
	at org.apache.ibatis.builder.ParameterExpression.trimmedStr(ParameterExpression.java:131) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.ParameterExpression.option(ParameterExpression.java:124) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.ParameterExpression.jdbcTypeOpt(ParameterExpression.java:99) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.ParameterExpression.property(ParameterExpression.java:70) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.ParameterExpression.parse(ParameterExpression.java:47) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.ParameterExpression.<init>(ParameterExpression.java:39) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.SqlSourceBuilder$ParameterMappingTokenHandler.parseParameterMapping(SqlSourceBuilder.java:148) ~[mybatis-3.5.6.jar:3.5.6]
	... 61 common frames omitted

2021-02-09 10:43:23.970  WARN 8756 --- [main] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'blogController': Unsatisfied dependency expressed through field 'blogService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'blogServiceImpl': Unsatisfied dependency expressed through field 'tagMapper'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'tagMapper' defined in file [C:\Users\YaleXin\IdeaProjects\rblog\target\classes\top\yalexin\rblog\mapper\TagMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Parsing error was found in mapping #{id, name}.  Check syntax #{property|(expression), var1=value1, var2=value2, ...} 
2021-02-09 10:43:23.970  INFO 8756 --- [main] o.apache.catalina.core.StandardService   : Stopping service [Tomcat]
2021-02-09 10:43:23.986  INFO 8756 --- [main] ConditionEvaluationReportLoggingListener : 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2021-02-09 10:43:24.017 ERROR 8756 --- [main] o.s.boot.SpringApplication               : Application run failed

org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'blogController': Unsatisfied dependency expressed through field 'blogService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'blogServiceImpl': Unsatisfied dependency expressed through field 'tagMapper'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'tagMapper' defined in file [C:\Users\YaleXin\IdeaProjects\rblog\target\classes\top\yalexin\rblog\mapper\TagMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Parsing error was found in mapping #{id, name}.  Check syntax #{property|(expression), var1=value1, var2=value2, ...} 
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1415) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:608) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:531) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:944) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:923) ~[spring-context-5.3.3.jar:5.3.3]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:588) ~[spring-context-5.3.3.jar:5.3.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:144) ~[spring-boot-2.4.2.jar:2.4.2]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:767) ~[spring-boot-2.4.2.jar:2.4.2]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759) ~[spring-boot-2.4.2.jar:2.4.2]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:426) ~[spring-boot-2.4.2.jar:2.4.2]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:326) ~[spring-boot-2.4.2.jar:2.4.2]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1311) ~[spring-boot-2.4.2.jar:2.4.2]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300) ~[spring-boot-2.4.2.jar:2.4.2]
	at top.yalexin.rblog.RblogServApplication.main(RblogServApplication.java:10) ~[classes/:na]
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'blogServiceImpl': Unsatisfied dependency expressed through field 'tagMapper'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'tagMapper' defined in file [C:\Users\YaleXin\IdeaProjects\rblog\target\classes\top\yalexin\rblog\mapper\TagMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Parsing error was found in mapping #{id, name}.  Check syntax #{property|(expression), var1=value1, var2=value2, ...} 
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1415) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:608) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:531) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1380) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1300) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640) ~[spring-beans-5.3.3.jar:5.3.3]
	... 20 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'tagMapper' defined in file [C:\Users\YaleXin\IdeaProjects\rblog\target\classes\top\yalexin\rblog\mapper\TagMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Parsing error was found in mapping #{id, name}.  Check syntax #{property|(expression), var1=value1, var2=value2, ...} 
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1788) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:609) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:531) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1380) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1300) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640) ~[spring-beans-5.3.3.jar:5.3.3]
	... 33 common frames omitted
Caused by: java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Parsing error was found in mapping #{id, name}.  Check syntax #{property|(expression), var1=value1, var2=value2, ...} 
	at org.mybatis.spring.mapper.MapperFactoryBean.checkDaoConfig(MapperFactoryBean.java:83) ~[mybatis-spring-2.0.6.jar:2.0.6]
	at org.springframework.dao.support.DaoSupport.afterPropertiesSet(DaoSupport.java:44) ~[spring-tx-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1847) ~[spring-beans-5.3.3.jar:5.3.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1784) ~[spring-beans-5.3.3.jar:5.3.3]
	... 43 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Parsing error was found in mapping #{id, name}.  Check syntax #{property|(expression), var1=value1, var2=value2, ...} 
	at org.apache.ibatis.builder.SqlSourceBuilder$ParameterMappingTokenHandler.parseParameterMapping(SqlSourceBuilder.java:152) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.SqlSourceBuilder$ParameterMappingTokenHandler.buildParameterMapping(SqlSourceBuilder.java:92) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.SqlSourceBuilder$ParameterMappingTokenHandler.handleToken(SqlSourceBuilder.java:87) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.parsing.GenericTokenParser.parse(GenericTokenParser.java:77) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.SqlSourceBuilder.parse(SqlSourceBuilder.java:50) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.scripting.defaults.RawSqlSource.<init>(RawSqlSource.java:46) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.scripting.xmltags.XMLLanguageDriver.createSqlSource(XMLLanguageDriver.java:60) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.buildSqlSourceFromStrings(MapperAnnotationBuilder.java:635) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.buildSqlSource(MapperAnnotationBuilder.java:624) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.lambda$parseStatement$2(MapperAnnotationBuilder.java:301) ~[mybatis-3.5.6.jar:3.5.6]
	at java.base/java.util.Optional.ifPresent(Optional.java:176) ~[na:na]
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.parseStatement(MapperAnnotationBuilder.java:300) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.parse(MapperAnnotationBuilder.java:132) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.binding.MapperRegistry.addMapper(MapperRegistry.java:72) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.session.Configuration.addMapper(Configuration.java:841) ~[mybatis-3.5.6.jar:3.5.6]
	at org.mybatis.spring.mapper.MapperFactoryBean.checkDaoConfig(MapperFactoryBean.java:80) ~[mybatis-spring-2.0.6.jar:2.0.6]
	... 46 common frames omitted
Caused by: java.lang.StringIndexOutOfBoundsException: String index out of range: 9
	at java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48) ~[na:na]
	at java.base/java.lang.String.charAt(String.java:711) ~[na:na]
	at org.apache.ibatis.builder.ParameterExpression.trimmedStr(ParameterExpression.java:131) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.ParameterExpression.option(ParameterExpression.java:124) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.ParameterExpression.jdbcTypeOpt(ParameterExpression.java:99) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.ParameterExpression.property(ParameterExpression.java:70) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.ParameterExpression.parse(ParameterExpression.java:47) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.ParameterExpression.<init>(ParameterExpression.java:39) ~[mybatis-3.5.6.jar:3.5.6]
	at org.apache.ibatis.builder.SqlSourceBuilder$ParameterMappingTokenHandler.parseParameterMapping(SqlSourceBuilder.java:148) ~[mybatis-3.5.6.jar:3.5.6]
	... 61 common frames omitted

2021-02-09 10:45:13.909  INFO 7084 --- [main] top.yalexin.rblog.RblogServApplication   : Starting RblogServApplication using Java 14 on DESKTOP-E2AV1HM with PID 7084 (C:\Users\YaleXin\IdeaProjects\rblog\target\classes started by YaleXin in C:\Users\YaleXin\IdeaProjects\rblog)
2021-02-09 10:45:13.909  INFO 7084 --- [main] top.yalexin.rblog.RblogServApplication   : The following profiles are active: dev
2021-02-09 10:45:15.670  INFO 7084 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-09 10:45:15.686  INFO 7084 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-09 10:45:15.686  INFO 7084 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.41]
2021-02-09 10:45:15.781  INFO 7084 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring embedded WebApplicationContext
2021-02-09 10:45:15.781  INFO 7084 --- [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1785 ms
2021-02-09 10:45:16.733  INFO 7084 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-09 10:45:17.373  INFO 7084 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path '/api'
2021-02-09 10:45:17.451  INFO 7084 --- [main] top.yalexin.rblog.RblogServApplication   : Started RblogServApplication in 4.222 seconds (JVM running for 5.225)
2021-02-09 10:45:23.903  INFO 7084 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-09 10:45:23.904  INFO 7084 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-09 10:45:23.908  INFO 7084 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 2 ms
2021-02-09 10:45:23.960  INFO 7084 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 10:45:23.960  INFO 7084 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 10:45:24.006  INFO 7084 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-09 10:45:24.953  INFO 7084 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-09 10:45:25.125  INFO 7084 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}]}
2021-02-09 10:45:25.125  INFO 7084 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 10:45:58.676 ERROR 7084 --- [http-nio-8080-exec-3] o.a.c.c.C.[.[.[.[dispatcherServlet]      : Servlet.service() for servlet [dispatcherServlet] in context with path [/api] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause

java.lang.NullPointerException: null
	at top.yalexin.rblog.controller.admin.AdminBlogController.addBlog(AdminBlogController.java:33) ~[classes/:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:na]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:564) ~[na:na]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:197) ~[spring-web-5.3.3.jar:5.3.3]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:141) ~[spring-web-5.3.3.jar:5.3.3]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.3.3.jar:5.3.3]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:894) ~[spring-webmvc-5.3.3.jar:5.3.3]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808) ~[spring-webmvc-5.3.3.jar:5.3.3]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.3.3.jar:5.3.3]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1060) ~[spring-webmvc-5.3.3.jar:5.3.3]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:962) ~[spring-webmvc-5.3.3.jar:5.3.3]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.3.3.jar:5.3.3]
	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:920) ~[spring-webmvc-5.3.3.jar:5.3.3]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655) ~[tomcat-embed-core-9.0.41.jar:4.0.FR]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.3.3.jar:5.3.3]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733) ~[tomcat-embed-core-9.0.41.jar:4.0.FR]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.41.jar:9.0.41]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.3.3.jar:5.3.3]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.3.3.jar:5.3.3]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.3.3.jar:5.3.3]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.3.3.jar:5.3.3]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.3.3.jar:5.3.3]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.3.3.jar:5.3.3]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:888) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130) ~[na:na]
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630) ~[na:na]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at java.base/java.lang.Thread.run(Thread.java:832) ~[na:na]

2021-02-09 10:47:26.976  INFO 6328 --- [main] top.yalexin.rblog.RblogServApplication   : Starting RblogServApplication using Java 14 on DESKTOP-E2AV1HM with PID 6328 (C:\Users\YaleXin\IdeaProjects\rblog\target\classes started by YaleXin in C:\Users\YaleXin\IdeaProjects\rblog)
2021-02-09 10:47:26.976  INFO 6328 --- [main] top.yalexin.rblog.RblogServApplication   : The following profiles are active: dev
2021-02-09 10:47:28.800  INFO 6328 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-09 10:47:28.816  INFO 6328 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-09 10:47:28.816  INFO 6328 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.41]
2021-02-09 10:47:28.910  INFO 6328 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring embedded WebApplicationContext
2021-02-09 10:47:28.910  INFO 6328 --- [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1835 ms
2021-02-09 10:47:29.741  INFO 6328 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-09 10:47:30.288  INFO 6328 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path '/api'
2021-02-09 10:47:30.304  INFO 6328 --- [main] top.yalexin.rblog.RblogServApplication   : Started RblogServApplication in 4.056 seconds (JVM running for 5.1)
2021-02-09 10:47:34.232  INFO 6328 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-09 10:47:34.233  INFO 6328 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-09 10:47:34.235  INFO 6328 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
2021-02-09 10:47:34.425 ERROR 6328 --- [http-nio-8080-exec-1] o.a.c.c.C.[.[.[.[dispatcherServlet]      : Servlet.service() for servlet [dispatcherServlet] in context with path [/api] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause

java.lang.NullPointerException: null
	at top.yalexin.rblog.service.BlogServiceImpl.addBlog(BlogServiceImpl.java:65) ~[classes/:na]
	at top.yalexin.rblog.controller.admin.AdminBlogController.addBlog(AdminBlogController.java:35) ~[classes/:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:na]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:564) ~[na:na]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:197) ~[spring-web-5.3.3.jar:5.3.3]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:141) ~[spring-web-5.3.3.jar:5.3.3]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.3.3.jar:5.3.3]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:894) ~[spring-webmvc-5.3.3.jar:5.3.3]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808) ~[spring-webmvc-5.3.3.jar:5.3.3]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.3.3.jar:5.3.3]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1060) ~[spring-webmvc-5.3.3.jar:5.3.3]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:962) ~[spring-webmvc-5.3.3.jar:5.3.3]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.3.3.jar:5.3.3]
	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:920) ~[spring-webmvc-5.3.3.jar:5.3.3]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655) ~[tomcat-embed-core-9.0.41.jar:4.0.FR]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.3.3.jar:5.3.3]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733) ~[tomcat-embed-core-9.0.41.jar:4.0.FR]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.41.jar:9.0.41]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.3.3.jar:5.3.3]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.3.3.jar:5.3.3]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.3.3.jar:5.3.3]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.3.3.jar:5.3.3]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.3.3.jar:5.3.3]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.3.3.jar:5.3.3]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:888) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130) ~[na:na]
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630) ~[na:na]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-embed-core-9.0.41.jar:9.0.41]
	at java.base/java.lang.Thread.run(Thread.java:832) ~[na:na]

2021-02-09 10:49:07.826  INFO 6328 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 10:49:07.867  INFO 6328 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-09 10:49:07.902  INFO 6328 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 10:49:08.148  INFO 6328 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-09 10:49:08.212  INFO 6328 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 10:49:08.212  INFO 6328 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}]}
2021-02-09 10:54:20.144  INFO 11276 --- [main] top.yalexin.rblog.RblogServApplication   : Starting RblogServApplication using Java 14 on DESKTOP-E2AV1HM with PID 11276 (C:\Users\YaleXin\IdeaProjects\rblog\target\classes started by YaleXin in C:\Users\YaleXin\IdeaProjects\rblog)
2021-02-09 10:54:20.144  INFO 11276 --- [main] top.yalexin.rblog.RblogServApplication   : The following profiles are active: dev
2021-02-09 10:54:21.858  INFO 11276 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-09 10:54:21.858  INFO 11276 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-09 10:54:21.873  INFO 11276 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.41]
2021-02-09 10:54:21.967  INFO 11276 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring embedded WebApplicationContext
2021-02-09 10:54:21.967  INFO 11276 --- [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1730 ms
2021-02-09 10:54:22.725  INFO 11276 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-09 10:54:23.256  INFO 11276 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path '/api'
2021-02-09 10:54:23.272  INFO 11276 --- [main] top.yalexin.rblog.RblogServApplication   : Started RblogServApplication in 3.855 seconds (JVM running for 4.823)
2021-02-09 10:55:04.435  INFO 11276 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-09 10:55:04.436  INFO 11276 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-09 10:55:04.438  INFO 11276 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
2021-02-09 10:55:04.472  INFO 11276 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 10:55:04.472  INFO 11276 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 10:55:04.507  INFO 11276 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-09 10:55:04.822  INFO 11276 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-09 10:55:04.865  INFO 11276 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 10:55:04.865  INFO 11276 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}]}
2021-02-09 11:12:20.883  INFO 7340 --- [main] top.yalexin.rblog.RblogServApplication   : Starting RblogServApplication using Java 14 on DESKTOP-E2AV1HM with PID 7340 (C:\Users\YaleXin\IdeaProjects\rblog\target\classes started by YaleXin in C:\Users\YaleXin\IdeaProjects\rblog)
2021-02-09 11:12:20.889  INFO 7340 --- [main] top.yalexin.rblog.RblogServApplication   : The following profiles are active: dev
2021-02-09 11:12:23.146  INFO 7340 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-09 11:12:23.156  INFO 7340 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-09 11:12:23.157  INFO 7340 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.41]
2021-02-09 11:12:23.273  INFO 7340 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring embedded WebApplicationContext
2021-02-09 11:12:23.274  INFO 7340 --- [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2279 ms
2021-02-09 11:12:24.166  INFO 7340 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-09 11:12:24.774  INFO 7340 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path '/api'
2021-02-09 11:12:24.788  INFO 7340 --- [main] top.yalexin.rblog.RblogServApplication   : Started RblogServApplication in 4.679 seconds (JVM running for 5.977)
2021-02-09 11:13:16.061  INFO 7340 --- [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-09 11:13:16.062  INFO 7340 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-09 11:13:16.065  INFO 7340 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 2 ms
2021-02-09 11:13:16.097  INFO 7340 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 11:13:16.097  INFO 7340 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 11:13:16.142  INFO 7340 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-09 11:13:16.390  INFO 7340 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-09 11:13:16.437  INFO 7340 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}]}
2021-02-09 11:13:16.437  INFO 7340 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 11:16:29.193  INFO 6068 --- [main] top.yalexin.rblog.RblogServApplication   : Starting RblogServApplication using Java 14 on DESKTOP-E2AV1HM with PID 6068 (C:\Users\YaleXin\IdeaProjects\rblog\target\classes started by YaleXin in C:\Users\YaleXin\IdeaProjects\rblog)
2021-02-09 11:16:29.193  INFO 6068 --- [main] top.yalexin.rblog.RblogServApplication   : The following profiles are active: dev
2021-02-09 11:16:31.027  INFO 6068 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-09 11:16:31.027  INFO 6068 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-09 11:16:31.027  INFO 6068 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.41]
2021-02-09 11:16:31.137  INFO 6068 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring embedded WebApplicationContext
2021-02-09 11:16:31.137  INFO 6068 --- [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1875 ms
2021-02-09 11:16:31.933  INFO 6068 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-09 11:16:32.449  INFO 6068 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path '/api'
2021-02-09 11:16:32.464  INFO 6068 --- [main] top.yalexin.rblog.RblogServApplication   : Started RblogServApplication in 3.955 seconds (JVM running for 4.999)
2021-02-09 11:16:44.665  INFO 6068 --- [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-09 11:16:44.666  INFO 6068 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-09 11:16:44.668  INFO 6068 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
2021-02-09 11:16:44.706  INFO 6068 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 11:16:44.706  INFO 6068 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 11:16:44.746  INFO 6068 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-09 11:16:44.993  INFO 6068 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-09 11:16:45.072  INFO 6068 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 11:16:45.072  INFO 6068 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}]}
2021-02-09 11:22:34.674  INFO 10216 --- [main] top.yalexin.rblog.RblogServApplication   : Starting RblogServApplication using Java 14 on DESKTOP-E2AV1HM with PID 10216 (C:\Users\YaleXin\IdeaProjects\rblog\target\classes started by YaleXin in C:\Users\YaleXin\IdeaProjects\rblog)
2021-02-09 11:22:34.679  INFO 10216 --- [main] top.yalexin.rblog.RblogServApplication   : The following profiles are active: dev
2021-02-09 11:22:36.563  INFO 10216 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-09 11:22:36.579  INFO 10216 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-09 11:22:36.579  INFO 10216 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.41]
2021-02-09 11:22:36.695  INFO 10216 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring embedded WebApplicationContext
2021-02-09 11:22:36.695  INFO 10216 --- [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1923 ms
2021-02-09 11:22:37.495  INFO 10216 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-09 11:22:38.044  INFO 10216 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path '/api'
2021-02-09 11:22:38.059  INFO 10216 --- [main] top.yalexin.rblog.RblogServApplication   : Started RblogServApplication in 4.155 seconds (JVM running for 5.331)
2021-02-09 11:23:26.457  INFO 10216 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-09 11:23:26.458  INFO 10216 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-09 11:23:26.461  INFO 10216 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 2 ms
2021-02-09 11:23:26.492  INFO 10216 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 11:23:26.492  INFO 10216 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 11:23:26.522  INFO 10216 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-09 11:23:26.787  INFO 10216 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-09 11:23:26.839  INFO 10216 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 11:23:26.839  INFO 10216 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}]}
2021-02-09 11:28:04.981  INFO 10216 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 11:28:04.981  INFO 10216 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}]}
2021-02-09 11:28:05.115  INFO 10216 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 11:28:05.119  INFO 10216 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 11:34:33.375  INFO 12016 --- [main] top.yalexin.rblog.RblogServApplication   : Starting RblogServApplication using Java 14 on DESKTOP-E2AV1HM with PID 12016 (C:\Users\YaleXin\IdeaProjects\rblog\target\classes started by YaleXin in C:\Users\YaleXin\IdeaProjects\rblog)
2021-02-09 11:34:33.377  INFO 12016 --- [main] top.yalexin.rblog.RblogServApplication   : The following profiles are active: dev
2021-02-09 11:34:35.339  INFO 12016 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-09 11:34:35.339  INFO 12016 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-09 11:34:35.339  INFO 12016 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.41]
2021-02-09 11:34:35.439  INFO 12016 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring embedded WebApplicationContext
2021-02-09 11:34:35.439  INFO 12016 --- [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1972 ms
2021-02-09 11:34:36.310  INFO 12016 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-09 11:34:36.887  INFO 12016 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path '/api'
2021-02-09 11:34:36.903  INFO 12016 --- [main] top.yalexin.rblog.RblogServApplication   : Started RblogServApplication in 4.468 seconds (JVM running for 5.697)
2021-02-09 11:36:13.191  INFO 12016 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-09 11:36:13.192  INFO 12016 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-09 11:36:13.194  INFO 12016 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 2 ms
2021-02-09 11:36:13.228  INFO 12016 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 11:36:13.228  INFO 12016 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 11:36:13.261  INFO 12016 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-09 11:36:13.564  INFO 12016 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-09 11:36:13.607  INFO 12016 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 11:36:13.607  INFO 12016 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}]}
2021-02-09 11:41:23.632  INFO 13488 --- [main] top.yalexin.rblog.RblogServApplication   : Starting RblogServApplication using Java 14 on DESKTOP-E2AV1HM with PID 13488 (C:\Users\YaleXin\IdeaProjects\rblog\target\classes started by YaleXin in C:\Users\YaleXin\IdeaProjects\rblog)
2021-02-09 11:41:23.632  INFO 13488 --- [main] top.yalexin.rblog.RblogServApplication   : The following profiles are active: dev
2021-02-09 11:41:25.641  INFO 13488 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-09 11:41:25.657  INFO 13488 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-09 11:41:25.657  INFO 13488 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.41]
2021-02-09 11:41:25.797  INFO 13488 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring embedded WebApplicationContext
2021-02-09 11:41:25.797  INFO 13488 --- [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2084 ms
2021-02-09 11:41:26.718  INFO 13488 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-09 11:41:27.311  INFO 13488 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path '/api'
2021-02-09 11:41:27.327  INFO 13488 --- [main] top.yalexin.rblog.RblogServApplication   : Started RblogServApplication in 4.516 seconds (JVM running for 5.541)
2021-02-09 12:02:38.042  INFO 13488 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-09 12:02:38.043  INFO 13488 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-09 12:02:38.045  INFO 13488 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 2 ms
2021-02-09 12:02:38.072  INFO 13488 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 12:02:38.072  INFO 13488 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 12:02:38.101  INFO 13488 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-09 12:02:38.333  INFO 13488 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-09 12:02:38.378  INFO 13488 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 12:02:38.379  INFO 13488 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}]}
2021-02-09 12:09:02.434  INFO 1724 --- [main] top.yalexin.rblog.RblogServApplication   : Starting RblogServApplication using Java 14 on DESKTOP-E2AV1HM with PID 1724 (C:\Users\YaleXin\IdeaProjects\rblog\target\classes started by YaleXin in C:\Users\YaleXin\IdeaProjects\rblog)
2021-02-09 12:09:02.434  INFO 1724 --- [main] top.yalexin.rblog.RblogServApplication   : The following profiles are active: dev
2021-02-09 12:09:04.230  INFO 1724 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-09 12:09:04.246  INFO 1724 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-09 12:09:04.246  INFO 1724 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.41]
2021-02-09 12:09:04.371  INFO 1724 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring embedded WebApplicationContext
2021-02-09 12:09:04.371  INFO 1724 --- [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1826 ms
2021-02-09 12:09:05.207  INFO 1724 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-09 12:09:05.769  INFO 1724 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path '/api'
2021-02-09 12:09:05.785  INFO 1724 --- [main] top.yalexin.rblog.RblogServApplication   : Started RblogServApplication in 4.103 seconds (JVM running for 5.081)
2021-02-09 12:09:41.773  INFO 1724 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-09 12:09:41.774  INFO 1724 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-09 12:09:41.776  INFO 1724 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
2021-02-09 12:09:41.812  INFO 1724 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 12:09:41.812  INFO 1724 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 12:09:41.843  INFO 1724 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-09 12:09:42.140  INFO 1724 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-09 12:09:42.185  INFO 1724 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}]}
2021-02-09 12:09:42.202  INFO 1724 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 12:11:09.745  INFO 7176 --- [main] top.yalexin.rblog.RblogServApplication   : Starting RblogServApplication using Java 14 on DESKTOP-E2AV1HM with PID 7176 (C:\Users\YaleXin\IdeaProjects\rblog\target\classes started by YaleXin in C:\Users\YaleXin\IdeaProjects\rblog)
2021-02-09 12:11:09.745  INFO 7176 --- [main] top.yalexin.rblog.RblogServApplication   : The following profiles are active: dev
2021-02-09 12:11:11.647  INFO 7176 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-09 12:11:11.662  INFO 7176 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-09 12:11:11.662  INFO 7176 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.41]
2021-02-09 12:11:11.756  INFO 7176 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring embedded WebApplicationContext
2021-02-09 12:11:11.756  INFO 7176 --- [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1931 ms
2021-02-09 12:11:12.569  INFO 7176 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-09 12:11:13.162  INFO 7176 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path '/api'
2021-02-09 12:11:13.178  INFO 7176 --- [main] top.yalexin.rblog.RblogServApplication   : Started RblogServApplication in 4.157 seconds (JVM running for 5.213)
2021-02-09 12:11:59.351  INFO 7176 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-09 12:11:59.352  INFO 7176 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-09 12:11:59.355  INFO 7176 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 2 ms
2021-02-09 12:11:59.385  INFO 7176 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 12:11:59.385  INFO 7176 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 12:11:59.416  INFO 7176 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-09 12:11:59.679  INFO 7176 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-09 12:11:59.746  INFO 7176 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 12:11:59.746  INFO 7176 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}]}
2021-02-09 12:14:07.791  INFO 7176 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 12:14:07.791  INFO 7176 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 12:14:07.791  INFO 7176 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 12:14:07.791  INFO 7176 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}]}
2021-02-09 12:15:20.944  INFO 7176 --- [http-nio-8080-exec-7] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 12:15:20.953  INFO 7176 --- [http-nio-8080-exec-7] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}]}
2021-02-09 12:15:21.107  INFO 7176 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 12:15:21.107  INFO 7176 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 12:15:26.035  INFO 7176 --- [http-nio-8080-exec-9] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 12:15:26.043  INFO 7176 --- [http-nio-8080-exec-9] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}]}
2021-02-09 12:15:26.054  INFO 7176 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 12:15:26.058  INFO 7176 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 12:18:12.709  INFO 9020 --- [main] top.yalexin.rblog.RblogServApplication   : Starting RblogServApplication using Java 14 on DESKTOP-E2AV1HM with PID 9020 (C:\Users\YaleXin\IdeaProjects\rblog\target\classes started by YaleXin in C:\Users\YaleXin\IdeaProjects\rblog)
2021-02-09 12:18:12.719  INFO 9020 --- [main] top.yalexin.rblog.RblogServApplication   : The following profiles are active: dev
2021-02-09 12:18:14.906  INFO 9020 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-09 12:18:14.922  INFO 9020 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-09 12:18:14.922  INFO 9020 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.41]
2021-02-09 12:18:15.038  INFO 9020 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring embedded WebApplicationContext
2021-02-09 12:18:15.038  INFO 9020 --- [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2210 ms
2021-02-09 12:18:16.040  INFO 9020 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-09 12:18:16.657  INFO 9020 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path '/api'
2021-02-09 12:18:16.679  INFO 9020 --- [main] top.yalexin.rblog.RblogServApplication   : Started RblogServApplication in 4.97 seconds (JVM running for 6.332)
2021-02-09 12:19:14.950  INFO 9020 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-09 12:19:14.951  INFO 9020 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-09 12:19:14.954  INFO 9020 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 2 ms
2021-02-09 12:19:15.515  INFO 9020 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 12:19:15.515  INFO 9020 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 12:19:16.173  INFO 9020 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-09 12:19:20.943  INFO 9020 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-09 12:19:21.792  INFO 9020 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 12:19:21.792  INFO 9020 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}]}
2021-02-09 12:20:42.056  INFO 9020 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 12:20:42.091  INFO 9020 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 12:20:42.097  INFO 9020 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 12:20:42.098  INFO 9020 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}]}
2021-02-09 12:23:10.729  INFO 5352 --- [main] top.yalexin.rblog.RblogServApplication   : Starting RblogServApplication using Java 14 on DESKTOP-E2AV1HM with PID 5352 (C:\Users\YaleXin\IdeaProjects\rblog\target\classes started by YaleXin in C:\Users\YaleXin\IdeaProjects\rblog)
2021-02-09 12:23:10.729  INFO 5352 --- [main] top.yalexin.rblog.RblogServApplication   : The following profiles are active: dev
2021-02-09 12:23:13.707  INFO 5352 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-09 12:23:13.723  INFO 5352 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-09 12:23:13.723  INFO 5352 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.41]
2021-02-09 12:23:13.942  INFO 5352 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring embedded WebApplicationContext
2021-02-09 12:23:13.942  INFO 5352 --- [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 3095 ms
2021-02-09 12:23:15.025  INFO 5352 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-09 12:23:15.681  INFO 5352 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path '/api'
2021-02-09 12:23:15.713  INFO 5352 --- [main] top.yalexin.rblog.RblogServApplication   : Started RblogServApplication in 5.956 seconds (JVM running for 13.317)
2021-02-09 12:23:22.245  INFO 5352 --- [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-09 12:23:22.245  INFO 5352 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-09 12:23:22.248  INFO 5352 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 2 ms
2021-02-09 12:23:22.300  INFO 5352 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 12:23:22.300  INFO 5352 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 12:23:22.358  INFO 5352 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-09 12:23:22.892  INFO 5352 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-09 12:23:22.952  INFO 5352 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 12:23:22.952  INFO 5352 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}]}
2021-02-09 12:27:57.943  INFO 9212 --- [main] top.yalexin.rblog.RblogServApplication   : Starting RblogServApplication using Java 14 on DESKTOP-E2AV1HM with PID 9212 (C:\Users\YaleXin\IdeaProjects\rblog\target\classes started by YaleXin in C:\Users\YaleXin\IdeaProjects\rblog)
2021-02-09 12:27:57.943  INFO 9212 --- [main] top.yalexin.rblog.RblogServApplication   : The following profiles are active: dev
2021-02-09 12:27:59.958  INFO 9212 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-09 12:27:59.974  INFO 9212 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-09 12:27:59.974  INFO 9212 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.41]
2021-02-09 12:28:00.083  INFO 9212 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring embedded WebApplicationContext
2021-02-09 12:28:00.083  INFO 9212 --- [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2068 ms
2021-02-09 12:28:01.030  INFO 9212 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-09 12:28:01.671  INFO 9212 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path '/api'
2021-02-09 12:28:01.686  INFO 9212 --- [main] top.yalexin.rblog.RblogServApplication   : Started RblogServApplication in 4.516 seconds (JVM running for 5.415)
2021-02-09 12:28:11.928  INFO 9212 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-09 12:28:11.929  INFO 9212 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-09 12:28:11.932  INFO 9212 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 2 ms
2021-02-09 12:28:11.974  INFO 9212 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 12:28:11.974  INFO 9212 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 12:28:12.017  INFO 9212 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-09 12:28:12.435  INFO 9212 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-09 12:28:12.501  INFO 9212 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 12:28:12.501  INFO 9212 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}]}
2021-02-09 12:36:39.263  INFO 1488 --- [main] top.yalexin.rblog.RblogServApplication   : Starting RblogServApplication using Java 14 on DESKTOP-E2AV1HM with PID 1488 (C:\Users\YaleXin\IdeaProjects\rblog\target\classes started by YaleXin in C:\Users\YaleXin\IdeaProjects\rblog)
2021-02-09 12:36:39.290  INFO 1488 --- [main] top.yalexin.rblog.RblogServApplication   : The following profiles are active: dev
2021-02-09 12:36:42.143  INFO 1488 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-09 12:36:42.175  INFO 1488 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-09 12:36:42.175  INFO 1488 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.41]
2021-02-09 12:36:42.331  INFO 1488 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring embedded WebApplicationContext
2021-02-09 12:36:42.331  INFO 1488 --- [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2713 ms
2021-02-09 12:36:43.712  INFO 1488 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-09 12:36:44.462  INFO 1488 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path '/api'
2021-02-09 12:36:44.524  INFO 1488 --- [main] top.yalexin.rblog.RblogServApplication   : Started RblogServApplication in 5.987 seconds (JVM running for 7.888)
2021-02-09 12:37:02.813  INFO 9676 --- [main] top.yalexin.rblog.RblogServApplication   : Starting RblogServApplication using Java 14 on DESKTOP-E2AV1HM with PID 9676 (C:\Users\YaleXin\IdeaProjects\rblog\target\classes started by YaleXin in C:\Users\YaleXin\IdeaProjects\rblog)
2021-02-09 12:37:02.827  INFO 9676 --- [main] top.yalexin.rblog.RblogServApplication   : The following profiles are active: dev
2021-02-09 12:37:04.987  INFO 9676 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-09 12:37:05.003  INFO 9676 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-09 12:37:05.003  INFO 9676 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.41]
2021-02-09 12:37:05.128  INFO 9676 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring embedded WebApplicationContext
2021-02-09 12:37:05.128  INFO 9676 --- [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2211 ms
2021-02-09 12:37:06.537  INFO 9676 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-09 12:37:07.396  INFO 9676 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path '/api'
2021-02-09 12:37:07.458  INFO 9676 --- [main] top.yalexin.rblog.RblogServApplication   : Started RblogServApplication in 5.292 seconds (JVM running for 12.749)
2021-02-09 12:37:13.570  INFO 9676 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-09 12:37:13.571  INFO 9676 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-09 12:37:13.574  INFO 9676 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 2 ms
2021-02-09 12:37:13.706  INFO 9676 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 12:37:13.706  INFO 9676 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 12:37:13.860  INFO 9676 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-09 12:37:15.171  INFO 9676 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-09 12:37:15.926  INFO 9676 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 12:37:15.926  INFO 9676 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}]}
2021-02-09 12:38:31.451  WARN 9676 --- [HikariPool-1 housekeeper] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1m16s174ms303µs500ns).
2021-02-09 12:38:31.995  INFO 9676 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2021-02-09 12:38:31.995  INFO 9676 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2021-02-09 12:38:32.026  INFO 9676 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2021-02-09 12:41:23.790  INFO 4492 --- [main] top.yalexin.rblog.RblogServApplication   : Starting RblogServApplication using Java 14 on DESKTOP-E2AV1HM with PID 4492 (C:\Users\YaleXin\IdeaProjects\rblog\target\classes started by YaleXin in C:\Users\YaleXin\IdeaProjects\rblog)
2021-02-09 12:41:23.790  INFO 4492 --- [main] top.yalexin.rblog.RblogServApplication   : The following profiles are active: dev
2021-02-09 12:41:26.883  INFO 4492 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-09 12:41:26.893  INFO 4492 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-09 12:41:26.893  INFO 4492 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.41]
2021-02-09 12:41:27.015  INFO 4492 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring embedded WebApplicationContext
2021-02-09 12:41:27.015  INFO 4492 --- [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 3165 ms
2021-02-09 12:41:27.877  INFO 4492 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-09 12:41:28.457  INFO 4492 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path '/api'
2021-02-09 12:41:28.463  INFO 4492 --- [main] top.yalexin.rblog.RblogServApplication   : Started RblogServApplication in 5.152 seconds (JVM running for 7.129)
2021-02-09 12:41:55.473  INFO 4492 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-09 12:41:55.474  INFO 4492 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-09 12:41:55.477  INFO 4492 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 2 ms
2021-02-09 12:41:55.529  INFO 4492 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 12:41:55.529  INFO 4492 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 12:41:55.567  INFO 4492 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-09 12:41:55.872  INFO 4492 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-09 12:41:55.936  INFO 4492 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}]}
2021-02-09 12:41:55.936  INFO 4492 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 15:13:01.154  INFO 14592 --- [main] top.yalexin.rblog.RblogServApplication   : Starting RblogServApplication using Java 14 on DESKTOP-E2AV1HM with PID 14592 (C:\Users\YaleXin\IdeaProjects\rblog\target\classes started by YaleXin in C:\Users\YaleXin\IdeaProjects\rblog)
2021-02-09 15:13:01.186  INFO 14592 --- [main] top.yalexin.rblog.RblogServApplication   : The following profiles are active: dev
2021-02-09 15:13:04.622  INFO 14592 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-09 15:13:04.637  INFO 14592 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-09 15:13:04.638  INFO 14592 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.41]
2021-02-09 15:13:04.812  INFO 14592 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring embedded WebApplicationContext
2021-02-09 15:13:04.812  INFO 14592 --- [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 3433 ms
2021-02-09 15:13:06.195  INFO 14592 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-09 15:13:06.773  INFO 14592 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path '/api'
2021-02-09 15:13:06.804  INFO 14592 --- [main] top.yalexin.rblog.RblogServApplication   : Started RblogServApplication in 8.029 seconds (JVM running for 15.033)
2021-02-09 15:14:06.388  INFO 14592 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-09 15:14:06.389  INFO 14592 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-09 15:14:06.391  INFO 14592 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 2 ms
2021-02-09 15:14:06.437  INFO 14592 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 15:14:06.437  INFO 14592 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 15:14:06.443  INFO 14592 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-09 15:14:07.101  INFO 14592 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-09 15:14:07.412  INFO 14592 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 15:14:07.412  INFO 14592 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}]}
2021-02-09 15:18:26.718  INFO 14592 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 15:18:26.719  INFO 14592 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 15:18:26.728  INFO 14592 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}]}
2021-02-09 15:18:26.741  INFO 14592 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 15:23:46.194  INFO 2056 --- [main] top.yalexin.rblog.RblogServApplication   : Starting RblogServApplication using Java 14 on DESKTOP-E2AV1HM with PID 2056 (C:\Users\YaleXin\IdeaProjects\rblog\target\classes started by YaleXin in C:\Users\YaleXin\IdeaProjects\rblog)
2021-02-09 15:23:46.203  INFO 2056 --- [main] top.yalexin.rblog.RblogServApplication   : The following profiles are active: dev
2021-02-09 15:23:49.304  INFO 2056 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-09 15:23:49.333  INFO 2056 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-09 15:23:49.334  INFO 2056 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.41]
2021-02-09 15:23:49.618  INFO 2056 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring embedded WebApplicationContext
2021-02-09 15:23:49.619  INFO 2056 --- [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 3279 ms
2021-02-09 15:23:51.030  INFO 2056 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-09 15:23:51.778  INFO 2056 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path '/api'
2021-02-09 15:23:51.803  INFO 2056 --- [main] top.yalexin.rblog.RblogServApplication   : Started RblogServApplication in 7.403 seconds (JVM running for 11.741)
2021-02-09 15:23:57.994  INFO 2056 --- [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-09 15:23:57.995  INFO 2056 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-09 15:23:57.997  INFO 2056 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 2 ms
2021-02-09 15:23:58.047  INFO 2056 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 15:23:58.047  INFO 2056 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 15:23:58.058  INFO 2056 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-09 15:23:58.527  INFO 2056 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-09 15:23:58.625  INFO 2056 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 15:23:58.643  INFO 2056 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}]}
2021-02-09 15:24:03.184  INFO 2056 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 15:24:03.184  INFO 2056 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 15:24:03.193  INFO 2056 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}]}
2021-02-09 15:24:03.204  INFO 2056 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 15:24:28.262  INFO 2056 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 15:24:28.262  INFO 2056 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 15:24:28.270  INFO 2056 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 15:24:28.272  INFO 2056 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}]}
2021-02-09 15:25:00.269  INFO 2056 --- [http-nio-8080-exec-7] t.y.r.c.admin.AdminBlogController        : 前端blog-----> Blog{id=null, name='互动回复的', content='飞虎俄方', description='分分分', views=null, published=false, tagIds='null', createTime=Tue Feb 09 14:24:49 CST 2021, updateTime=null, category=category{id=13, name='算法'}, comments=[], tags=[Tag{id=15, name='HTML基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=21, name='排序'}]}
2021-02-09 15:25:00.277  INFO 2056 --- [http-nio-8080-exec-7] t.y.r.c.admin.AdminBlogController        : after saveBlog-----> null
2021-02-09 15:27:55.856  INFO 1940 --- [main] top.yalexin.rblog.RblogServApplication   : Starting RblogServApplication using Java 14 on DESKTOP-E2AV1HM with PID 1940 (C:\Users\YaleXin\IdeaProjects\rblog\target\classes started by YaleXin in C:\Users\YaleXin\IdeaProjects\rblog)
2021-02-09 15:27:55.861  INFO 1940 --- [main] top.yalexin.rblog.RblogServApplication   : The following profiles are active: dev
2021-02-09 15:27:58.320  INFO 1940 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-09 15:27:58.336  INFO 1940 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-09 15:27:58.336  INFO 1940 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.41]
2021-02-09 15:27:58.443  INFO 1940 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring embedded WebApplicationContext
2021-02-09 15:27:58.443  INFO 1940 --- [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2325 ms
2021-02-09 15:27:59.461  INFO 1940 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-09 15:28:00.024  INFO 1940 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path '/api'
2021-02-09 15:28:00.039  INFO 1940 --- [main] top.yalexin.rblog.RblogServApplication   : Started RblogServApplication in 5.493 seconds (JVM running for 6.732)
2021-02-09 15:28:13.939  INFO 1940 --- [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-09 15:28:13.940  INFO 1940 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-09 15:28:13.942  INFO 1940 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
2021-02-09 15:28:13.994  INFO 1940 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 15:28:13.994  INFO 1940 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 15:28:14.005  INFO 1940 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-09 15:28:14.307  INFO 1940 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-09 15:28:14.434  INFO 1940 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 15:28:14.434  INFO 1940 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}]}
2021-02-09 15:28:38.335  INFO 1940 --- [http-nio-8080-exec-3] t.y.r.c.admin.AdminBlogController        : 前端blog-----> Blog{id=null, name='6966969', content='大很舒服哈哈佛尔解耦', description='的萨哈苏萨很多都是', views=null, published=false, tagIds='null', createTime=Tue Jan 26 13:28:27 CST 2021, updateTime=null, category=category{id=11, name='工具'}, comments=[], tags=[Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}]}
2021-02-09 15:28:38.350  INFO 1940 --- [http-nio-8080-exec-3] t.y.r.c.admin.AdminBlogController        : after saveBlog-----> null
2021-02-09 15:29:20.192  INFO 8248 --- [main] top.yalexin.rblog.RblogServApplication   : Starting RblogServApplication using Java 14 on DESKTOP-E2AV1HM with PID 8248 (C:\Users\YaleXin\IdeaProjects\rblog\target\classes started by YaleXin in C:\Users\YaleXin\IdeaProjects\rblog)
2021-02-09 15:29:20.192  INFO 8248 --- [main] top.yalexin.rblog.RblogServApplication   : The following profiles are active: dev
2021-02-09 15:29:22.379  INFO 8248 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-09 15:29:22.395  INFO 8248 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-09 15:29:22.395  INFO 8248 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.41]
2021-02-09 15:29:22.504  INFO 8248 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring embedded WebApplicationContext
2021-02-09 15:29:22.520  INFO 8248 --- [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2230 ms
2021-02-09 15:29:23.641  INFO 8248 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-09 15:29:24.328  INFO 8248 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path '/api'
2021-02-09 15:29:24.344  INFO 8248 --- [main] top.yalexin.rblog.RblogServApplication   : Started RblogServApplication in 4.997 seconds (JVM running for 6.203)
2021-02-09 15:30:05.218  INFO 8248 --- [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-09 15:30:05.219  INFO 8248 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-09 15:30:05.221  INFO 8248 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 2 ms
2021-02-09 15:30:05.260  INFO 8248 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 15:30:05.260  INFO 8248 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 15:30:05.270  INFO 8248 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-09 15:30:05.581  INFO 8248 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-09 15:30:05.683  INFO 8248 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}]}
2021-02-09 15:30:05.683  INFO 8248 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 15:30:19.447  INFO 13076 --- [main] top.yalexin.rblog.RblogServApplication   : Starting RblogServApplication using Java 14 on DESKTOP-E2AV1HM with PID 13076 (C:\Users\YaleXin\IdeaProjects\rblog\target\classes started by YaleXin in C:\Users\YaleXin\IdeaProjects\rblog)
2021-02-09 15:30:19.462  INFO 13076 --- [main] top.yalexin.rblog.RblogServApplication   : The following profiles are active: dev
2021-02-09 15:30:21.423  INFO 13076 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-09 15:30:21.438  INFO 13076 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-09 15:30:21.438  INFO 13076 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.41]
2021-02-09 15:30:21.563  INFO 13076 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring embedded WebApplicationContext
2021-02-09 15:30:21.563  INFO 13076 --- [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2006 ms
2021-02-09 15:30:22.602  INFO 13076 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-09 15:30:23.225  INFO 13076 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path '/api'
2021-02-09 15:30:23.288  INFO 13076 --- [main] top.yalexin.rblog.RblogServApplication   : Started RblogServApplication in 4.542 seconds (JVM running for 8.102)
2021-02-09 15:30:36.470  INFO 13076 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-09 15:30:36.471  INFO 13076 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-09 15:30:36.474  INFO 13076 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 2 ms
2021-02-09 15:30:36.532  INFO 13076 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 15:30:36.536  INFO 13076 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 15:30:36.547  INFO 13076 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-09 15:30:36.931  INFO 13076 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-09 15:30:37.067  INFO 13076 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 15:30:37.067  INFO 13076 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}]}
2021-02-09 15:30:58.038  INFO 13076 --- [http-nio-8080-exec-3] t.y.r.c.admin.AdminBlogController        : 前端blog-----> Blog{id=null, name='534534053403', content='纷纷
分', description='钱钱钱钱钱', views=null, published=false, tagIds='null', createTime=Tue Feb 02 13:30:48 CST 2021, updateTime=null, category=category{id=7, name='Vue初级'}, comments=[], tags=[Tag{id=18, name='Vue'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}]}
2021-02-09 15:30:58.058  INFO 13076 --- [http-nio-8080-exec-3] t.y.r.c.admin.AdminBlogController        : after saveBlog-----> null
2021-02-09 15:31:31.068  INFO 13076 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2021-02-09 15:31:31.071  INFO 13076 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2021-02-09 15:31:31.142  INFO 13076 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2021-02-09 15:31:42.855  INFO 11696 --- [main] top.yalexin.rblog.RblogServApplication   : Starting RblogServApplication using Java 14 on DESKTOP-E2AV1HM with PID 11696 (C:\Users\YaleXin\IdeaProjects\rblog\target\classes started by YaleXin in C:\Users\YaleXin\IdeaProjects\rblog)
2021-02-09 15:31:42.861  INFO 11696 --- [main] top.yalexin.rblog.RblogServApplication   : The following profiles are active: dev
2021-02-09 15:31:45.120  INFO 11696 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-09 15:31:45.136  INFO 11696 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-09 15:31:45.136  INFO 11696 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.41]
2021-02-09 15:31:45.230  INFO 11696 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring embedded WebApplicationContext
2021-02-09 15:31:45.230  INFO 11696 --- [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2257 ms
2021-02-09 15:31:46.313  INFO 11696 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-09 15:31:47.015  INFO 11696 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path '/api'
2021-02-09 15:31:47.033  INFO 11696 --- [main] top.yalexin.rblog.RblogServApplication   : Started RblogServApplication in 5.145 seconds (JVM running for 7.138)
2021-02-09 15:31:51.610  INFO 11696 --- [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-09 15:31:51.613  INFO 11696 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-09 15:31:51.616  INFO 11696 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 2 ms
2021-02-09 15:31:51.660  INFO 11696 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 15:31:51.661  INFO 11696 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 15:31:51.673  INFO 11696 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-09 15:31:52.028  INFO 11696 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-09 15:31:52.162  INFO 11696 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 15:31:52.162  INFO 11696 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}]}
2021-02-09 15:32:11.030  INFO 11696 --- [http-nio-8080-exec-3] t.y.r.c.admin.AdminBlogController        : 前端blog-----> Blog{id=null, name='459340', content='发hi的
纷纷
发', description='撒旦撒', views=null, published=false, tagIds='null', createTime=Tue Feb 02 13:32:01 CST 2021, updateTime=null, category=category{id=6, name='Linux相关'}, comments=[], tags=[Tag{id=6, name='脚本'}, Tag{id=22, name='分治'}]}
2021-02-09 15:33:15.038  WARN 11696 --- [HikariPool-1 housekeeper] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1m22s909ms303µs900ns).
2021-02-09 15:34:20.286  WARN 11696 --- [HikariPool-1 housekeeper] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1m5s259ms784µs300ns).
2021-02-09 15:34:20.286  INFO 11696 --- [http-nio-8080-exec-3] t.y.r.c.admin.AdminBlogController        : after saveBlog-----> null
2021-02-09 15:34:20.471  INFO 11696 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2021-02-09 15:34:20.471  INFO 11696 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2021-02-09 15:34:20.486  INFO 11696 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2021-02-09 15:34:46.960  INFO 9212 --- [main] top.yalexin.rblog.RblogServApplication   : Starting RblogServApplication using Java 14 on DESKTOP-E2AV1HM with PID 9212 (C:\Users\YaleXin\IdeaProjects\rblog\target\classes started by YaleXin in C:\Users\YaleXin\IdeaProjects\rblog)
2021-02-09 15:34:46.964  INFO 9212 --- [main] top.yalexin.rblog.RblogServApplication   : The following profiles are active: dev
2021-02-09 15:34:48.764  INFO 9212 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-09 15:34:48.780  INFO 9212 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-09 15:34:48.780  INFO 9212 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.41]
2021-02-09 15:34:48.905  INFO 9212 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring embedded WebApplicationContext
2021-02-09 15:34:48.905  INFO 9212 --- [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1865 ms
2021-02-09 15:34:49.864  INFO 9212 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-09 15:34:50.461  INFO 9212 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path '/api'
2021-02-09 15:34:50.475  INFO 9212 --- [main] top.yalexin.rblog.RblogServApplication   : Started RblogServApplication in 4.232 seconds (JVM running for 5.293)
2021-02-09 15:35:10.840  INFO 9212 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-09 15:35:10.841  INFO 9212 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-09 15:35:10.843  INFO 9212 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
2021-02-09 15:35:10.882  INFO 9212 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 15:35:10.882  INFO 9212 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 15:35:10.897  INFO 9212 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-09 15:35:11.238  INFO 9212 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-09 15:35:11.379  INFO 9212 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 15:35:11.379  INFO 9212 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}]}
2021-02-09 15:35:31.255  INFO 9212 --- [http-nio-8080-exec-3] t.y.r.c.admin.AdminBlogController        : 前端blog-----> Blog{id=null, name='恶趣味我', content='得得得得', description='搜索', views=null, published=false, tagIds='null', createTime=Tue Feb 02 14:35:22 CST 2021, updateTime=null, category=category{id=6, name='Linux相关'}, comments=[], tags=[Tag{id=13, name='学习'}, Tag{id=15, name='HTML基础'}]}
2021-02-09 15:35:31.443  INFO 9212 --- [http-nio-8080-exec-3] t.y.r.c.admin.AdminBlogController        : after saveBlog-----> Blog{id=69, name='恶趣味我', content='得得得得', description='搜索', views=null, published=false, tagIds='null', createTime=Tue Feb 02 14:35:22 CST 2021, updateTime=Tue Feb 09 15:35:31 CST 2021, category=category{id=6, name='Linux相关'}, comments=[], tags=[Tag{id=13, name='学习'}, Tag{id=15, name='HTML基础'}]}
2021-02-09 15:38:14.865  INFO 9212 --- [http-nio-8080-exec-4] t.y.r.c.admin.AdminBlogController        : 前端blog-----> Blog{id=null, name='1111恶趣味我的撒旦', content='得得得得大大大大大大', description='搜索', views=null, published=false, tagIds='null', createTime=Tue Jan 19 14:35:22 CST 2021, updateTime=null, category=category{id=-1, name='新的分类'}, comments=[], tags=[Tag{id=13, name='学习'}, Tag{id=15, name='HTML基础'}, Tag{id=-1, name='新的标签'}, Tag{id=-1, name='新的啊啊啊啊啊'}]}
2021-02-09 15:41:41.752  INFO 9976 --- [main] top.yalexin.rblog.RblogServApplication   : Starting RblogServApplication using Java 14 on DESKTOP-E2AV1HM with PID 9976 (C:\Users\YaleXin\IdeaProjects\rblog\target\classes started by YaleXin in C:\Users\YaleXin\IdeaProjects\rblog)
2021-02-09 15:41:41.757  INFO 9976 --- [main] top.yalexin.rblog.RblogServApplication   : The following profiles are active: dev
2021-02-09 15:41:44.507  INFO 9976 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-09 15:41:44.522  INFO 9976 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-09 15:41:44.522  INFO 9976 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.41]
2021-02-09 15:41:44.638  INFO 9976 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring embedded WebApplicationContext
2021-02-09 15:41:44.638  INFO 9976 --- [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2779 ms
2021-02-09 15:41:45.497  INFO 9976 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-09 15:41:46.129  INFO 9976 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path '/api'
2021-02-09 15:41:46.151  INFO 9976 --- [main] top.yalexin.rblog.RblogServApplication   : Started RblogServApplication in 6.28 seconds (JVM running for 7.673)
2021-02-09 15:41:54.390  INFO 9976 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-09 15:41:54.391  INFO 9976 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-09 15:41:54.393  INFO 9976 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 2 ms
2021-02-09 15:41:54.418  INFO 9976 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 15:41:54.418  INFO 9976 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 15:41:54.424  INFO 9976 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-09 15:41:54.596  INFO 9976 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-09 15:41:54.686  INFO 9976 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=-1, name='新的分类'}]}
2021-02-09 15:41:54.686  INFO 9976 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}]}
2021-02-09 15:42:27.815  INFO 9976 --- [http-nio-8080-exec-3] t.y.r.c.admin.AdminBlogController        : 前端blog-----> Blog{id=null, name='1111恶趣味我的撒旦', content='得得得得大大大大大大', description='搜索搜索', views=null, published=false, tagIds='null', createTime=Tue Jan 19 12:35:22 CST 2021, updateTime=null, category=category{id=6, name='Linux相关'}, comments=[], tags=[Tag{id=13, name='学习'}, Tag{id=15, name='HTML基础'}, Tag{id=-1, name='新的标签'}, Tag{id=-1, name='新的啊啊啊啊啊'}, Tag{id=18, name='Vue'}, Tag{id=20, name='动态规划'}, Tag{id=-1, name='新的标签'}]}
2021-02-09 15:42:27.846 ERROR 9976 --- [http-nio-8080-exec-3] t.yalexin.rblog.service.BlogServiceImpl  : error --> nested exception is org.apache.ibatis.executor.ExecutorException: Error getting generated key or setting result to parameter object. Cause: org.apache.ibatis.executor.result.ResultMapException: Error attempting to get column #1 from result set.  Cause: java.sql.SQLDataException: Value '18,446,744,073,709,551,615' is outside of valid range for type java.lang.Long
2021-02-09 15:45:50.305  INFO 14144 --- [main] top.yalexin.rblog.RblogServApplication   : Starting RblogServApplication using Java 14 on DESKTOP-E2AV1HM with PID 14144 (C:\Users\YaleXin\IdeaProjects\rblog\target\classes started by YaleXin in C:\Users\YaleXin\IdeaProjects\rblog)
2021-02-09 15:45:50.305  INFO 14144 --- [main] top.yalexin.rblog.RblogServApplication   : The following profiles are active: dev
2021-02-09 15:45:52.482  INFO 14144 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-09 15:45:52.482  INFO 14144 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-09 15:45:52.482  INFO 14144 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.41]
2021-02-09 15:45:52.576  INFO 14144 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring embedded WebApplicationContext
2021-02-09 15:45:52.576  INFO 14144 --- [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2178 ms
2021-02-09 15:45:53.542  INFO 14144 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-09 15:45:54.136  INFO 14144 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path '/api'
2021-02-09 15:45:54.152  INFO 14144 --- [main] top.yalexin.rblog.RblogServApplication   : Started RblogServApplication in 4.555 seconds (JVM running for 5.45)
2021-02-09 15:46:24.751  INFO 14144 --- [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-09 15:46:24.752  INFO 14144 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-09 15:46:24.753  INFO 14144 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
2021-02-09 15:46:24.784  INFO 14144 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 15:46:24.784  INFO 14144 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 15:46:24.791  INFO 14144 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-09 15:46:25.025  INFO 14144 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-09 15:46:25.100  INFO 14144 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 15:46:25.100  INFO 14144 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}]}
2021-02-09 15:46:49.022  INFO 14144 --- [http-nio-8080-exec-3] t.y.r.c.admin.AdminBlogController        : 前端blog-----> Blog{id=null, name='1111恶趣味我的撒旦', content='得得得得大大大大大大', description='搜索搜索威威', views=null, published=false, tagIds='null', createTime=Tue Jan 19 12:35:22 CST 2021, updateTime=null, category=category{id=7, name='Vue初级'}, comments=[], tags=[Tag{id=13, name='学习'}, Tag{id=15, name='HTML基础'}, Tag{id=-1, name='新的标签'}, Tag{id=-1, name='新的啊啊啊啊啊'}, Tag{id=18, name='Vue'}, Tag{id=20, name='动态规划'}, Tag{id=-1, name='新的标签'}, Tag{id=12, name='工具'}, Tag{id=11, name='分享'}, Tag{id=10, name='C'}, Tag{id=-1, name='新的1'}, Tag{id=-1, name='新的2'}]}
2021-02-09 15:46:49.159  INFO 14144 --- [http-nio-8080-exec-3] t.y.r.c.admin.AdminBlogController        : after saveBlog-----> Blog{id=70, name='1111恶趣味我的撒旦', content='得得得得大大大大大大', description='搜索搜索威威', views=null, published=false, tagIds='null', createTime=Tue Jan 19 12:35:22 CST 2021, updateTime=Tue Feb 09 15:46:49 CST 2021, category=category{id=7, name='Vue初级'}, comments=[], tags=[Tag{id=13, name='学习'}, Tag{id=15, name='HTML基础'}, Tag{id=1, name='新的标签'}, Tag{id=1, name='新的啊啊啊啊啊'}, Tag{id=18, name='Vue'}, Tag{id=20, name='动态规划'}, Tag{id=1, name='新的标签'}, Tag{id=12, name='工具'}, Tag{id=11, name='分享'}, Tag{id=10, name='C'}, Tag{id=1, name='新的1'}, Tag{id=1, name='新的2'}]}
2021-02-09 15:49:02.721  INFO 14144 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 15:49:02.721  INFO 14144 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 15:49:02.728  INFO 14144 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 15:49:02.730  INFO 14144 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=46, name='新的标签'}, Tag{id=47, name='新的啊啊啊啊啊'}, Tag{id=48, name='新的标签'}, Tag{id=49, name='新的1'}, Tag{id=50, name='新的2'}]}
2021-02-09 15:49:38.238  INFO 14144 --- [http-nio-8080-exec-6] t.y.r.c.admin.AdminBlogController        : 前端blog-----> Blog{id=null, name='1111恶趣味我的撒旦', content='得得得得大大大大大大', description='搜索搜索威威', views=null, published=false, tagIds='null', createTime=Tue Jan 12 10:35:22 CST 2021, updateTime=null, category=category{id=-1, name='新分类'}, comments=[], tags=[Tag{id=13, name='学习'}, Tag{id=15, name='HTML基础'}, Tag{id=-1, name='新的标签'}, Tag{id=-1, name='新的啊啊啊啊啊'}, Tag{id=18, name='Vue'}, Tag{id=20, name='动态规划'}, Tag{id=-1, name='新的标签'}, Tag{id=12, name='工具'}, Tag{id=11, name='分享'}, Tag{id=10, name='C'}, Tag{id=-1, name='新的1'}, Tag{id=-1, name='新的2'}, Tag{id=-1, name='新 11111111111'}, Tag{id=-1, name='新2222222222222'}]}
2021-02-09 15:49:38.478 ERROR 14144 --- [http-nio-8080-exec-6] t.yalexin.rblog.service.BlogServiceImpl  : error --> 
### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '1111恶趣味我的撒旦' for key 'name'
### The error may exist in top/yalexin/rblog/mapper/BlogMapper.java (best guess)
### The error may involve top.yalexin.rblog.mapper.BlogMapper.insertBlog-Inline
### The error occurred while setting parameters
### SQL: insert into t_blog(name,content,description, create_time, update_time,category_id) values(?,?,?, ?, ?, ?)
### Cause: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '1111恶趣味我的撒旦' for key 'name'
; Duplicate entry '1111恶趣味我的撒旦' for key 'name'; nested exception is java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '1111恶趣味我的撒旦' for key 'name'
2021-02-09 15:52:04.970  INFO 14144 --- [http-nio-8080-exec-7] t.y.r.c.admin.AdminBlogController        : 前端blog-----> Blog{id=null, name='趣味我的撒旦', content='得得得得大大大大大大
    ', description='搜索搜索威威到的', views=null, published=false, tagIds='null', createTime=Tue Jan 12 10:35:22 CST 2021, updateTime=null, category=category{id=-1, name='新分类'}, comments=[], tags=[Tag{id=13, name='学习'}, Tag{id=15, name='HTML基础'}, Tag{id=-1, name='新的标签'}, Tag{id=-1, name='新的啊啊啊啊啊'}, Tag{id=18, name='Vue'}, Tag{id=20, name='动态规划'}, Tag{id=-1, name='新的标签'}, Tag{id=12, name='工具'}, Tag{id=11, name='分享'}, Tag{id=10, name='C'}, Tag{id=-1, name='新的1'}, Tag{id=-1, name='新的2'}, Tag{id=-1, name='新 11111111111'}, Tag{id=-1, name='新2222222222222'}, Tag{id=-1, name='31231212'}]}
2021-02-09 15:52:05.086  INFO 14144 --- [http-nio-8080-exec-7] t.y.r.c.admin.AdminBlogController        : after saveBlog-----> Blog{id=72, name='趣味我的撒旦', content='得得得得大大大大大大
    ', description='搜索搜索威威到的', views=null, published=false, tagIds='null', createTime=Tue Jan 12 10:35:22 CST 2021, updateTime=Tue Feb 09 15:52:04 CST 2021, category=category{id=1, name='新分类'}, comments=[], tags=[Tag{id=13, name='学习'}, Tag{id=15, name='HTML基础'}, Tag{id=1, name='新的标签'}, Tag{id=1, name='新的啊啊啊啊啊'}, Tag{id=18, name='Vue'}, Tag{id=20, name='动态规划'}, Tag{id=1, name='新的标签'}, Tag{id=12, name='工具'}, Tag{id=11, name='分享'}, Tag{id=10, name='C'}, Tag{id=1, name='新的1'}, Tag{id=1, name='新的2'}, Tag{id=1, name='新 11111111111'}, Tag{id=1, name='新2222222222222'}, Tag{id=1, name='31231212'}]}
2021-02-09 16:09:54.560  INFO 14144 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 16:09:54.560  INFO 14144 --- [http-nio-8080-exec-9] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 16:09:54.688  INFO 14144 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=46, name='新的标签'}, Tag{id=47, name='新的啊啊啊啊啊'}, Tag{id=48, name='新的标签'}, Tag{id=49, name='新的1'}, Tag{id=50, name='新的2'}, Tag{id=51, name='新的标签'}, Tag{id=52, name='新的啊啊啊啊啊'}, Tag{id=53, name='新的标签'}, Tag{id=54, name='新的1'}, Tag{id=55, name='新的2'}, Tag{id=56, name='新 11111111111'}, Tag{id=57, name='新2222222222222'}, Tag{id=58, name='新的标签'}, Tag{id=59, name='新的啊啊啊啊啊'}, Tag{id=60, name='新的标签'}, Tag{id=61, name='新的1'}, Tag{id=62, name='新的2'}, Tag{id=63, name='新 11111111111'}, Tag{id=64, name='新2222222222222'}, Tag{id=65, name='31231212'}]}
2021-02-09 16:09:54.737  INFO 14144 --- [http-nio-8080-exec-9] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=15, name='新分类'}, category{id=16, name='新分类'}]}
2021-02-09 16:15:53.107  INFO 14144 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 16:15:53.138  INFO 14144 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=46, name='新的标签'}, Tag{id=47, name='新的啊啊啊啊啊'}, Tag{id=48, name='新的标签'}, Tag{id=49, name='新的1'}, Tag{id=50, name='新的2'}, Tag{id=51, name='新的标签'}, Tag{id=52, name='新的啊啊啊啊啊'}, Tag{id=53, name='新的标签'}, Tag{id=54, name='新的1'}, Tag{id=55, name='新的2'}, Tag{id=56, name='新 11111111111'}, Tag{id=57, name='新2222222222222'}, Tag{id=58, name='新的标签'}, Tag{id=59, name='新的啊啊啊啊啊'}, Tag{id=60, name='新的标签'}, Tag{id=61, name='新的1'}, Tag{id=62, name='新的2'}, Tag{id=63, name='新 11111111111'}, Tag{id=64, name='新2222222222222'}, Tag{id=65, name='31231212'}]}
2021-02-09 16:15:53.272  INFO 14144 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 16:15:53.276  INFO 14144 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=15, name='新分类'}, category{id=16, name='新分类'}]}
2021-02-09 16:16:04.177  INFO 14144 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 16:16:04.183  INFO 14144 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=46, name='新的标签'}, Tag{id=47, name='新的啊啊啊啊啊'}, Tag{id=48, name='新的标签'}, Tag{id=49, name='新的1'}, Tag{id=50, name='新的2'}, Tag{id=51, name='新的标签'}, Tag{id=52, name='新的啊啊啊啊啊'}, Tag{id=53, name='新的标签'}, Tag{id=54, name='新的1'}, Tag{id=55, name='新的2'}, Tag{id=56, name='新 11111111111'}, Tag{id=57, name='新2222222222222'}, Tag{id=58, name='新的标签'}, Tag{id=59, name='新的啊啊啊啊啊'}, Tag{id=60, name='新的标签'}, Tag{id=61, name='新的1'}, Tag{id=62, name='新的2'}, Tag{id=63, name='新 11111111111'}, Tag{id=64, name='新2222222222222'}, Tag{id=65, name='31231212'}]}
2021-02-09 16:16:04.466  INFO 14144 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 16:16:04.483  INFO 14144 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=15, name='新分类'}, category{id=16, name='新分类'}]}
2021-02-09 16:16:11.410  INFO 14144 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 16:16:11.410  INFO 14144 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 16:16:11.444  INFO 14144 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=15, name='新分类'}, category{id=16, name='新分类'}]}
2021-02-09 16:16:11.445  INFO 14144 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=46, name='新的标签'}, Tag{id=47, name='新的啊啊啊啊啊'}, Tag{id=48, name='新的标签'}, Tag{id=49, name='新的1'}, Tag{id=50, name='新的2'}, Tag{id=51, name='新的标签'}, Tag{id=52, name='新的啊啊啊啊啊'}, Tag{id=53, name='新的标签'}, Tag{id=54, name='新的1'}, Tag{id=55, name='新的2'}, Tag{id=56, name='新 11111111111'}, Tag{id=57, name='新2222222222222'}, Tag{id=58, name='新的标签'}, Tag{id=59, name='新的啊啊啊啊啊'}, Tag{id=60, name='新的标签'}, Tag{id=61, name='新的1'}, Tag{id=62, name='新的2'}, Tag{id=63, name='新 11111111111'}, Tag{id=64, name='新2222222222222'}, Tag{id=65, name='31231212'}]}
2021-02-09 16:16:51.513  INFO 14144 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 16:16:51.515  INFO 14144 --- [http-nio-8080-exec-7] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 16:16:51.515  INFO 14144 --- [http-nio-8080-exec-7] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=15, name='新分类'}, category{id=16, name='新分类'}]}
2021-02-09 16:16:51.515  INFO 14144 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=46, name='新的标签'}, Tag{id=47, name='新的啊啊啊啊啊'}, Tag{id=48, name='新的标签'}, Tag{id=49, name='新的1'}, Tag{id=50, name='新的2'}, Tag{id=51, name='新的标签'}, Tag{id=52, name='新的啊啊啊啊啊'}, Tag{id=53, name='新的标签'}, Tag{id=54, name='新的1'}, Tag{id=55, name='新的2'}, Tag{id=56, name='新 11111111111'}, Tag{id=57, name='新2222222222222'}, Tag{id=58, name='新的标签'}, Tag{id=59, name='新的啊啊啊啊啊'}, Tag{id=60, name='新的标签'}, Tag{id=61, name='新的1'}, Tag{id=62, name='新的2'}, Tag{id=63, name='新 11111111111'}, Tag{id=64, name='新2222222222222'}, Tag{id=65, name='31231212'}]}
2021-02-09 16:17:04.696  INFO 14144 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 16:17:04.707  INFO 14144 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=46, name='新的标签'}, Tag{id=47, name='新的啊啊啊啊啊'}, Tag{id=48, name='新的标签'}, Tag{id=49, name='新的1'}, Tag{id=50, name='新的2'}, Tag{id=51, name='新的标签'}, Tag{id=52, name='新的啊啊啊啊啊'}, Tag{id=53, name='新的标签'}, Tag{id=54, name='新的1'}, Tag{id=55, name='新的2'}, Tag{id=56, name='新 11111111111'}, Tag{id=57, name='新2222222222222'}, Tag{id=58, name='新的标签'}, Tag{id=59, name='新的啊啊啊啊啊'}, Tag{id=60, name='新的标签'}, Tag{id=61, name='新的1'}, Tag{id=62, name='新的2'}, Tag{id=63, name='新 11111111111'}, Tag{id=64, name='新2222222222222'}, Tag{id=65, name='31231212'}]}
2021-02-09 16:17:04.873  INFO 14144 --- [http-nio-8080-exec-9] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 16:17:04.879  INFO 14144 --- [http-nio-8080-exec-9] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=15, name='新分类'}, category{id=16, name='新分类'}]}
2021-02-09 16:17:26.048  INFO 14144 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 16:17:26.070  INFO 14144 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=46, name='新的标签'}, Tag{id=47, name='新的啊啊啊啊啊'}, Tag{id=48, name='新的标签'}, Tag{id=49, name='新的1'}, Tag{id=50, name='新的2'}, Tag{id=51, name='新的标签'}, Tag{id=52, name='新的啊啊啊啊啊'}, Tag{id=53, name='新的标签'}, Tag{id=54, name='新的1'}, Tag{id=55, name='新的2'}, Tag{id=56, name='新 11111111111'}, Tag{id=57, name='新2222222222222'}, Tag{id=58, name='新的标签'}, Tag{id=59, name='新的啊啊啊啊啊'}, Tag{id=60, name='新的标签'}, Tag{id=61, name='新的1'}, Tag{id=62, name='新的2'}, Tag{id=63, name='新 11111111111'}, Tag{id=64, name='新2222222222222'}, Tag{id=65, name='31231212'}]}
2021-02-09 16:17:26.353  INFO 14144 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 16:17:26.357  INFO 14144 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=15, name='新分类'}, category{id=16, name='新分类'}]}
2021-02-09 16:17:39.332  INFO 14144 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 16:17:39.341  INFO 14144 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=46, name='新的标签'}, Tag{id=47, name='新的啊啊啊啊啊'}, Tag{id=48, name='新的标签'}, Tag{id=49, name='新的1'}, Tag{id=50, name='新的2'}, Tag{id=51, name='新的标签'}, Tag{id=52, name='新的啊啊啊啊啊'}, Tag{id=53, name='新的标签'}, Tag{id=54, name='新的1'}, Tag{id=55, name='新的2'}, Tag{id=56, name='新 11111111111'}, Tag{id=57, name='新2222222222222'}, Tag{id=58, name='新的标签'}, Tag{id=59, name='新的啊啊啊啊啊'}, Tag{id=60, name='新的标签'}, Tag{id=61, name='新的1'}, Tag{id=62, name='新的2'}, Tag{id=63, name='新 11111111111'}, Tag{id=64, name='新2222222222222'}, Tag{id=65, name='31231212'}]}
2021-02-09 16:17:39.407  INFO 14144 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 16:17:39.411  INFO 14144 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=15, name='新分类'}, category{id=16, name='新分类'}]}
2021-02-09 16:18:03.148  INFO 14144 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 16:18:03.154  INFO 14144 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=46, name='新的标签'}, Tag{id=47, name='新的啊啊啊啊啊'}, Tag{id=48, name='新的标签'}, Tag{id=49, name='新的1'}, Tag{id=50, name='新的2'}, Tag{id=51, name='新的标签'}, Tag{id=52, name='新的啊啊啊啊啊'}, Tag{id=53, name='新的标签'}, Tag{id=54, name='新的1'}, Tag{id=55, name='新的2'}, Tag{id=56, name='新 11111111111'}, Tag{id=57, name='新2222222222222'}, Tag{id=58, name='新的标签'}, Tag{id=59, name='新的啊啊啊啊啊'}, Tag{id=60, name='新的标签'}, Tag{id=61, name='新的1'}, Tag{id=62, name='新的2'}, Tag{id=63, name='新 11111111111'}, Tag{id=64, name='新2222222222222'}, Tag{id=65, name='31231212'}]}
2021-02-09 16:18:03.455  INFO 14144 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 16:18:03.455  INFO 14144 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=15, name='新分类'}, category{id=16, name='新分类'}]}
2021-02-09 16:18:08.536  INFO 14144 --- [http-nio-8080-exec-7] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 16:18:08.536  INFO 14144 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 16:18:08.541  INFO 14144 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=15, name='新分类'}, category{id=16, name='新分类'}]}
2021-02-09 16:18:08.546  INFO 14144 --- [http-nio-8080-exec-7] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=46, name='新的标签'}, Tag{id=47, name='新的啊啊啊啊啊'}, Tag{id=48, name='新的标签'}, Tag{id=49, name='新的1'}, Tag{id=50, name='新的2'}, Tag{id=51, name='新的标签'}, Tag{id=52, name='新的啊啊啊啊啊'}, Tag{id=53, name='新的标签'}, Tag{id=54, name='新的1'}, Tag{id=55, name='新的2'}, Tag{id=56, name='新 11111111111'}, Tag{id=57, name='新2222222222222'}, Tag{id=58, name='新的标签'}, Tag{id=59, name='新的啊啊啊啊啊'}, Tag{id=60, name='新的标签'}, Tag{id=61, name='新的1'}, Tag{id=62, name='新的2'}, Tag{id=63, name='新 11111111111'}, Tag{id=64, name='新2222222222222'}, Tag{id=65, name='31231212'}]}
2021-02-09 16:22:19.992  INFO 14144 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 16:22:20.080  INFO 14144 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=46, name='新的标签'}, Tag{id=47, name='新的啊啊啊啊啊'}, Tag{id=48, name='新的标签'}, Tag{id=49, name='新的1'}, Tag{id=50, name='新的2'}, Tag{id=51, name='新的标签'}, Tag{id=52, name='新的啊啊啊啊啊'}, Tag{id=53, name='新的标签'}, Tag{id=54, name='新的1'}, Tag{id=55, name='新的2'}, Tag{id=56, name='新 11111111111'}, Tag{id=57, name='新2222222222222'}, Tag{id=58, name='新的标签'}, Tag{id=59, name='新的啊啊啊啊啊'}, Tag{id=60, name='新的标签'}, Tag{id=61, name='新的1'}, Tag{id=62, name='新的2'}, Tag{id=63, name='新 11111111111'}, Tag{id=64, name='新2222222222222'}, Tag{id=65, name='31231212'}]}
2021-02-09 16:22:20.097  INFO 14144 --- [http-nio-8080-exec-9] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 16:22:20.143  INFO 14144 --- [http-nio-8080-exec-9] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=15, name='新分类'}, category{id=16, name='新分类'}]}
2021-02-09 16:22:27.003  INFO 14144 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 16:22:27.051  INFO 14144 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=15, name='新分类'}, category{id=16, name='新分类'}]}
2021-02-09 16:22:27.067  INFO 14144 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 16:22:27.097  INFO 14144 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=46, name='新的标签'}, Tag{id=47, name='新的啊啊啊啊啊'}, Tag{id=48, name='新的标签'}, Tag{id=49, name='新的1'}, Tag{id=50, name='新的2'}, Tag{id=51, name='新的标签'}, Tag{id=52, name='新的啊啊啊啊啊'}, Tag{id=53, name='新的标签'}, Tag{id=54, name='新的1'}, Tag{id=55, name='新的2'}, Tag{id=56, name='新 11111111111'}, Tag{id=57, name='新2222222222222'}, Tag{id=58, name='新的标签'}, Tag{id=59, name='新的啊啊啊啊啊'}, Tag{id=60, name='新的标签'}, Tag{id=61, name='新的1'}, Tag{id=62, name='新的2'}, Tag{id=63, name='新 11111111111'}, Tag{id=64, name='新2222222222222'}, Tag{id=65, name='31231212'}]}
2021-02-09 16:23:05.420  INFO 14144 --- [http-nio-8080-exec-2] t.y.r.c.admin.AdminBlogController        : 前端blog-----> Blog{id=null, name='趣味我的撒旦', content='到的', description='顶点的', views=null, published=false, tagIds='null', createTime=Tue Feb 02 15:22:55 CST 2021, updateTime=null, category=category{id=4, name='Java'}, comments=[], tags=[Tag{id=8, name='教程'}]}
2021-02-09 16:23:06.077 ERROR 14144 --- [http-nio-8080-exec-2] t.yalexin.rblog.service.BlogServiceImpl  : error --> 
### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '趣味我的撒旦' for key 'name'
### The error may exist in top/yalexin/rblog/mapper/BlogMapper.java (best guess)
### The error may involve top.yalexin.rblog.mapper.BlogMapper.insertBlog-Inline
### The error occurred while setting parameters
### SQL: insert into t_blog(name,content,description, create_time, update_time,category_id) values(?,?,?, ?, ?, ?)
### Cause: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '趣味我的撒旦' for key 'name'
; Duplicate entry '趣味我的撒旦' for key 'name'; nested exception is java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '趣味我的撒旦' for key 'name'
2021-02-09 16:23:44.780  INFO 14144 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 16:23:44.785  INFO 14144 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=46, name='新的标签'}, Tag{id=47, name='新的啊啊啊啊啊'}, Tag{id=48, name='新的标签'}, Tag{id=49, name='新的1'}, Tag{id=50, name='新的2'}, Tag{id=51, name='新的标签'}, Tag{id=52, name='新的啊啊啊啊啊'}, Tag{id=53, name='新的标签'}, Tag{id=54, name='新的1'}, Tag{id=55, name='新的2'}, Tag{id=56, name='新 11111111111'}, Tag{id=57, name='新2222222222222'}, Tag{id=58, name='新的标签'}, Tag{id=59, name='新的啊啊啊啊啊'}, Tag{id=60, name='新的标签'}, Tag{id=61, name='新的1'}, Tag{id=62, name='新的2'}, Tag{id=63, name='新 11111111111'}, Tag{id=64, name='新2222222222222'}, Tag{id=65, name='31231212'}]}
2021-02-09 16:23:45.076  INFO 14144 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 16:23:45.076  INFO 14144 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=15, name='新分类'}, category{id=16, name='新分类'}]}
2021-02-09 16:24:16.707  INFO 14144 --- [http-nio-8080-exec-4] t.y.r.c.admin.AdminBlogController        : 前端blog-----> Blog{id=null, name='趣味我的撒旦', content='到的', description='到的', views=null, published=false, tagIds='null', createTime=Tue Jan 26 10:24:06 CST 2021, updateTime=null, category=category{id=10, name='命令行'}, comments=[], tags=[Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}]}
2021-02-09 16:24:16.769 ERROR 14144 --- [http-nio-8080-exec-4] t.yalexin.rblog.service.BlogServiceImpl  : error --> 
### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '趣味我的撒旦' for key 'name'
### The error may exist in top/yalexin/rblog/mapper/BlogMapper.java (best guess)
### The error may involve top.yalexin.rblog.mapper.BlogMapper.insertBlog-Inline
### The error occurred while setting parameters
### SQL: insert into t_blog(name,content,description, create_time, update_time,category_id) values(?,?,?, ?, ?, ?)
### Cause: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '趣味我的撒旦' for key 'name'
; Duplicate entry '趣味我的撒旦' for key 'name'; nested exception is java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '趣味我的撒旦' for key 'name'
2021-02-09 16:24:39.487  INFO 14144 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 16:24:39.546  INFO 14144 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=46, name='新的标签'}, Tag{id=47, name='新的啊啊啊啊啊'}, Tag{id=48, name='新的标签'}, Tag{id=49, name='新的1'}, Tag{id=50, name='新的2'}, Tag{id=51, name='新的标签'}, Tag{id=52, name='新的啊啊啊啊啊'}, Tag{id=53, name='新的标签'}, Tag{id=54, name='新的1'}, Tag{id=55, name='新的2'}, Tag{id=56, name='新 11111111111'}, Tag{id=57, name='新2222222222222'}, Tag{id=58, name='新的标签'}, Tag{id=59, name='新的啊啊啊啊啊'}, Tag{id=60, name='新的标签'}, Tag{id=61, name='新的1'}, Tag{id=62, name='新的2'}, Tag{id=63, name='新 11111111111'}, Tag{id=64, name='新2222222222222'}, Tag{id=65, name='31231212'}]}
2021-02-09 16:24:39.784  INFO 14144 --- [http-nio-8080-exec-7] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 16:24:39.784  INFO 14144 --- [http-nio-8080-exec-7] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=15, name='新分类'}, category{id=16, name='新分类'}]}
2021-02-09 16:26:28.246  INFO 14144 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 16:26:28.287  INFO 14144 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=46, name='新的标签'}, Tag{id=47, name='新的啊啊啊啊啊'}, Tag{id=48, name='新的标签'}, Tag{id=49, name='新的1'}, Tag{id=50, name='新的2'}, Tag{id=51, name='新的标签'}, Tag{id=52, name='新的啊啊啊啊啊'}, Tag{id=53, name='新的标签'}, Tag{id=54, name='新的1'}, Tag{id=55, name='新的2'}, Tag{id=56, name='新 11111111111'}, Tag{id=57, name='新2222222222222'}, Tag{id=58, name='新的标签'}, Tag{id=59, name='新的啊啊啊啊啊'}, Tag{id=60, name='新的标签'}, Tag{id=61, name='新的1'}, Tag{id=62, name='新的2'}, Tag{id=63, name='新 11111111111'}, Tag{id=64, name='新2222222222222'}, Tag{id=65, name='31231212'}]}
2021-02-09 16:26:28.550  INFO 14144 --- [http-nio-8080-exec-9] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 16:26:28.555  INFO 14144 --- [http-nio-8080-exec-9] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=15, name='新分类'}, category{id=16, name='新分类'}]}
2021-02-09 16:26:51.006  INFO 14144 --- [http-nio-8080-exec-1] t.y.r.c.admin.AdminBlogController        : 前端blog-----> Blog{id=null, name='趣味我的撒旦', content='到的', description='钱钱钱', views=null, published=false, tagIds='null', createTime=Tue Feb 16 17:26:43 CST 2021, updateTime=null, category=category{id=4, name='Java'}, comments=[], tags=[Tag{id=6, name='脚本'}]}
2021-02-09 16:26:51.006 ERROR 14144 --- [http-nio-8080-exec-1] t.yalexin.rblog.service.BlogServiceImpl  : error --> 
### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '趣味我的撒旦' for key 'name'
### The error may exist in top/yalexin/rblog/mapper/BlogMapper.java (best guess)
### The error may involve top.yalexin.rblog.mapper.BlogMapper.insertBlog-Inline
### The error occurred while setting parameters
### SQL: insert into t_blog(name,content,description, create_time, update_time,category_id) values(?,?,?, ?, ?, ?)
### Cause: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '趣味我的撒旦' for key 'name'
; Duplicate entry '趣味我的撒旦' for key 'name'; nested exception is java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '趣味我的撒旦' for key 'name'
2021-02-09 16:27:55.537  INFO 14144 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 16:27:55.594  INFO 14144 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=46, name='新的标签'}, Tag{id=47, name='新的啊啊啊啊啊'}, Tag{id=48, name='新的标签'}, Tag{id=49, name='新的1'}, Tag{id=50, name='新的2'}, Tag{id=51, name='新的标签'}, Tag{id=52, name='新的啊啊啊啊啊'}, Tag{id=53, name='新的标签'}, Tag{id=54, name='新的1'}, Tag{id=55, name='新的2'}, Tag{id=56, name='新 11111111111'}, Tag{id=57, name='新2222222222222'}, Tag{id=58, name='新的标签'}, Tag{id=59, name='新的啊啊啊啊啊'}, Tag{id=60, name='新的标签'}, Tag{id=61, name='新的1'}, Tag{id=62, name='新的2'}, Tag{id=63, name='新 11111111111'}, Tag{id=64, name='新2222222222222'}, Tag{id=65, name='31231212'}]}
2021-02-09 16:27:56.077  INFO 14144 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 16:27:56.081  INFO 14144 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=15, name='新分类'}, category{id=16, name='新分类'}]}
2021-02-09 16:28:22.219  INFO 14144 --- [http-nio-8080-exec-3] t.y.r.c.admin.AdminBlogController        : 前端blog-----> Blog{id=null, name='趣味我的撒旦', content='趣味我的撒旦', description='趣味我的撒旦', views=null, published=false, tagIds='null', createTime=Tue Feb 02 15:28:13 CST 2021, updateTime=null, category=category{id=7, name='Vue初级'}, comments=[], tags=[Tag{id=6, name='脚本'}]}
2021-02-09 16:28:22.227 ERROR 14144 --- [http-nio-8080-exec-3] t.yalexin.rblog.service.BlogServiceImpl  : error --> 
### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '趣味我的撒旦' for key 'name'
### The error may exist in top/yalexin/rblog/mapper/BlogMapper.java (best guess)
### The error may involve top.yalexin.rblog.mapper.BlogMapper.insertBlog-Inline
### The error occurred while setting parameters
### SQL: insert into t_blog(name,content,description, create_time, update_time,category_id) values(?,?,?, ?, ?, ?)
### Cause: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '趣味我的撒旦' for key 'name'
; Duplicate entry '趣味我的撒旦' for key 'name'; nested exception is java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '趣味我的撒旦' for key 'name'
2021-02-09 16:28:59.597  INFO 14144 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 16:28:59.630  INFO 14144 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=46, name='新的标签'}, Tag{id=47, name='新的啊啊啊啊啊'}, Tag{id=48, name='新的标签'}, Tag{id=49, name='新的1'}, Tag{id=50, name='新的2'}, Tag{id=51, name='新的标签'}, Tag{id=52, name='新的啊啊啊啊啊'}, Tag{id=53, name='新的标签'}, Tag{id=54, name='新的1'}, Tag{id=55, name='新的2'}, Tag{id=56, name='新 11111111111'}, Tag{id=57, name='新2222222222222'}, Tag{id=58, name='新的标签'}, Tag{id=59, name='新的啊啊啊啊啊'}, Tag{id=60, name='新的标签'}, Tag{id=61, name='新的1'}, Tag{id=62, name='新的2'}, Tag{id=63, name='新 11111111111'}, Tag{id=64, name='新2222222222222'}, Tag{id=65, name='31231212'}]}
2021-02-09 16:28:59.915  INFO 14144 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 16:28:59.921  INFO 14144 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=15, name='新分类'}, category{id=16, name='新分类'}]}
2021-02-09 16:29:15.970  INFO 14144 --- [http-nio-8080-exec-6] t.y.r.c.admin.AdminBlogController        : 前端blog-----> Blog{id=null, name='趣味我的撒旦', content='22', description='1', views=null, published=false, tagIds='null', createTime=Tue Feb 09 15:29:07 CST 2021, updateTime=null, category=category{id=7, name='Vue初级'}, comments=[], tags=[Tag{id=6, name='脚本'}]}
2021-02-09 16:29:15.986 ERROR 14144 --- [http-nio-8080-exec-6] t.yalexin.rblog.service.BlogServiceImpl  : error --> 
### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '趣味我的撒旦' for key 'name'
### The error may exist in top/yalexin/rblog/mapper/BlogMapper.java (best guess)
### The error may involve top.yalexin.rblog.mapper.BlogMapper.insertBlog-Inline
### The error occurred while setting parameters
### SQL: insert into t_blog(name,content,description, create_time, update_time,category_id) values(?,?,?, ?, ?, ?)
### Cause: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '趣味我的撒旦' for key 'name'
; Duplicate entry '趣味我的撒旦' for key 'name'; nested exception is java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '趣味我的撒旦' for key 'name'
2021-02-09 16:31:30.287  INFO 14144 --- [http-nio-8080-exec-7] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 16:31:30.321  INFO 14144 --- [http-nio-8080-exec-7] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=46, name='新的标签'}, Tag{id=47, name='新的啊啊啊啊啊'}, Tag{id=48, name='新的标签'}, Tag{id=49, name='新的1'}, Tag{id=50, name='新的2'}, Tag{id=51, name='新的标签'}, Tag{id=52, name='新的啊啊啊啊啊'}, Tag{id=53, name='新的标签'}, Tag{id=54, name='新的1'}, Tag{id=55, name='新的2'}, Tag{id=56, name='新 11111111111'}, Tag{id=57, name='新2222222222222'}, Tag{id=58, name='新的标签'}, Tag{id=59, name='新的啊啊啊啊啊'}, Tag{id=60, name='新的标签'}, Tag{id=61, name='新的1'}, Tag{id=62, name='新的2'}, Tag{id=63, name='新 11111111111'}, Tag{id=64, name='新2222222222222'}, Tag{id=65, name='31231212'}]}
2021-02-09 16:31:30.593  INFO 14144 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 16:31:30.653  INFO 14144 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=15, name='新分类'}, category{id=16, name='新分类'}]}
2021-02-09 16:31:51.462  INFO 14144 --- [http-nio-8080-exec-9] t.y.r.c.admin.AdminBlogController        : 前端blog-----> Blog{id=null, name='趣味我的撒旦', content='到的', description='我', views=null, published=false, tagIds='null', createTime=Tue Jan 26 16:31:43 CST 2021, updateTime=null, category=category{id=4, name='Java'}, comments=[], tags=[Tag{id=6, name='脚本'}]}
2021-02-09 16:31:51.509 ERROR 14144 --- [http-nio-8080-exec-9] t.yalexin.rblog.service.BlogServiceImpl  : error --> 
### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '趣味我的撒旦' for key 'name'
### The error may exist in top/yalexin/rblog/mapper/BlogMapper.java (best guess)
### The error may involve top.yalexin.rblog.mapper.BlogMapper.insertBlog-Inline
### The error occurred while setting parameters
### SQL: insert into t_blog(name,content,description, create_time, update_time,category_id) values(?,?,?, ?, ?, ?)
### Cause: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '趣味我的撒旦' for key 'name'
; Duplicate entry '趣味我的撒旦' for key 'name'; nested exception is java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '趣味我的撒旦' for key 'name'
2021-02-09 16:34:06.897  INFO 14144 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 16:34:06.952  INFO 14144 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=46, name='新的标签'}, Tag{id=47, name='新的啊啊啊啊啊'}, Tag{id=48, name='新的标签'}, Tag{id=49, name='新的1'}, Tag{id=50, name='新的2'}, Tag{id=51, name='新的标签'}, Tag{id=52, name='新的啊啊啊啊啊'}, Tag{id=53, name='新的标签'}, Tag{id=54, name='新的1'}, Tag{id=55, name='新的2'}, Tag{id=56, name='新 11111111111'}, Tag{id=57, name='新2222222222222'}, Tag{id=58, name='新的标签'}, Tag{id=59, name='新的啊啊啊啊啊'}, Tag{id=60, name='新的标签'}, Tag{id=61, name='新的1'}, Tag{id=62, name='新的2'}, Tag{id=63, name='新 11111111111'}, Tag{id=64, name='新2222222222222'}, Tag{id=65, name='31231212'}]}
2021-02-09 16:34:07.214  INFO 14144 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 16:34:07.219  INFO 14144 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=15, name='新分类'}, category{id=16, name='新分类'}]}
2021-02-09 16:34:29.296  INFO 14144 --- [http-nio-8080-exec-2] t.y.r.c.admin.AdminBlogController        : 前端blog-----> Blog{id=null, name='趣味我的撒旦', content='11', description='1', views=null, published=false, tagIds='null', createTime=Tue Feb 02 15:34:21 CST 2021, updateTime=null, category=category{id=4, name='Java'}, comments=[], tags=[Tag{id=7, name='效率'}]}
2021-02-09 16:34:29.296 ERROR 14144 --- [http-nio-8080-exec-2] t.yalexin.rblog.service.BlogServiceImpl  : error --> 
### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '趣味我的撒旦' for key 'name'
### The error may exist in top/yalexin/rblog/mapper/BlogMapper.java (best guess)
### The error may involve top.yalexin.rblog.mapper.BlogMapper.insertBlog-Inline
### The error occurred while setting parameters
### SQL: insert into t_blog(name,content,description, create_time, update_time,category_id) values(?,?,?, ?, ?, ?)
### Cause: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '趣味我的撒旦' for key 'name'
; Duplicate entry '趣味我的撒旦' for key 'name'; nested exception is java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '趣味我的撒旦' for key 'name'
2021-02-09 16:35:06.250  INFO 14144 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 16:35:06.281  INFO 14144 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=46, name='新的标签'}, Tag{id=47, name='新的啊啊啊啊啊'}, Tag{id=48, name='新的标签'}, Tag{id=49, name='新的1'}, Tag{id=50, name='新的2'}, Tag{id=51, name='新的标签'}, Tag{id=52, name='新的啊啊啊啊啊'}, Tag{id=53, name='新的标签'}, Tag{id=54, name='新的1'}, Tag{id=55, name='新的2'}, Tag{id=56, name='新 11111111111'}, Tag{id=57, name='新2222222222222'}, Tag{id=58, name='新的标签'}, Tag{id=59, name='新的啊啊啊啊啊'}, Tag{id=60, name='新的标签'}, Tag{id=61, name='新的1'}, Tag{id=62, name='新的2'}, Tag{id=63, name='新 11111111111'}, Tag{id=64, name='新2222222222222'}, Tag{id=65, name='31231212'}]}
2021-02-09 16:35:06.565  INFO 14144 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 16:35:06.587  INFO 14144 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=15, name='新分类'}, category{id=16, name='新分类'}]}
2021-02-09 16:35:16.783  INFO 14144 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 16:35:16.783  INFO 14144 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 16:35:16.791  INFO 14144 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=15, name='新分类'}, category{id=16, name='新分类'}]}
2021-02-09 16:35:16.790  INFO 14144 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=46, name='新的标签'}, Tag{id=47, name='新的啊啊啊啊啊'}, Tag{id=48, name='新的标签'}, Tag{id=49, name='新的1'}, Tag{id=50, name='新的2'}, Tag{id=51, name='新的标签'}, Tag{id=52, name='新的啊啊啊啊啊'}, Tag{id=53, name='新的标签'}, Tag{id=54, name='新的1'}, Tag{id=55, name='新的2'}, Tag{id=56, name='新 11111111111'}, Tag{id=57, name='新2222222222222'}, Tag{id=58, name='新的标签'}, Tag{id=59, name='新的啊啊啊啊啊'}, Tag{id=60, name='新的标签'}, Tag{id=61, name='新的1'}, Tag{id=62, name='新的2'}, Tag{id=63, name='新 11111111111'}, Tag{id=64, name='新2222222222222'}, Tag{id=65, name='31231212'}]}
2021-02-09 16:35:56.796  INFO 14144 --- [http-nio-8080-exec-7] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 16:35:56.836  INFO 14144 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 16:35:56.882  INFO 14144 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=15, name='新分类'}, category{id=16, name='新分类'}]}
2021-02-09 16:35:56.903  INFO 14144 --- [http-nio-8080-exec-7] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=46, name='新的标签'}, Tag{id=47, name='新的啊啊啊啊啊'}, Tag{id=48, name='新的标签'}, Tag{id=49, name='新的1'}, Tag{id=50, name='新的2'}, Tag{id=51, name='新的标签'}, Tag{id=52, name='新的啊啊啊啊啊'}, Tag{id=53, name='新的标签'}, Tag{id=54, name='新的1'}, Tag{id=55, name='新的2'}, Tag{id=56, name='新 11111111111'}, Tag{id=57, name='新2222222222222'}, Tag{id=58, name='新的标签'}, Tag{id=59, name='新的啊啊啊啊啊'}, Tag{id=60, name='新的标签'}, Tag{id=61, name='新的1'}, Tag{id=62, name='新的2'}, Tag{id=63, name='新 11111111111'}, Tag{id=64, name='新2222222222222'}, Tag{id=65, name='31231212'}]}
2021-02-09 16:36:19.491  INFO 14144 --- [http-nio-8080-exec-9] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 16:36:19.493  INFO 14144 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 16:36:19.559  INFO 14144 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=15, name='新分类'}, category{id=16, name='新分类'}]}
2021-02-09 16:36:19.593  INFO 14144 --- [http-nio-8080-exec-9] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=46, name='新的标签'}, Tag{id=47, name='新的啊啊啊啊啊'}, Tag{id=48, name='新的标签'}, Tag{id=49, name='新的1'}, Tag{id=50, name='新的2'}, Tag{id=51, name='新的标签'}, Tag{id=52, name='新的啊啊啊啊啊'}, Tag{id=53, name='新的标签'}, Tag{id=54, name='新的1'}, Tag{id=55, name='新的2'}, Tag{id=56, name='新 11111111111'}, Tag{id=57, name='新2222222222222'}, Tag{id=58, name='新的标签'}, Tag{id=59, name='新的啊啊啊啊啊'}, Tag{id=60, name='新的标签'}, Tag{id=61, name='新的1'}, Tag{id=62, name='新的2'}, Tag{id=63, name='新 11111111111'}, Tag{id=64, name='新2222222222222'}, Tag{id=65, name='31231212'}]}
2021-02-09 16:38:28.160  INFO 14144 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 16:38:28.168  INFO 14144 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}]}
2021-02-09 16:38:28.160  INFO 14144 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 16:38:28.173  INFO 14144 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}]}
2021-02-09 16:39:22.006  INFO 14144 --- [http-nio-8080-exec-3] t.y.r.c.admin.AdminBlogController        : 前端blog-----> Blog{id=null, name='全新的文章', content='仿佛违法击破发', description='21321321', views=null, published=false, tagIds='null', createTime=Tue Feb 02 15:39:11 CST 2021, updateTime=null, category=category{id=-1, name='新分类'}, comments=[], tags=[Tag{id=-1, name='新标签1'}, Tag{id=-1, name='新标签2'}]}
2021-02-09 16:39:22.207  INFO 14144 --- [http-nio-8080-exec-3] t.y.r.c.admin.AdminBlogController        : after saveBlog-----> Blog{id=80, name='全新的文章', content='仿佛违法击破发', description='21321321', views=null, published=false, tagIds='null', createTime=Tue Feb 02 15:39:11 CST 2021, updateTime=Tue Feb 09 16:39:22 CST 2021, category=category{id=1, name='新分类'}, comments=[], tags=[Tag{id=1, name='新标签1'}, Tag{id=1, name='新标签2'}]}
2021-02-09 16:39:38.773  INFO 14144 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 16:39:38.824  INFO 14144 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 16:39:38.827  INFO 14144 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=17, name='新分类'}]}
2021-02-09 16:39:38.848  INFO 14144 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=66, name='新标签1'}, Tag{id=67, name='新标签2'}]}
2021-02-09 16:41:15.640  INFO 14144 --- [http-nio-8080-exec-4] t.y.r.c.admin.AdminBlogController        : 前端blog-----> Blog{id=null, name='全新的文章11', content='仿佛违法击破发到的', description='21321321顶点的', views=null, published=false, tagIds='null', createTime=Tue Jan 19 09:39:11 CST 2021, updateTime=null, category=category{id=-1, name='新分类11'}, comments=[], tags=[Tag{id=-1, name='新标签3'}, Tag{id=-1, name='新标签4'}]}
2021-02-09 16:41:15.718  INFO 14144 --- [http-nio-8080-exec-4] t.y.r.c.admin.AdminBlogController        : after saveBlog-----> Blog{id=81, name='全新的文章11', content='仿佛违法击破发到的', description='21321321顶点的', views=null, published=false, tagIds='null', createTime=Tue Jan 19 09:39:11 CST 2021, updateTime=Tue Feb 09 16:41:15 CST 2021, category=category{id=1, name='新分类11'}, comments=[], tags=[Tag{id=1, name='新标签3'}, Tag{id=1, name='新标签4'}]}
2021-02-09 16:44:36.861  INFO 14144 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 16:44:36.911  INFO 14144 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=66, name='新标签1'}, Tag{id=67, name='新标签2'}, Tag{id=68, name='新标签3'}, Tag{id=69, name='新标签4'}]}
2021-02-09 16:44:37.162  INFO 14144 --- [http-nio-8080-exec-7] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 16:44:37.173  INFO 14144 --- [http-nio-8080-exec-7] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=17, name='新分类'}, category{id=18, name='新分类11'}]}
2021-02-09 16:48:27.790  INFO 14144 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 16:48:27.810  INFO 14144 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=66, name='新标签1'}, Tag{id=67, name='新标签2'}, Tag{id=68, name='新标签3'}, Tag{id=69, name='新标签4'}]}
2021-02-09 16:48:28.094  INFO 14144 --- [http-nio-8080-exec-9] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 16:48:28.118  INFO 14144 --- [http-nio-8080-exec-9] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=17, name='新分类'}, category{id=18, name='新分类11'}]}
2021-02-09 16:48:32.481  INFO 14144 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 16:48:32.481  INFO 14144 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 16:48:32.485  INFO 14144 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=17, name='新分类'}, category{id=18, name='新分类11'}]}
2021-02-09 16:48:32.501  INFO 14144 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=66, name='新标签1'}, Tag{id=67, name='新标签2'}, Tag{id=68, name='新标签3'}, Tag{id=69, name='新标签4'}]}
2021-02-09 16:49:08.635  INFO 14144 --- [http-nio-8080-exec-3] t.y.r.c.admin.AdminBlogController        : 前端blog-----> Blog{id=null, name='测试跳转', content='这是一个测试', description='测试噢', views=null, published=false, tagIds='null', createTime=Tue Feb 02 15:48:56 CST 2021, updateTime=null, category=category{id=-1, name='测试相关'}, comments=[], tags=[Tag{id=-1, name='测试'}]}
2021-02-09 16:49:08.713  INFO 14144 --- [http-nio-8080-exec-3] t.y.r.c.admin.AdminBlogController        : after saveBlog-----> Blog{id=82, name='测试跳转', content='这是一个测试', description='测试噢', views=null, published=false, tagIds='null', createTime=Tue Feb 02 15:48:56 CST 2021, updateTime=Tue Feb 09 16:49:08 CST 2021, category=category{id=1, name='测试相关'}, comments=[], tags=[Tag{id=1, name='测试'}]}
2021-02-09 16:51:41.089  INFO 14144 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 16:51:41.096  INFO 14144 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=66, name='新标签1'}, Tag{id=67, name='新标签2'}, Tag{id=68, name='新标签3'}, Tag{id=69, name='新标签4'}, Tag{id=70, name='测试'}]}
2021-02-09 16:51:41.131  INFO 14144 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 16:51:41.151  INFO 14144 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=17, name='新分类'}, category{id=18, name='新分类11'}, category{id=19, name='测试相关'}]}
2021-02-09 16:52:08.520  INFO 14144 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 16:52:08.527  INFO 14144 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 16:52:08.525  INFO 14144 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=17, name='新分类'}, category{id=18, name='新分类11'}, category{id=19, name='测试相关'}]}
2021-02-09 16:52:08.541  INFO 14144 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=66, name='新标签1'}, Tag{id=67, name='新标签2'}, Tag{id=68, name='新标签3'}, Tag{id=69, name='新标签4'}, Tag{id=70, name='测试'}]}
2021-02-09 16:53:07.795  INFO 14144 --- [http-nio-8080-exec-7] t.y.r.c.admin.AdminBlogController        : 前端blog-----> Blog{id=null, name='测试跳转', content='分', description='测测', views=null, published=false, tagIds='null', createTime=Tue Feb 02 15:53:00 CST 2021, updateTime=null, category=category{id=19, name='测试相关'}, comments=[], tags=[Tag{id=70, name='测试'}]}
2021-02-09 16:53:07.854 ERROR 14144 --- [http-nio-8080-exec-7] t.yalexin.rblog.service.BlogServiceImpl  : error --> 
### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '测试跳转' for key 'name'
### The error may exist in top/yalexin/rblog/mapper/BlogMapper.java (best guess)
### The error may involve top.yalexin.rblog.mapper.BlogMapper.insertBlog-Inline
### The error occurred while setting parameters
### SQL: insert into t_blog(name,content,description, create_time, update_time,category_id) values(?,?,?, ?, ?, ?)
### Cause: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '测试跳转' for key 'name'
; Duplicate entry '测试跳转' for key 'name'; nested exception is java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '测试跳转' for key 'name'
2021-02-09 16:54:13.794  INFO 14144 --- [http-nio-8080-exec-1] t.y.r.c.admin.AdminBlogController        : 前端blog-----> Blog{id=null, name='测试跳转111', content='分', description='测测', views=null, published=false, tagIds='null', createTime=Tue Feb 02 15:53:00 CST 2021, updateTime=null, category=category{id=19, name='测试相关'}, comments=[], tags=[Tag{id=70, name='测试'}]}
2021-02-09 16:54:13.894  INFO 14144 --- [http-nio-8080-exec-1] t.y.r.c.admin.AdminBlogController        : after saveBlog-----> Blog{id=84, name='测试跳转111', content='分', description='测测', views=null, published=false, tagIds='null', createTime=Tue Feb 02 15:53:00 CST 2021, updateTime=Tue Feb 09 16:54:13 CST 2021, category=category{id=19, name='测试相关'}, comments=[], tags=[Tag{id=70, name='测试'}]}
2021-02-09 16:54:47.614  INFO 14144 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 16:54:47.614  INFO 14144 --- [http-nio-8080-exec-9] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 16:54:47.659  INFO 14144 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=17, name='新分类'}, category{id=18, name='新分类11'}, category{id=19, name='测试相关'}]}
2021-02-09 16:54:47.656  INFO 14144 --- [http-nio-8080-exec-9] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=66, name='新标签1'}, Tag{id=67, name='新标签2'}, Tag{id=68, name='新标签3'}, Tag{id=69, name='新标签4'}, Tag{id=70, name='测试'}]}
2021-02-09 16:55:03.571  INFO 14144 --- [http-nio-8080-exec-10] t.y.r.c.admin.AdminBlogController        : 前端blog-----> Blog{id=null, name='423343241', content='的', description='大无畏', views=null, published=false, tagIds='null', createTime=Tue Feb 02 15:54:56 CST 2021, updateTime=null, category=category{id=4, name='Java'}, comments=[], tags=[Tag{id=6, name='脚本'}]}
2021-02-09 16:55:03.634  INFO 14144 --- [http-nio-8080-exec-10] t.y.r.c.admin.AdminBlogController        : after saveBlog-----> Blog{id=85, name='423343241', content='的', description='大无畏', views=null, published=false, tagIds='null', createTime=Tue Feb 02 15:54:56 CST 2021, updateTime=Tue Feb 09 16:55:03 CST 2021, category=category{id=4, name='Java'}, comments=[], tags=[Tag{id=6, name='脚本'}]}
2021-02-09 16:56:55.960  INFO 14144 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 16:56:55.960  INFO 14144 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 16:56:55.967  INFO 14144 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=17, name='新分类'}, category{id=18, name='新分类11'}, category{id=19, name='测试相关'}]}
2021-02-09 16:56:55.968  INFO 14144 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=66, name='新标签1'}, Tag{id=67, name='新标签2'}, Tag{id=68, name='新标签3'}, Tag{id=69, name='新标签4'}, Tag{id=70, name='测试'}]}
2021-02-09 16:57:19.146  INFO 14144 --- [http-nio-8080-exec-5] t.y.r.c.admin.AdminBlogController        : 前端blog-----> Blog{id=null, name='234234', content='热热', description='43234243', views=null, published=false, tagIds='null', createTime=Thu Feb 11 15:57:11 CST 2021, updateTime=null, category=category{id=13, name='算法'}, comments=[], tags=[Tag{id=8, name='教程'}]}
2021-02-09 16:57:19.218  INFO 14144 --- [http-nio-8080-exec-5] t.y.r.c.admin.AdminBlogController        : after saveBlog-----> Blog{id=86, name='234234', content='热热', description='43234243', views=null, published=false, tagIds='null', createTime=Tue Feb 09 16:57:19 CST 2021, updateTime=Tue Feb 09 16:57:19 CST 2021, category=category{id=13, name='算法'}, comments=[], tags=[Tag{id=8, name='教程'}]}
2021-02-09 16:57:58.750  INFO 14144 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 16:57:58.750  INFO 14144 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 16:57:58.777  INFO 14144 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=17, name='新分类'}, category{id=18, name='新分类11'}, category{id=19, name='测试相关'}]}
2021-02-09 16:57:58.777  INFO 14144 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=66, name='新标签1'}, Tag{id=67, name='新标签2'}, Tag{id=68, name='新标签3'}, Tag{id=69, name='新标签4'}, Tag{id=70, name='测试'}]}
2021-02-09 16:58:03.895  INFO 14144 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 16:58:03.895  INFO 14144 --- [http-nio-8080-exec-7] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 16:58:03.898  INFO 14144 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=17, name='新分类'}, category{id=18, name='新分类11'}, category{id=19, name='测试相关'}]}
2021-02-09 16:58:03.914  INFO 14144 --- [http-nio-8080-exec-7] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=66, name='新标签1'}, Tag{id=67, name='新标签2'}, Tag{id=68, name='新标签3'}, Tag{id=69, name='新标签4'}, Tag{id=70, name='测试'}]}
2021-02-09 16:58:20.467  INFO 14144 --- [http-nio-8080-exec-2] t.y.r.c.admin.AdminBlogController        : 前端blog-----> Blog{id=null, name='7热热', content='4895', description='和符号为
', views=null, published=false, tagIds='null', createTime=Tue Feb 02 15:58:13 CST 2021, updateTime=null, category=category{id=8, name='Web基础'}, comments=[], tags=[Tag{id=6, name='脚本'}]}
2021-02-09 16:58:20.545  INFO 14144 --- [http-nio-8080-exec-2] t.y.r.c.admin.AdminBlogController        : after saveBlog-----> Blog{id=87, name='7热热', content='4895', description='和符号为
', views=null, published=false, tagIds='null', createTime=Tue Feb 02 15:58:13 CST 2021, updateTime=Tue Feb 09 16:58:20 CST 2021, category=category{id=8, name='Web基础'}, comments=[], tags=[Tag{id=6, name='脚本'}]}
2021-02-09 16:59:04.790  INFO 14144 --- [http-nio-8080-exec-9] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 16:59:04.875  INFO 14144 --- [http-nio-8080-exec-9] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=66, name='新标签1'}, Tag{id=67, name='新标签2'}, Tag{id=68, name='新标签3'}, Tag{id=69, name='新标签4'}, Tag{id=70, name='测试'}]}
2021-02-09 16:59:04.979  INFO 14144 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 16:59:04.985  INFO 14144 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=17, name='新分类'}, category{id=18, name='新分类11'}, category{id=19, name='测试相关'}]}
2021-02-09 16:59:09.273  INFO 14144 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 16:59:09.278  INFO 14144 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=66, name='新标签1'}, Tag{id=67, name='新标签2'}, Tag{id=68, name='新标签3'}, Tag{id=69, name='新标签4'}, Tag{id=70, name='测试'}]}
2021-02-09 16:59:09.565  INFO 14144 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 16:59:09.569  INFO 14144 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=17, name='新分类'}, category{id=18, name='新分类11'}, category{id=19, name='测试相关'}]}
2021-02-09 16:59:26.093  INFO 14144 --- [http-nio-8080-exec-5] t.y.r.c.admin.AdminBlogController        : 前端blog-----> Blog{id=null, name='和热海文化文物', content='发', description='到的', views=null, published=false, tagIds='null', createTime=Tue Feb 02 15:59:20 CST 2021, updateTime=null, category=category{id=7, name='Vue初级'}, comments=[], tags=[Tag{id=-1, name='发'}]}
2021-02-09 16:59:26.140  INFO 14144 --- [http-nio-8080-exec-5] t.y.r.c.admin.AdminBlogController        : after saveBlog-----> Blog{id=88, name='和热海文化文物', content='发', description='到的', views=null, published=false, tagIds='null', createTime=Tue Feb 02 15:59:20 CST 2021, updateTime=Tue Feb 09 16:59:26 CST 2021, category=category{id=7, name='Vue初级'}, comments=[], tags=[Tag{id=1, name='发'}]}
2021-02-09 17:22:17.964  INFO 14144 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 17:22:17.964  INFO 14144 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 17:22:18.184  INFO 14144 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=17, name='新分类'}, category{id=18, name='新分类11'}, category{id=19, name='测试相关'}]}
2021-02-09 17:22:18.184  INFO 14144 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=66, name='新标签1'}, Tag{id=67, name='新标签2'}, Tag{id=68, name='新标签3'}, Tag{id=69, name='新标签4'}, Tag{id=70, name='测试'}, Tag{id=71, name='发'}]}
2021-02-09 17:22:33.275  INFO 14144 --- [http-nio-8080-exec-1] t.y.r.c.admin.AdminBlogController        : 前端blog-----> Blog{id=null, name='二和黑', content='    烦烦烦', description='到的', views=null, published=false, tagIds='null', createTime=Tue Feb 02 16:22:25 CST 2021, updateTime=null, category=category{id=4, name='Java'}, comments=[], tags=[Tag{id=6, name='脚本'}]}
2021-02-09 17:22:33.387  INFO 14144 --- [http-nio-8080-exec-1] t.y.r.c.admin.AdminBlogController        : after saveBlog-----> Blog{id=89, name='二和黑', content='    烦烦烦', description='到的', views=null, published=false, tagIds='null', createTime=Tue Feb 02 16:22:25 CST 2021, updateTime=Tue Feb 09 17:22:33 CST 2021, category=category{id=4, name='Java'}, comments=[], tags=[Tag{id=6, name='脚本'}]}
2021-02-09 17:25:04.138  INFO 14144 --- [http-nio-8080-exec-7] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 17:25:04.145  INFO 14144 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 17:25:04.157  INFO 14144 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=17, name='新分类'}, category{id=18, name='新分类11'}, category{id=19, name='测试相关'}]}
2021-02-09 17:25:04.157  INFO 14144 --- [http-nio-8080-exec-7] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=66, name='新标签1'}, Tag{id=67, name='新标签2'}, Tag{id=68, name='新标签3'}, Tag{id=69, name='新标签4'}, Tag{id=70, name='测试'}, Tag{id=71, name='发'}]}
2021-02-09 17:25:39.266  INFO 14144 --- [http-nio-8080-exec-9] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 17:25:39.282  INFO 14144 --- [http-nio-8080-exec-9] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=66, name='新标签1'}, Tag{id=67, name='新标签2'}, Tag{id=68, name='新标签3'}, Tag{id=69, name='新标签4'}, Tag{id=70, name='测试'}, Tag{id=71, name='发'}]}
2021-02-09 17:25:39.571  INFO 14144 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 17:25:39.574  INFO 14144 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=17, name='新分类'}, category{id=18, name='新分类11'}, category{id=19, name='测试相关'}]}
2021-02-09 17:25:48.862  INFO 14144 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 17:25:48.867  INFO 14144 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=17, name='新分类'}, category{id=18, name='新分类11'}, category{id=19, name='测试相关'}]}
2021-02-09 17:25:48.870  INFO 14144 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 17:25:48.875  INFO 14144 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=66, name='新标签1'}, Tag{id=67, name='新标签2'}, Tag{id=68, name='新标签3'}, Tag{id=69, name='新标签4'}, Tag{id=70, name='测试'}, Tag{id=71, name='发'}]}
2021-02-09 17:25:52.624  INFO 14144 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 17:25:52.624  INFO 14144 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 17:25:52.736  INFO 14144 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=17, name='新分类'}, category{id=18, name='新分类11'}, category{id=19, name='测试相关'}]}
2021-02-09 17:25:52.764  INFO 14144 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=66, name='新标签1'}, Tag{id=67, name='新标签2'}, Tag{id=68, name='新标签3'}, Tag{id=69, name='新标签4'}, Tag{id=70, name='测试'}, Tag{id=71, name='发'}]}
2021-02-09 17:25:55.124  INFO 14144 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 17:25:55.145  INFO 14144 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=66, name='新标签1'}, Tag{id=67, name='新标签2'}, Tag{id=68, name='新标签3'}, Tag{id=69, name='新标签4'}, Tag{id=70, name='测试'}, Tag{id=71, name='发'}]}
2021-02-09 17:25:55.426  INFO 14144 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 17:25:55.430  INFO 14144 --- [http-nio-8080-exec-1] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=17, name='新分类'}, category{id=18, name='新分类11'}, category{id=19, name='测试相关'}]}
2021-02-09 17:26:00.700  INFO 14144 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 17:26:00.700  INFO 14144 --- [http-nio-8080-exec-7] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 17:26:00.704  INFO 14144 --- [http-nio-8080-exec-2] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=17, name='新分类'}, category{id=18, name='新分类11'}, category{id=19, name='测试相关'}]}
2021-02-09 17:26:00.774  INFO 14144 --- [http-nio-8080-exec-7] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=66, name='新标签1'}, Tag{id=67, name='新标签2'}, Tag{id=68, name='新标签3'}, Tag{id=69, name='新标签4'}, Tag{id=70, name='测试'}, Tag{id=71, name='发'}]}
2021-02-09 17:26:03.624  INFO 14144 --- [http-nio-8080-exec-9] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 17:26:03.679  INFO 14144 --- [http-nio-8080-exec-9] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=66, name='新标签1'}, Tag{id=67, name='新标签2'}, Tag{id=68, name='新标签3'}, Tag{id=69, name='新标签4'}, Tag{id=70, name='测试'}, Tag{id=71, name='发'}]}
2021-02-09 17:26:03.927  INFO 14144 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 17:26:03.931  INFO 14144 --- [http-nio-8080-exec-10] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=17, name='新分类'}, category{id=18, name='新分类11'}, category{id=19, name='测试相关'}]}
2021-02-09 17:26:48.266  INFO 14144 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/category/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.CategoryController.getAllCategories', args=[]}
2021-02-09 17:26:48.266  INFO 14144 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/tag/all', ip='127.0.0.1', className='top.yalexin.rblog.controller.TagController.getAllTags', args=[]}
2021-02-09 17:26:48.292  INFO 14144 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : result------>{categories=[category{id=4, name='Java'}, category{id=6, name='Linux相关'}, category{id=7, name='Vue初级'}, category{id=8, name='Web基础'}, category{id=9, name='博客'}, category{id=10, name='命令行'}, category{id=11, name='工具'}, category{id=12, name='教程'}, category{id=13, name='算法'}, category{id=14, name='笔记'}, category{id=17, name='新分类'}, category{id=18, name='新分类11'}, category{id=19, name='测试相关'}]}
2021-02-09 17:26:48.385  INFO 14144 --- [http-nio-8080-exec-3] top.yalexin.rblog.apsect.LogAspect       : result------>{tags=[Tag{id=6, name='脚本'}, Tag{id=7, name='效率'}, Tag{id=8, name='教程'}, Tag{id=10, name='C'}, Tag{id=11, name='分享'}, Tag{id=12, name='工具'}, Tag{id=13, name='学习'}, Tag{id=14, name='命令行'}, Tag{id=15, name='HTML基础'}, Tag{id=16, name='CSS基础'}, Tag{id=17, name='JavaScript基础'}, Tag{id=18, name='Vue'}, Tag{id=19, name='动态规划'}, Tag{id=20, name='动态规划'}, Tag{id=21, name='排序'}, Tag{id=22, name='分治'}, Tag{id=23, name='java'}, Tag{id=24, name='并查集'}, Tag{id=25, name='Shell'}, Tag{id=26, name='字符串'}, Tag{id=27, name='进程通信'}, Tag{id=28, name='单例模式'}, Tag{id=29, name='静态代理'}, Tag{id=30, name='动态代理'}, Tag{id=31, name='模板方法'}, Tag{id=32, name='观察者模式'}, Tag{id=33, name='高精度'}, Tag{id=34, name='阶乘'}, Tag{id=35, name='深度优先'}, Tag{id=36, name='递归'}, Tag{id=37, name='BFS'}, Tag{id=38, name='最大流'}, Tag{id=39, name='C语言课程设计'}, Tag{id=40, name='操作系课设'}, Tag{id=41, name='数据库'}, Tag{id=42, name='MySql'}, Tag{id=43, name='Git'}, Tag{id=44, name='SpringBoot'}, Tag{id=45, name='缓存'}, Tag{id=66, name='新标签1'}, Tag{id=67, name='新标签2'}, Tag{id=68, name='新标签3'}, Tag{id=69, name='新标签4'}, Tag{id=70, name='测试'}, Tag{id=71, name='发'}]}
2021-02-09 17:30:48.075  INFO 14144 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/blog/7', ip='0:0:0:0:0:0:0:1', className='top.yalexin.rblog.controller.BlogController.getOneBlog', args=[7]}
2021-02-09 17:30:50.322  INFO 14144 --- [http-nio-8080-exec-8] top.yalexin.rblog.apsect.LogAspect       : result------>null
2021-02-09 17:31:12.428  INFO 14144 --- [http-nio-8080-exec-7] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/blog/all', ip='0:0:0:0:0:0:0:1', className='top.yalexin.rblog.controller.BlogController.getAllBlogs', args=[]}
2021-02-09 17:31:13.089  INFO 14144 --- [http-nio-8080-exec-7] top.yalexin.rblog.apsect.LogAspect       : result------>[Blog{id=8, name='搭建Hexo博客并部署到码云', content='
## 前言

我为什么要搭建博客？说实话我个人记忆力比较差，学过的东西经常会很快忘记，我自己又不爱做笔记，况且假如写在了笔记本上，笔记本又会被我弄丢，所以想到了把学过的东西记在博客上这种方法，但是我又不会web开发，刚好在别的地方了解到有hexo等的开源博客框架，心血来潮，趁着放寒假的时间就搭建了起来。


## 下载安装Node.js

从[官网]( https://nodejs.org/en/ )下载安装，安装完毕后在终端输入

```shell
node -v
```

假如出现版本号则说明安装成功，否则需要手动在系统的环境变量下的Path的值中添加node的安装路径。

## 安装Git

这个步骤应该不难，网上的教程实在是太多太详细了。

## 安装hexo相关文件：

在一个你喜欢的地方，新建一个文件夹，最好这个路径不要包含中文路径，在cmd窗口输入

```shell
npm install hexo-cli -g
```

## 初始化博客文件夹：

```shell
hexo init blog
```

## 进入博客文件夹：

```shell
cd blog
```

 <!-- more --> 

## 安装插件：

```shell
npm install
```

## 新建一篇文章命令：

``` shell
hexo new "My New Post"
```

## 启动服务预览

``` bash
hexo server
```

然后在本地浏览器输入 http://localhost:4000/ ，如果一切顺利，那么就可以出现你的博客了。

## 部署到第三方平台

当然了，我们自己的博客不仅仅是想让自己看，还想着通过网络，让更多的人看到，我们就可以借助第三方平台的page服务来展示我们的静态网站了，你可以通过GitHub，码云，coding等，我这里用来码云。

### 新建仓库

注册好码云后，新建一个仓库，将仓库的地址（可以是HTTPS形式的，也可以是SSH形式的，我的是https）复制，打开博客文件夹下的_config.yml文件（theme/theme_name/下也有一个，不要混淆），将刚刚复制好的地址粘贴到gitee的值，并在后面加上master分支：

```yaml
deploy:
  type: git
  repo:  
    gitee: https://gitee.com/xxxxx/xxxx.git,master
```

### 与远程仓库连接

在刚刚打开的文件夹中打开cmd终端，输入下面命令：

```shell
git config --global user.name空格+你的码云的名字
git config --global user.email空格+你的码云绑定的邮箱

```

### 安装Git部署插件

```shell
npm install hexo-deployer-git --save

```

### 部署

生成静态网页

```shell
hexo g

```

推送到远端

```shell
hexo d

```

接着到码云平台，打开你刚刚建好的仓库，如果仓库里边出现新的东西，说明部署成功了，接着我们依次点击 服务->gite pages -> 开启，然后打开平台给我们的网址，就可以访问我们的博客啦！

后期可以通过更换主题来增加美观度，主题可以在[hexo官网]( https://hexo.io/ )下载，也可以在GitHub下载，下载后在博客目录下的配置文件_config.yml中修改主题的名字

```yaml
## Themes: https://hexo.io/themes/
theme: # your theme name

```


并将你下载的主题文件夹放到博客目录下的themes文件夹中就可以了。

部署完毕，那我们如何编写文章？用普通文本编辑器？用HTML文件编写？其实，最方便的是使用.md文件编写，关于如何使用.md文件，请看[这里](https://yalexin.gitee.io/2020/02/23/markdown语法/) ', description='我为什么要搭建博客？说实话我个人记忆力比较差，学过的东西经常会很快忘记，我自己又不爱做笔记，况且假如写在了笔记本上，笔记本又会被我弄丢，所以想到了把学过的东西记在博客上这种方法，但是我又不会web开发，刚好在别的地方了解到有hexo等的开源博客框架，心血来潮，趁着放寒假的时间就搭建了起来。', views=2, published=true, tagIds='null', createTime=Sat Feb 22 21:51:00 CST 2020, updateTime=Sat Feb 22 21:51:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=9, name='markdown的相关语法', content='## 前言

Markdown是一种可以使用普通文本编辑器编写的[标记语言](https://baike.baidu.com/item/标记语言/5964436)，通过简单的标记语法，它可以使普通文本内容具有一定的格式。

Markdown具有一系列衍生版本，用于扩展Markdown的功能（如表格、脚注、内嵌HTML等等），这些功能原初的Markdown尚不具备，它们能让Markdown转换成更多的格式，例如LaTeX，Docbook。Markdown增强版中比较有名的有Markdown Extra、MultiMarkdown、 Maruku等。这些衍生版本要么基于工具，如Pandoc；要么基于网站，如GitHub和Wikipedia，在语法上基本兼容，但在一些语法和渲染效果上有改动。

Markdown文件后期可以转换成html文件，所以在md文件中直接使用html语言也是可以的

## 语法介绍

### 1.标题（注意，许多地方一定不要忘了加空格）

标题的格式为 “#”+空格+标题名，其中“#”的个数代表这是几级标题，但是最多只能有6级标题

 <!-- more --> 

```
# 一级标题
### 三级标题
###### 六级标题
####### 这是一个错误的写法
```

上面的代码等效于

# 一级标题

### 三级标题

###### 六级标题

####### 这是一个错误的写法

---


### 2.字体

- 斜体：在欲显示斜体内容的两头加“*”
- 加粗：在欲显示加粗内容的两头加“**”
- 粗斜体：在欲显示粗斜体内容的两头加“***”

```
*这是斜体*
**这是粗体**
***这是粗斜体***
```

上面的代码等效于

*这是斜体*
**这是粗体**
***这是粗斜体***

- 进阶使用

  指定字体：

  	<font face="黑体">黑体字</font>
  	<font face="STCAIYUN">我是华文彩云</font>

  指定大小：

  ```
  <font size=20>大小=20</font>
  ```

  指定颜色：

  ```
  <font color=#ff0000>红色</font>
  ```


### 3.列表

- 无序列表
  “-”+空格+项目名

  ```
  - 项目一
  - 项目二
  ```

- 有序列表
  数字+“.”+空格+项目名

  ```
  1. 项目三
  2. 项目四
  ```

  上面代码等效于

  - 项目一
  - 项目二

  1. 项目三

  2. 项目四

### 4.表格

第一行是用“|”分开的表头
第二行是每一列的对齐方式，“:”在“-”的左边是左对齐，在右边是右对齐，没有“:”则默认是左对齐
第三行开始每一单元格用“|”分开

```
|上午|下午|晚上|
|:-|:-:|-:|
|写BUG(左对齐)|查BUG(居中对齐)|改BUG(右对齐)|
| 写BUG(左对齐) | 查BUG(居中对齐) | 改BUG(右对齐) |
```

上面的代码等价于

| 上午          |      下午       |          晚上 |
| :------------ | :-------------: | ------------: |
| 写BUG(左对齐) | 查BUG(居中对齐) | 改BUG(右对齐) |
| 写BUG(左对齐) | 查BUG(居中对齐) | 改BUG(右对齐) |

### 5.超链接

超链接的格式为：[描述]+(url)

```
[这是一个超链接](http://ruixin_huang.gitee.io/mblog/)
```

上面的代码等价于
[这是一个超链接](https://yalexin.gitee.io)

### 6.图片

可以这样子引用

```
![这是一张网络图片](https://tse3-mm.cn.bing.net/th/id/OIP.UZQDK3pvdgKAoHoUVhyAhgHaDt?w=299&h=149&c=7&o=5&pid=1.7 "网络图片")
```

上面代码等效于
![这是一张网络图片，随着时间流逝链接有可能失效](https://tse3-mm.cn.bing.net/th/id/OIP.UZQDK3pvdgKAoHoUVhyAhgHaDt?w=299&h=149&c=7&o=5&pid=1.7)
当然了，如果我们想要修改图片属性也是可以的，不过是要写成html格式的
如

```
<img src="https://tse3-mm.cn.bing.net/th/id/OIP.UZQDK3pvdgKAoHoUVhyAhgHaDt?w=299&h=149&c=7&o=5&pid=1.7 " width=500/>
```

上面的代码等价于
<img src="https://tse3-mm.cn.bing.net/th/id/OIP.UZQDK3pvdgKAoHoUVhyAhgHaDt?w=299&h=149&c=7&o=5&pid=1.7 " width=500/>
在hexo中，我们可以利用下面的方法显示本地图片

1. 在博客根目录下的_config.yml文件中，把post_asset_folder属性改为true，这样子我们每次用new指令新建文章的时候，hexo就会自动在文章所在目录下生成一个与文章同名的文件夹，我们只需要在该文件夹下放置我们所需要显示的图片资源文件

2. 在需要显示图片的地方输入以下代码

```
   {% asset_img 图片名加文件后缀 图片描述(可省) %}
```

如

```
{% asset_img 317325.jpg 这是一张本地图片文件 %}
```



### 7.代码块

代码的格式是用三个反引号将代码包起来，并且这三个反引号要分别独占一行
如：

```c
(```)
printf("这是一段没有BUG的代码");
(```)
```

上面代码等效于

```c
printf("这是一段没有BUG的代码");
```

### 8.分割线

用三个或者三个以上的“-”或者“*”都可以

```
---
***
```

---

***', description='Markdown是一种可以使用普通文本编辑器编写的[标记语言](https://baike.baidu.com/item/标记语言/5964436)，通过简单的标记语法，它可以使普通文本内容具有一定的格式。

Markdown具有一系列衍生版本，用于扩展Markdown的功能（如表格、脚注、内嵌HTML等等），这些功能原初的Markdown尚不具备，它们能让Markdown转换成更多的格式，例如LaTeX，Docbook。Markdown增强版中比较有名的有Markdown Extra、MultiMarkd', views=0, published=true, tagIds='null', createTime=Sun Feb 23 12:30:00 CST 2020, updateTime=Sun Feb 23 12:30:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=10, name='小工具分享', content='
## windows端

#### - BandicamPortable

这是一款号称是录制游戏视频的录屏软件，但是它的功能不仅仅与录制视频，只要是需要录制视频的地方，它都可以胜任，软件提供五种录制模式。这款工具具有的这几个功能让我觉得它非常友好:
![](https://q.yalexin.top/TIM%E6%88%AA%E5%9B%BE20200223184319.png)

1. 可以设置鼠标效果；许多人录制视频的时候都知道，要是自己的显示器比较大，光标就会显得很小，我们的鼠标的轨迹就会不明显，这款软件恰好可以解决这个问题。
   ![](http://q.yalexin.top/TIM%E6%88%AA%E5%9B%BE20200223184810.png)
2. 实时笔记；在我们录制的过程当中，我们可以用鼠标进行写字，也可以输入文字。
   ![](http://q.yalexin.top/TIM%E6%88%AA%E5%9B%BE20200223195959.png)
3. 游戏录制模式；如果我们选了该模式，那么我们可以在视频的适当位置显示实时帧率FPS，对于轻度游戏评测者比较方便。
   ![](http://q.yalexin.top/TIM%E6%88%AA%E5%9B%BE20200223193217.png)
   这个软件可以配合另一个小工具来使用：KeyCastOW，它可以实时监听键盘和鼠标的触发变化，并在屏幕上显示，对于一些游戏教程者，比如QQ飞车漂移教程者来说非常友好
   ![](http://q.yalexin.top/TIM%E6%88%AA%E5%9B%BE20200223200552.png)
   [这是BandicamPortable的官网]( https://www.bandicam.cn/ )  
   [也可以点我下载](bdcamsetup.exe)
   [KeyCastOW下载](KeyCastOW_jb51.rar)

#### - TrafficMonitor

这是一个实时显示系统信息的工具，能显示cpu和内存的使用以及上传下载的状态，对于我这种总是忍不住要看网速和内存使用状态的强迫症来说简直不要太爽

![](http://q.yalexin.top/TIM%E6%88%AA%E5%9B%BE20200223194705.png)
[点我下载](TrafficMonitor.rar)

#### - memreduct

这是一款监控内存的工具，和TrafficMonitor不同的是，memreduct可以进行内存清理，我们可以手动清理加速，也可以设置阈值，当使用内存超过一定时自动清理内存，或者设定每隔一定的时间就清理
![](http://q.yalexin.top/TIM%E6%88%AA%E5%9B%BE20200223195151.png)
[点我下载](memreduct.rar)

## 安卓端

#### - Via浏览器

一款极其简约的浏览器，是我目前遇到的最简约的浏览器了，而且很轻量，体积不足1MB，但是浏览器该有的功能都有了，支持的插件和脚本也很多，还有一套完美的广告拦截系统
![](http://q.yalexin.top/C545427C9BA0FD672C6613D78A453B19.jpg)
这是它的 [插件网](http://via-app.cn/#/tabBar/home)
![](http://q.yalexin.top/EEC02EAC3A94AC48D266FF52C217D5DD.jpg)
[Via官网](http://viayoo.com/zh-cn/)
也可以[点此下载](Via.apk)
    

#### - Dir

这是一款垃圾清理的工具，真就是除了清理垃圾就没有其他臃肿的功能了
![](http://q.yalexin.top/4888C591C6EB238D6CA5A29EC99B5957.jpg)
好吧，原来是我没有看清除（qiong），高级版的功能还是相当不错的，可以有效防止国内一些流氓软件了，不过该功能要谨慎使用，否则误删了系统文件而且导致系统崩溃
![](http://q.yalexin.top/3AB2908779F1FBAE43E5B3B7B938DD68.jpg)
这是Google Play [链接](https://play.google.com/store/apps/details?id=kh.android.dir)
也可以[点此下载](Dir.apk)

#### - Snapmod

这是一款把截图带上手机边框的软件,原理就是将截图按照一定的比例进行缩放,也正因为如此,安装应用后第一件事就是下载自己手机对应的机型
![](http://q.yalexin.top/1A5A0DBD71AABBFFB7F1A49D81126DAA.jpg)
如果找不到的话就以自己的手机屏幕分辨率为基础,按照自己的爱好选择现有的机型下载,不过现在适配的机型也挺多的
{% asset_img 0377AFF02DAA787A7579289E2A11626F.jpg  %}
** 不过要注意,假如强行选用非自己手机分辨率的机型,会造成图片变形 **
这是Snapmod的[酷安链接]( https://coolapk.com/apk/cn.gavinliu.snapmod )
也可以[点此下载](Snapmod.apk)

#### - 网速指示计

不过说实话这款应用对于华为、小米、OPPO、VIVO等手机可能不太适用,因为这些手机厂商的系统基于Android系统上都自带实时网速的功能,所以这款应用适用于运行原生安卓或者自身系统不带网速显示的手机
![](http://q.yalexin.top/0377AFF02DAA787A7579289E2A11626F.jpg)
这是Google Play [链接](https://play.google.com/store/apps/details?id=me.zheteng.android.powerstatus)
也可以[点此下载](网速指示计.apk)', description='这是一款号称是录制游戏视频的录屏软件，但是它的功能不仅仅与录制视频，只要是需要录制视频的地方，它都可以胜任，软件提供五种录制模式。这款工具具有的这几个功能让我觉得它非常友好:', views=0, published=true, tagIds='null', createTime=Sun Feb 23 18:30:00 CST 2020, updateTime=Sun Feb 23 18:30:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=11, name='linux常用命令', content='
> 本文篇幅较大，下面是目录
> [Bash快捷键](#Bash快捷键)
> [文件及目录操作命令](#文件及目录操作命令)
> [权限相关命令](#权限相关命令)
> [重定向相关与管道命令](#重定向与管道命令)
> [挂载文件系统](#挂载文件系统)
> [磁盘管理](#磁盘管理)

## Bash快捷键

删除光标到行首的所有字符：

```
Ctl + U 
```

删除当前光标到前边的最近一个空格之间的字符

```
Ctl + W   
```

## 文件及目录操作命令

### 显示当前所在目录 (绝对路径)

  ```shell
  $ pwd
  ```

### 进入某个目录

  ```shell
  $ cd [path]
  ```

  若path缺省，则会进入到用户主目录

### 列出当前目录下所有的文件

  ```shell
  $ ls [选项] [目录或者文件]
  ```

  **说明** 对于目录，该命令列出其中所有的子目录和文件，缺省情况下是指向当前目录；对于文件，该命令列出文件名及其相关的文件属性信息。该命令常用选项如下表所示。

<a name="权限相关命令1"></a>

<!--more--->



| **常用选项** | **含义**                                                   |
| ------------ | ---------------------------------------------------------- |
| -a           | All。列出目录中全部文件，包含隐藏文件、父目录和当前目录。  |
| - l          | long。列出目录内容的细节，包括权限、所有者、组群、大小等。 |
| -F           | File type。在每一个列举项目后添加符号表明其类型。          |
| -R           | 递归列举当前目录下所有目录的内容。                         |
| -S           | Size。按文件大小排序。                                     |

### 显示文本文件

  ```shell
  $ cat fileName
  ```

  **注意** fileName需要包含路径，若不指明，则认为是当前目录,若要显示行数，添加-n选项即可。

```shell
$ cat fileName -n
```

查看前5行

```shell
$ head -5 fileName
```

查看后5行

```shell
$ tail -5 filename

```

查看两个文件之间的差异

```shell
$ diff filename1 filename2

```

### 文件或目录的复制

  ```shell
  $ cp [选项] 源文件或目录 目标目录

  ```

  若指定多个源文件或者目录复制到目标目录，则源文件或源目录之间用空格分隔，常用选项若下表

| **常用选项** | **含义**                                           |
| ------------ | -------------------------------------------------- |
| -a           | 在备份中尽可能多的保持源文件的结构和属性。         |
| - f          | 覆盖已经存在的目标文件而不加以提示。               |
| - i          | 在覆盖目标文件前给出提示并要求用户确认。           |
| -r           | 若源文件为目录，递归复制该目录下所有子目录和文件。 |

### 文件或目录的移动（重命名）

  ```shell
  $ mv 源文件或者目录 目标文件或目录

  ```

  当目标目录不存在时，则将源文件或目录重命名；若需要将多个文件夹或者文件移到源文件，可用下面的命令

  ```shell
  $ mv 文件1 文件2 文件3 ... -t 目标文件夹

  ```

### 建立新目录

  ```shell
  $ mkdir [选项] 目录名

  ```

  该命令需要用户拥有写的权利

### 删除文件或者目录

  ```shell
  $ rm [选项] 文件或者目录

  ```

  若需要删除多个文件或者文件夹，则文件或文件夹之间用空格隔开

  常用的选项如下

| **常用选项** | **含义**                                           |
| ------------ | -------------------------------------------------- |
| -f           | 不给出提示，强行删除。                             |
| - r          | 删除文件列表中指定的目录，若无此标志则不删除目录。 |
| - i          | 提示是否删除。                                     |
| -R           | 递归删除目录，删除整个目录及其所有子目录。         |

### 文件查找

按照名字搜索

```shell
$ find . -name "*.txt" # 在当前目录下查找所有txt文件

```

也可以查找所有非`.txt`文件。

```shell
$ find . ! -name "*.txt"

```

按照条件

| 值       | 说明                                 |
| -------- | ------------------------------------ |
| -atime   | 访问时间，单位是天                   |
| -amin    | 访问时间，单位是分钟                 |
| -mtime   | 修改时间 ，单位是天（内容发生变动)   |
| -mmin    | 修改时间 ，单位是分钟（内容发生变动) |
| -size -n | 大小小于n个字节的文件                |
| -size +n | 大小大于n个字节的文件                |
| -perm    | 按照权限                             |
| -user    | 按用户                               |

```shell
$ find . -amin -5 -type f # 最近5分钟访问的文件 

```

```shell
$ find . -type f -size -1k  # 查找低于1kb的文件

```

```shell
$ find . -type f -perm 644 # 查找权限是644的文件， 权限的知识在下面

```

```shell
$ find . -type f -user yalexin # 查找yalexin用户拥有的文件

```

### grep文本搜索

语法：

```shell
grep match_patten  [参数] fileName

```

| 参数 | 说明                                                         |
| ---- | ------------------------------------------------------------ |
| -o   | 只输出匹配的文本，如在`1,txt`中寻找`test`：`grep "test" -o 1.txt` |
| -v   | 只输出没有匹配的文本                                         |
| -c   | 统计匹配的字段在文本中出现的次数。如在`1,txt`中寻找`a`的个数：`grep "a" -c 1.txt` |
| -n   | 打印匹配的行号                                               |
| -i   | 忽略大小写，如在`1,txt`中寻找`a`或者`A`：`grep "a" -i 1.txt` |

### sort排序

| 参数 | 说明             |
| ---- | ---------------- |
| -n   | 按数字进行排序   |
| -d   | 按字典序进行排序 |
| -r   | 逆序排序         |
| -k n | 指定按第N列排序  |

例如，将`1.txt`文件中的第一列按照数字，以行为单位逆序排列：

```shell
$ sort -nrk 1 1.txt

```

### uniq 消除重复行

不重复显示`1.txt`的内容：

```shell
$ cat 1.txt | uniq

```

统计文本中各行出现的次数：

```shell
$ cat 1.txt | uniq -c

```

找出重复行：

```shell
$ cat 1.txt | uniq -d

```

### cut切割文本

`cut` 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段写至标准输出。

`cut`可以将文件作为数据源,也可以通过管道的方式指定数据源地方

语法:

```shell
$ cut 参数 数据

```

主要参数:

| 参数 | 说明                       |
| ---- | -------------------------- |
| -b   | 按字节为单位切割           |
| -c   | 按字符为单位切割           |
| -d   | 自定义分隔符，默认为制表符 |
| -f   | 制定切割的区间             |
| -n   | 取消分割多字节字符         |

例如：`ls -l | cut -c 1-10`可以显示出当前文件夹下所有文件和文件夹的权限。

特别要注意一下，假如我们想要用`-b`提取每一行的中文时，要注意，在`utf-8`的编码下一个汉字占用3个字节，如果开始和结束位置没有定位正确，切割的结果将会有乱码现象。

### paste拼接文本

将两个文本文件的内容拼接。

例如：文件一内容：

```
1
2
3
4

```

文件二内容：

```
文字一
文字二
文字三
文字四

```

```shell
$ paste test1.txt test2.txt
1	文字一
2	文字二
3	文字三
4	文字四

```

默认是以制表符（Tab）为定界符，可以利用`-d`制定定界符，如以空格：`paste test1.txt test2.txt -d " "`

### wc统计工具

统计行数：

```shell
$ wc -l fileName

```

统计单词数

```shell
$ wc -w fileName

```

统计字符数：

```shell
$ wc -c fileName

```

### sed文本替换

将第一个匹配的内容替换：

```shell
$ sed 's/原内容/新内容/' fileName

```

全局替换：

```shell
$ sed 's/原内容/新内容/g' fileName

```

默认情况下是显示替换后的内容，对原文件不修改，假如想要修改原文件，加上`-i`

```shell
$ sed 's/原内容/新内容/g' fileName -i

```

或者将修改后的内容放到新文件中：

```shell
$ sed 's/原内容/新内容/g' fileName > newFileName

```

## 权限相关命令

**权限的含义**：Linux系统中的每个文件和目录都有相应的访问许可权限，访问权限分为只读（r），可写（w）和可执行（x）三种。有三种不同类型的用户可对文件或目录进行访问，分别是文件所有者（u），同组用户（g）和其他用户（o）。所有的文件和目录都被创建它们的人所“拥有”，只要你是这个文件的所有者或你登录为根用户，你就拥有了改变所有者、组群和其他人权限的权利。

### 查看当前文件夹下的文件夹或者文件的权限

  ```shell
  $ ls -l

  ```

  {% asset_img 1.png %}

  第一个是说明是文件（-）还是文件夹（d），然后是9个字符，每三个一组，表明了权限属性，分别是所有者、所属组、其他人拥有的权限，

### 使用文字设定法改变权限

  ```shell
  $ chmod [用户身份] [操作符][mode] 文件名 [-R]

  ```

  可改变用户或同组用户或其它用户对指定文件名的存取权限，在文字设定法中，chmod命令各选项含义如下表

|          | **符号** | **含义**                         |
| -------- | -------- | -------------------------------- |
| 用户身份 | u        | user,表示文件或目录的所有者。    |
| 用户身份 | g        | group，表示与文件主同组的用户。  |
| 用户身份 | o        | other，表示其他用户。            |
| 用户身份 | a        | all，表示所有用户。              |
| 操作符   | ＋       | 增添权限                         |
| 操作符   | －       | 删除权限                         |
| 操作符   | ＝       | 赋予给定权限并取消其它所有权限。 |
| 权限     | r        | 读取权                           |
| 权限     | w        | 写入权                           |
| 权限     | x        |                                  |
|          | -R       | 递归修改子目录及文件             |

  如给所有者添加执行权限

  ```shell
  $ chmod u+x 45

  ```

  {% asset_img 2.png %}

  也可以给多个用户修改权限

  ```shell
  $ chmod u+x,g+w 文件名

  ```

### 使用数字法改变权限

  首先说明w、x、r、的权值如下

  r ---------- 4

  w --------- 2

  x ---------- 1

  因此一组权限的组合可以由下表所示

| 数字和 | 权限组合 |
| ------ | -------- |
| 0      | ---      |
| 1      | --x      |
| 2      | -w-      |
| 3      | -wx      |
| 4      | r--      |
| 5      | r-x      |
| 6      | rw-      |
| 7      | rwx      |

  例如我们想给某个文件或文件夹的权限改成rwxr-x-w-，就可以用命令

  ```shell
  $ chmod 752 文件名或者文件夹名

  ```

  如果熟记上面的对应关系，就可以很方便地修改权限了。

## 重定向与管道命令

Linux默认的标准输入（stdin）是键盘，标准输出（stdout）是显示器。如果需要从非标准输入输出设备进行输入或输出，则需要通过输入输出重定向。

### 输入重定向

如：命令 < 文件名

将命令（或可执行程序）的标准输入重定向到指定的文件中。

例如：

```shell
$ cat < /etc.txt1

```

表示将/etc.txt1的文件内容作为cat命令的输入，显示到屏幕。

### 输出重定向

如：命令 > 文件名

 将命令（或可执行程序）的标准输出或标准错误输出重定向到指定文件中。

例如

```shell
$ ls  /etc > /test1/etc.txt 

```

表示将/etc目录下的文件列表输出到文件/text1/etc.txt中。

### 追加重定向

如：  命令 >> 文件名

表示将一条命令（或可执行程序）的输出结果追加到指定文件的后面。

### 管道

如： 命令 | 命令

表示将一个命令（或程序）的输出作为另一个命令（或程序）的输入。

## 挂载文件系统

### fdisk命令

fdisk命令用于观察硬盘实体使用情况，也可对硬盘分区。它采用传统的问答式界面，而非类似DOS fdisk的cfdisk互动式操作界面，因此在使用上较为不便，但功能却丝毫不打折扣。

```shell
$ fdisk(选项)(参数)

```

| 选项         | 功能说明                                                     |
| ------------ | ------------------------------------------------------------ |
| -b<分区大小> | 指定每个分区的大小                                           |
| -l           | 列出指定的外围设备的分区表状况                               |
| -s<分区编号> | 将指定的分区大小输出到标准输出上，单位为区块                 |
| -u           | 搭配"-l"参数列表，会用分区数目取代柱面数目，来表示每个分区的起始地址 |
| -v           | 显示版本信息                                                 |

参数：指定要进行分区或者显示分区的硬盘设备文件。

### 挂载命令

命令如下：

```shell
$ mount [选项] 设备 存放目录

```

该命令可以将Linux支持的文件系统挂载到指定的目录。常用选项如下表所示：

| 常用选项 | 含义                                            |
| -------- | ----------------------------------------------- |
| -a       | 挂上/etc/fstab下列出的全部文件系统              |
| -t       | 指定挂上的文件系统的名称                        |
| -n       | 挂上文件系统时不把文件系统的数据写入/etc/mtab中 |
| -w       | 将文件系统设定为可读写                          |


### 挂载软盘

命令如下：

```shell
$ mount  /dev/fd0  /mnt/floppy

```

事先在/mnt/目录下建立floppy目录，之后将设备号为fd0的软盘挂载到该目录。

### 挂载U盘

命令如下：

```shell
$ mount  /dev/sda1  /mnt/usb

```

在/mnt/目录下建立usb目录，将设备号为sda1的U盘挂载到该目录。

### 挂载光盘

命令如下：

```shell
$ mount  /dev/cdrom  /mnt/cdrom 

```

在/mnt/目录下建立cdrom目录，将设备名为cdrom的光盘挂载到该目录。

### 卸载命令

命令如下：

```shell
$ umount 设备

```

该命令可将已经挂载的指定设备进行卸载。某些设备，如光盘，若不卸载将无法取出。

## 磁盘管理

### 查看磁盘空间

查看磁盘大小和利用率：

```shell
$ df -h

```

`-h`是以易读的方向显现，自动更改单位，即GB/MB/KB，不加该选项则以B为单位显示。

查看当前目录占用空间大小：

```shell
$ du -sh

```

`-s`是递归整个目录大小

查看当前文件夹下各个文件的大小：

```shell
$ du -sh *

```

### 打包和压缩

 打包是指将几个文件或目录变成一个总的文件，压缩则是将一个大的文件通过一些压缩算法变成一个小文件。 

- 打包

  | 参数 | 说明                 |
  | ---- | -------------------- |
  | -c   | 产生新的包           |
  | -f   | 指定包的文件名       |
  | -r   | 指定新文件加入到包中 |
  | -t   | 列出包中文件         |
  | -u   | 更新包中某个文件     |
  | -v   | 显示进度             |

  例如：打包当前文件夹下所有的`txt`文件并显示进度：

  ```shell
  $ tar -cvf new.tar *.txt
  
  ```

- 压缩：

  ```shell
  $ gzip new.tar
  
  ```

  将会生成`new.tar.gz`的文件。

也可以一条命令将文件打包并压缩：

  ```shell
  $ tar -cvzf one.tar.gz *.txt

  ```

  `-z`是调用` gzip `

### 解压缩和解包

- 解压缩

  ```shell
  $ gunzip one.tar.gz
  
  ```

- 解包

  ```shell
  $ tar -xf one.tar
  
  ```

这里同样支持一条命令将压缩包解压并解包：

```shell
$ tar -xzf one.tar.gz

```

除了`gzip`，还可以用`bz2`。用法如下：

| 类型  | 调用方式 | 对应压缩包文件 |
| ----- | -------- | -------------- |
| gzip  | -z       | .gz            |
| bzip2 | -j       | .bz2           |

', description='> 本文篇幅较大，下面是目录
> [Bash快捷键](#Bash快捷键)
> [文件及目录操作命令](#文件及目录操作命令)
> [权限相关命令](#权限相关命令)
> [重定向相关与管道命令](#重定向与管道命令)
> [挂载文件系统](#挂载文件系统)
> [磁盘管理](#磁盘管理)
', views=5, published=true, tagIds='null', createTime=Tue Feb 25 22:30:00 CST 2020, updateTime=Thu Aug 06 07:07:45 CST 2020, category=null, comments=[], tags=[]}, Blog{id=12, name='如何编写部署新文章命令脚本', content='
## 前言

一般而言，写好的Markdown文章应该放到博客目录的source\_posts文件夹下，然后使用命令hexo g -d或者是hexo d -g进行部署。我在使用hexo的时候，我的hexo所有文件还关联着码云上的仓库，我习惯于发表新文章后把hexo的所有文件都更新到码云远端仓库。按以前那种方式，我首先需要在博客目录中用命令部署最新的文章，然后再使用git add .等命令将本地所有文件推送到远端。老实说，我承认自己是个懒人，所以就想到了用批处理文件bat实现我的懒人梦，在那之前我们先了解一下bat。


## bat的简单介绍

.bat文件有点类似于linux系统下的shell脚本文件.sh， 下面是bat的简单用法，更多关于bat脚本的详细介绍可以查看[这里](https://baike.baidu.com/item/BAT/365230)。 

|          语法           |                             解释                             |
| :---------------------: | :----------------------------------------------------------: |
|          echo           |   表示打印该命令后的字符，如echo hello执行后会打印“hello”    |
|        echo off         | 表示在此语句后所有运行的命令都不显示命令本身 ，但本身会显示  |
|            @            | 与echo off相象，但它是加在每个命令行的最前面，表示运行时不显示这一行的命令行（只能影响当前行） |
|        @echo off        |       组合上两个语法，表示不显示后续执行命令及当前命令       |
|    dir c:*.* >a.txt     |                    将c盘文件列表写入a.txt                    |
|          call           | 用于调用另一个批处理命令或文件（如果不用call而直接调用别的批处理文件，那么执行完那个批处理文件后将无法返回当前文件并执行当前文件的后续命令） |
| call c:\ucdos\ucdos.bat |                      调用ucdos.bat脚本                       |
|          pause          | 暂停批处理的执行并在屏幕上显示Press any key to continue...的提示，等待用户按任意键后继续 |
|           rem           |                  用于注释，也可以用 ::代替                   |
|          start          |                调起另外一个窗口执行当前行命令                |

## 编写部署脚本

```shell
D:
cd D:\private\blog
call hexo clean
call hexo g
call hexo d&&cd ..&&git add .&&git commit -m %1&&git push&&cd blog
```

将上述命令保存为xxx.bat

关于call的用法上面表格有说明，这里还有几个“&&”，这个操作符是当“&&”前面的运行成功后后面的才运行，而“%1”是指向bat文件中传递参数中的第一个（第0个是命令本身），更多的bat传递参数方法可以参照[这篇文章]( https://blog.csdn.net/yunnying/article/details/12010779 ),然后就可以在.bat文件所在的文件夹中打开cmd窗口或者shell（鼠标右键+shift）窗口，键入

```shell
xxx "提交备注"
```

就可以实现一键部署新文章且更新远程代码仓库啦！当然了如果脚本中不需要传递参数，则只需双击xxx.bat打开就可以了。', description='一般而言，写好的Markdown文章应该放到博客目录的source\_posts文件夹下，然后使用命令hexo g -d或者是hexo d -g进行部署。我在使用hexo的时候，我的hexo所有文件还关联着码云上的仓库，我习惯于发表新文章后把hexo的所有文件都更新到码云远端仓库。按以前那种方式，我首先需要在博客目录中用命令部署最新的文章，然后再使用git add .等命令将本地所有文件推送到远端。老实说，我承认自己是个懒人，所以就想到了用批处理文件bat实现我的懒人梦，在那之前我们先了解一下bat。', views=1, published=true, tagIds='null', createTime=Wed Mar 04 12:00:00 CST 2020, updateTime=Wed Mar 04 12:00:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=13, name='vs code（Windows）配置C环境', content='
## 前言

在前端开发中，有一个非常好用的工具，Visual Studio Code，简称VS code。  它是微软出的一款轻量级代码编辑器，免费而且功能强大，对JavaScript和NodeJS的支持非常好，自带很多功能，例如代码格式化，代码智能提示补全、Emmet插件等。 无数个大言不惭的攻城狮，都被VS code比德芙还丝滑的强大功能所折服。 本篇文章主要是介绍如何配置Windows系统下C环境的配置，C++的配置类似，这里就不再重复。



## 1.下载vs code

这里给出[官网链接]( https://code.visualstudio.com/ )

## 2.下载mingw

这里给出[官网链接](http://mingw.org/)，如果官网下载太慢，也可以[点此下载](i686-8.1.0-release-posix-dwarf-rt_v6-rev0.7z)，然后解压到自己喜欢的地方，但最好路径中不要含有中文。

## 3.下载插件

- cpptools

  下载不了的可以从这里下载[离线包]( http://q78fmp2j4.bkt.clouddn.com/cpptools-win32.vsix )，在vs code中选择“从VSIX安装”即可

- Chinese (Simplified) Language（可选）

- Bracket Pair Colorizer（可选）

![](http://q.yalexin.top/TIM%E6%88%AA%E5%9B%BE20200307102836.png)

## 4.配置环境

1. 新建测试文件test.c

   ```c
   /*
    * @Description: 
    * @Author: Yale_Xin
    * @Date: 2020-03-07 10:31:47
    * @LastEditTime: 2020-03-07 10:31:47
    * @LastEditors: Yale_Xin
    */
   #include<stdio.h>
   int main(){
       printf("hello world");
       return 0;
   }
   ```

1. 配置launch.json

   编写完毕上面的代码，然后按下F5，弹出选择环境

![](http://q.yalexin.top/TIM%E6%88%AA%E5%9B%BE20200307103653.png)

   这里选择第一个，然后选择默认配置

   ![](http://q.yalexin.top/TIM%E6%88%AA%E5%9B%BE20200307103911.png)

   系统就会自动为我们自动生成launch.json，接着把下面的代码粘贴覆盖进去即可：

   ```js
   {
       "version": "0.2.0",
       "configurations": [
           {
               "name": "C++ Launch (GDB)",                 // 配置名称，将会在启动配置的下拉菜单中显示
               "type": "cppdbg",                           // 配置类型，这里只能为cppdbg
               "request": "launch",                        // 请求配置类型，可以为launch（启动）或attach（附加）
               "launchOptionType": "Local",                // 调试器启动类型，这里只能为Local
               "targetArchitecture": "x86",                // 生成目标架构，一般为x86或x64，可以为x86, arm, arm64, mips, x64, amd64, x86_64
               "program":   "${fileDirname}/${fileBasenameNoExtension}.exe",                   // 将要进行调试的程序的路径
               "miDebuggerPath":"D:/mingw32/bin/gdb.exe", // ******************miDebugger的路径，注意这里要与MinGw的路径对应
               "args": [],     // 程序调试时传递给程序的命令行参数，一般设为空即可
               "stopAtEntry": false,                       // 设为true时程序将暂停在程序入口处，一般设置为false
               "cwd": "${workspaceRoot}",                  // 调试程序时的工作目录，一般为${workspaceRoot}即代码所在目录
               "externalConsole": true,                    // 调试时是否显示控制台窗口，一般设置为true显示控制台
               "preLaunchTask": "gcc"　　                  // *********调试会话开始前执行的任务，一般为编译程序，c++为g++, c为gcc
           }
       ]
   }
   
   ```

   **接着将miDebuggerPath的值改为你的MinGw路径。**

1. 配置tasks.json

   回到test.c，按下F5，你会发现还是不能编译运行我们的程序，别急，我们还需要配置tasks.json，

   点击弹出来的信息框中的“配置任务”

![](http://q.yalexin.top/TIM%E6%88%AA%E5%9B%BE20200307104828.png)

   选择“使用模板”

   ![](http://q.yalexin.top/TIM%E6%88%AA%E5%9B%BE20200307104850.png)

   选择第一个

![](http://q.yalexin.top/TIM%E6%88%AA%E5%9B%BE20200307104917.png)

   然后在生成的tasks中粘贴覆盖下面的代码即可

   ```json
   {
       "version": "2.0.0",
       "tasks": [
           {
               "label": "gcc",
               "command": "gcc",
               "args": [
                   "${file}",
                   "-o",
                   "${fileDirname}/${fileBasenameNoExtension}.exe",
                   "-g",
               ],
               "type": "shell",
               "group": {
                   "kind": "build",
                   "isDefault": true
               },
               "presentation": {
                   "echo": true,
                   "reveal": "always",
                   "focus": false,
                   "panel": "shared"
               }
           },
           {
               "type": "shell",
               "label": "gcc.exe build active file",
               "command": "D:\\mingw32\\bin\\gcc.exe",//**********这里要改你的路径
               "args": [
                   "-g",
                   "${file}",
                   "-o",
                   "${fileDirname}\\${fileBasenameNoExtension}.exe"
               ],
               "options": {
                   "cwd": "D:\\mingw32\\bin"//**********这里要改你的路径
               },
               "problemMatcher": [
                   "$gcc"
               ],
               "group": "build"
           }
       ]
   }
   ```

   **接着将代码中注释部分相应地改为你的路径即可。**

## 5.成功！

然后你再测试你的test.c，发现可以成功了，但是命令窗口一闪而过，解决的办法是在return语句之前加

```c
system("pause");
```

我更推荐使用断点功能来完成

![](http://q.yalexin.top/TIM%E6%88%AA%E5%9B%BE20200307112034.png)', description='在前端开发中，有一个非常好用的工具，Visual Studio Code，简称VS code。  它是微软出的一款轻量级代码编辑器，免费而且功能强大，对JavaScript和NodeJS的支持非常好，自带很多功能，例如代码格式化，代码智能提示补全、Emmet插件等。 无数个大言不惭的攻城狮，都被VS code比德芙还丝滑的强大功能所折服。 本篇文章主要是介绍如何配置Windows系统下C环境的配置，C++的配置类似，这里就不再重复。', views=0, published=true, tagIds='null', createTime=Sat Mar 07 10:03:00 CST 2020, updateTime=Sat Mar 07 10:03:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=14, name='html语法一', content='

## 最简单的meno

```html
<!DOCTYPE html>
<html lang="en"><!-- 文档中html开始的部分 -->
    <head> <!-- 提供有关文档内容和标注信息 -->
        <meta charset="UTF-8"><!-- 编码 -->
        <title>title</title>
    </head>
    <body>
        hello world
    </body>
</html><!-- 文档中html的结束 -->
```


HTML常用的标签分为：行标签和块标签：

- 行标签： 在一行内显示、不可以进行宽高的数值设定； 
- 块标签： 独自占领一行、可以进行宽高的数值的设定； 

先介绍行标签

## 行标签

### 超链接标签

```html
<a href="https://yalexin.gitee.io/">博客链接</a><!-- URL外部链接 -->
```

### 加粗标签

```html
<b>加粗</b><!-- 加粗标签 -->
```

### 斜体标签

```html
<em>斜体</em><!-- 斜体标签 -->
```

### 下划线标签

```html
<u>下划线</u><!-- 下划线标签 -->
```

### 中划线标签

```html
<s>中划线</s><!-- 中划线标签 -->
```

### 图片标签

```html
<img src="hello.png" width="50px"><!-- width/height只设置其中之一的时候，会按照原比例自动缩放 -->
```

## 块标签

 ### div标签

 划分块的主要使用标签

 ```html
<div>
	<p></p>
    <p></p>
</div>
 ```

### 表格标签

```html
<!DOCTYPE html>
<html lang="en">
<!-- 文档中html开始的部分 -->

<head>
    <!-- 提供有关文档内容和标注信息 -->
    <meta charset="UTF-8"><!-- 编码 -->
    <title>title</title>
</head>

<body>
    <table border="1px">
        <tr>
            <!-- 行 -->
            <th>第一个表头</th> <!-- 表头 -->
            <th>第二个表头</th>
            <th>第三个表头</th>
        </tr>
        <tr>
            <!-- 第二行 -->
            <td>单元格</td><!-- 单元格 -->
            <td>单元格</td><!-- 单元格 -->
            <td>单元格</td><!-- 单元格 -->
        </tr>
    </table>

</body>

</html><!-- 文档中html的结束 -->
```

### 单元格合并

```html
<td colspan="2">行合并的单元格</td><!-- 单元格 -->
<td rowspan="2">列合并单元格</td><!-- 单元格 -->
```

使用单元格合并时，被合并的地方的单元格要相应地删去

### 列表

- 有序列表

  ```html
  <ol type="1"><!-- type指定序号样式，默认是十进制阿拉比数字。 -->
      <li>第一</li>
      <li>第二</li>
      <ol type="A"><!-- 嵌套 -->
          <li>第一</li>
          <li>第二</li>
      </ol>
      <li>第三</li>
  </ol>
  ```


- 无序列表

  ```html
  <ul>
      <li>第一</li>
    <li>第二</li>
      <ul type="A"><!-- 嵌套 -->
          <li>第一</li>
          <li>第二</li>
      </ul>
      <li>第三</li>
  </ul>
  ```

  

', description='## 最简单的meno

```html
<!DOCTYPE html>
<html lang="en"><!-- 文档中html开始的部分 -->
    <head> <!-- 提供有关文档内容和标注信息 -->
        <meta charset="UTF-8"><!-- 编码 -->
        <title>title</title>
    </head>
    <body>
        hello world
    </body>
</html><!-- 文档中html的结', views=0, published=true, tagIds='null', createTime=Sat Mar 07 15:10:00 CST 2020, updateTime=Sat Mar 07 15:10:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=15, name='html语法二', content='

## 表单

HTML5中，表单是HTML获得用户输入的手段。

- 输入类型表单

  ```html
  <form>
          <input type="text" value="请输入噢"><!-- text是单行文本框value是占位符 -->
          <br>
          <input type="text" placeholder="请输入噢"><!--placeholder是提示内容-->
          <br>
          <input type="text" placeholder="请输入噢" maxlength="10"><!--maxlength指明输入最大长度-->
          <br>
          <input type="text" placeholder="请输入噢" size="50"><!--size指明输入框的长度-->
          <br>
          <input type="text" value="请输入噢" readonly><!--readonly指明只读，不可编辑-->
          <br>
          <input type="password" placeholder="请输入密码噢">
          <br>
          <br>
          <textarea rows="10" cols="10"> <!-- 指定行数列数 -->
              这是内容
              gh
              h
              j
          </textarea>
      </form>
  ```



- 按钮类型表单

  ```html
   <form><!-- value是提交表单时上传到服务器的内容 -->
         <input type="button" value="type='button'按钮">
         <button>按钮</button>
         <input type="submit" value="type='submit'按钮">
         <input type="checkbox"><!-- 复选框 -->
          这是一个复选框
       <input type="radio" name="choose">单选1<!-- 三选一按钮集合 -->
         <input type="radio" name="choose" checked>单选2 <!-- 默认选中 -->
         <input type="radio" name="choose">单选3
   </form>
  ```

  - 以上三种形式都可以实现按钮的功能，但是三者有着本质的区别，button比type="button"的功能多，button可以当任何按钮来使用，适用范围更广泛。
  - type="submit"用于提交表单，使用范围比type="button"小一些
  - type="button"一般用于配合js（JavaScript）使用
  - type="submit"用于提交表单的时候，必须声明form里面的method属性，最好加上action属性

- 其他类型表单

  ```html
  <form enctype="multipart/form-data">
      <input type="range" min="-100" max="100" value="50"><!-- 可滑动 -->
      <br>
      请选一个来进行选择
      <select>
          <option>选择1</option>
          <option>选择2</option>
          <option>选择3</option>
          <option>选择4</option>
      </select>
      <br>
      <!-- 与上面不同的是可以不选择提供的选项，而输入自己的选项 -->
      <input type="text" list="testList" placeholder="请输入你的选择">
      <datalist id="testList"><!-- 必须配合type="text"来使用，否则不会单独显示 -->
          <option>选择1</option>
          <option>选择2</option>
          <option>选择3</option>
          <option>选择4</option> 
      </datalist>
          
      <input type="date"><!-- 日期类型 不支持IE，火狐浏览器 -->
      <input type="search">
      <!-- 用户虽然看不到，但是提交表单的时候会把value值一起提交 -->
      <input type="hidden" value="隐藏的内容">
      <input type="image" src="password.png" width="20px">
      <!-- 如果要上传文件的话，必须设置属性 form enctype="multipart/form-data" -->
      <input type="file" multiple><!-- multiple是指支持多个文件上传 -->
      <br>
      <input type="file" required><!-- required是指必须上传文件 -->
  </form>
  ```



## 创建分区响应图

分区响应图是指：将一张图片进行划分，用户点击不同的区域的时候，触发不同的点击事件。

该图需要设置usemap属性，属性值是一个map的ID名，map由area组成，即area是触发点击的区域，而area的shape属性说明由下表给出：

<table border="1px">
        <tr>
            <!-- 行 -->
            <th>shape的值</th> <!-- 表头 -->
            <th>coords属性解释</th>
        </tr>
        <tr>
            <!-- 第二行 -->
            <td>Rect</td><!-- 单元格 -->
            <td>这个值代表矩形区域，用四个逗号分割的整数描述，即
            	图像左边缘
            	图像上边缘
            	图像右边缘
            	图像下边缘
            </td><!-- 单元格 -->
        </tr>
		<tr>
            <!-- 第三行 -->
            <td>Circle</td><!-- 单元格 -->
            <td>这个值代表圆形区域，用三个逗号分割的整数描述，即
            	图像左边缘到圆心的距离
            	图像上边缘到圆心的距离
            	圆的半径
            </td><!-- 单元格 -->
        </tr>
    	<tr>
            <!-- 第四行 -->
            <td>Poly</td><!-- 单元格 -->
            <td>这个值代表多边形区域，用至少六个逗号分割的整数描述，每一个数字表示多边形的一个顶点
            </td><!-- 单元格 -->
        </tr>
    	<tr>
            <!-- 第五行 -->
            <td>Default</td><!-- 单元格 -->
            <td>这个值代表默认区域，不需要设置coords的值，即默认覆盖整张图片
            </td><!-- 单元格 -->
        </tr>
</table>

```html
    <img src="OIP.png" usemap="#test_map">
    
    <map name="test_map">
        <area href="4.html" shape="rect" coords="4,10,63,66" target="_blank">
        <area href="9.html" shape="rect" coords="64,10,120,66" target="_blank">
    </map>
```

## 载入视频

```html
<video src="test_video.mp4" controls poster="cut.png"></video>
```

| 属性     | 属性介绍                                                     |
| -------- | ------------------------------------------------------------ |
| src      | 视频地址                                                     |
| width    | 视频宽度                                                     |
| height   | 视频高度                                                     |
| autoplay | 网页完成后自动播放                                           |
| preload  | 是否在页面加载后载入视频。<br>auto - 当页面加载后载入整个视频<br/>metadata- 当页面加载后只载入第一帧<br/>none - 当页面加载后不载入视频 |
| controls | 向用户显示控件，比如播放按钮                                 |
| loop     | 当媒介文件完成播放后再次开始播放。                           |
| poster   | 视频封面                                                     |

由于不同的浏览器支持的视频格式不一样，同一款浏览器版本不同，支持的视频格式也不同，但是MP4格式和ogg格式的视频几乎覆盖了大多数浏览器的大多数版本，因此一般在载入视频的地方准备好两种素材就可以了

```html
    <video src="test_video.mp4" controls poster="cut.png">
        <source src="test_video.mp4" type="video/mp4"> <!-- 默认使用这个资源播放，播放失败则播放下面的 -->
        <source src="test_video.ogg" type="video/ogg">
    </video>
```

', description='## 表单

HTML5中，表单是HTML获得用户输入的手段。

- 输入类型表单

  ```html
  <form>
          <input type="text" value="请输入噢"><!-- text是单行文本框value是占位符 -->
          <br>
          <input type="text" placeholder="请输入噢"><!--placeholder是提示内容-->
          <br>
          <input type', views=0, published=true, tagIds='null', createTime=Sat Mar 07 16:23:00 CST 2020, updateTime=Sat Mar 07 16:23:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=16, name='CSS 语法一', content='

## 前言

 在网页设计中，往往会利用到HTML与CSS的结合，HTML是实现大致框架的，而CSS则是为HTML框架设置想要设定的样式属性，两者相结合可以完整的生成出相应的静态网页。 简单说， HTML进行布局，CSS进行页面的美化 ，即HTML指明有什么，CSS指明怎么放。

## 创建CSS方法

1. 使用元素内嵌样式表

   ```html
   <a href="https://yalexin.gitee.io/">HTML原生超链接</a>
   <a href="https://yalexin.gitee.io/" style="font-size: 40px;">CSS修饰超链接</a>
   <a href="https://yalexin.gitee.io/" style="font-size: 40px; color: #ff0000;">有颜色的超链接</a>
   ```

   <!--more-->

2. 使用文档内嵌样式表

   ```html
   <!DOCTYPE html>
   <html lang="en">
   
   <head>
       <meta charset="UTF-8">
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <meta http-equiv="X-UA-Compatible" content="ie=edge">
       <style type="text/css">
           a { /* 所有的a标签都是这个样式 */
               color: coral;
           }
       </style>
       <title>css1</title>
   </head>
   
   <body>
       <a href="https://yalexin.gitee.io/">文档内嵌CSS超链接</a>
   </body>
   
   </html>
   ```

   ​	**注意上面head下面的style标签，它是内嵌到了文档中，它定义了所有a标签的样式**

3. 使用外部样式表

   - 新建一个a.css文件

     ```css
     a {
         color: rgb(37, 0, 139);
         font-size: 50px;
     }
     ```

   - 在HTML文件中引入上文的a.css

     ```html
     <head>
         <meta charset="UTF-8">
         <meta name="viewport" content="width=device-width, initial-scale=1.0">
         <meta http-equiv="X-UA-Compatible" content="ie=edge">
         <link rel="stylesheet" type="text/css" href="a.css">
         <title>css1</title>
     </head>
     ```

     

   这三种样式是有优先级的，记住他们的优先级：元素内联式 > 文档内嵌式 > 外部式，但是文档内嵌式>外部式有一个前提：文档内嵌式css样式的位置一定在外部式的后面。
   其实总结来说，就是--就近原则（离被设置元素越近优先级别越高）。
   但注意上面所总结的优先级是有一个前提：元素内联式 、文档内嵌式 、外部式是在的相同权值的情况下。

## CSS基本选择器

- 选择所有元素

  ```
  style 元素:*{}
  ```

  

- 根据类型选择元素

  ```
  style 元素:a{}
  body元素:<a>博客链接</a>
  ```

  

- 根据类选择元素

  ```
  style 元素:.class_test{}
  body元素:<a class = "class_test">博客链接</a>
  ```

  

- 根据ID选择元素

  ```
  style 元素:#id_test{}
  body元素:<a id = "id_test">博客链接</a>
  ```

  

- 根据属性选择元素

  ```
  style 元素:[href]{}
  body元素:<a href = "https://yalexin.gitee.io/">博客链接</a>
  
  ```

  

- :选择器动作

  ```
  style 元素:a:hover{}
  body元素:<a>博客链接</a>
  
  ```

  

**说明:**选择器仅出现在文档内嵌或者外部样式中。

**ID选择元素与类选择元素：**

- 共同点：都可以作为选择器，改变属性外面的元素的样式。
- 不同点：ID选择器又叫做唯一选择器，ID是元素的一个唯一标识，即主键。即在网页中次ID属性值确保只出现一次，不能重复出现。类属性可以多次使用，用户根据需要，将部分具有某种特征的元素集合归为一类，可将该类元素表现出同一效果，比如说id=apple1的苹果、id=apple2的苹果，id=banana1的香蕉、id=banana2的香蕉，它们都同属于水果类，可以根据需要设置它们的class=fruit。

## 控制背景

```css
.class_test {
    background-attachment:local;/* 固定方式 */
    background-size: auto;
    background-repeat: no-repeat;/* 重复方式 */
    background-color: brown;
    background-image: url(hello.png);
}

```

', description='在网页设计中，往往会利用到HTML与CSS的结合，HTML是实现大致框架的，而CSS则是为HTML框架设置想要设定的样式属性，两者相结合可以完整的生成出相应的静态网页。 简单说， HTML进行布局，CSS进行页面的美化 ，即HTML指明有什么，CSS指明怎么放。', views=0, published=true, tagIds='null', createTime=Sun Mar 08 09:42:00 CST 2020, updateTime=Sun Mar 08 09:42:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=17, name='CSS 语法二', content='

## 文本修饰类型CSS

```css
.class_test {
    /* 对齐方式 */
	text-align: left;
	/* 行高 */
	line-height: 20px;
	/* 字母间距 */
	letter-spacing: 5px;
	/* 单词间距 对中文无效*/
	word-spacing: 30px;
	/* 文本修饰 如加下划线等 */
	text-decoration: underline;
	/* 首行缩进 */
	text-indent: 2em;
	/* 文本大小写转换 capitalize是首字母自动大写 */
	text-transform: capitalize;
	/* 字体样式 */
	font-family: 微软雅黑;
	/* 字体大小 */
	font-size: 5px;
	/* 字体粗细 */
	font-weight: 100px;
	/* 字体阴影 */
	/* 按照顺序是水平方向的偏移，竖直方向的便宜，模糊程度（与值成正比）阴影颜色 */
	text-shadow: 5px 100px 5px blueviolet;
}
```



## CSS动画

```css
<style type="text/css">
    p {
        width: 100px;
        height: 100px;
        color: blueviolet;
        background-color: black;
    }
    /* 鼠标经过的时候 */
    p:hover{
        width: 200px;
        height: 200px;
        color: blueviolet;
        background-color: brown;
        /* 触发动画延迟时间 */
        transition-delay: 200ms;
        /* 完成一次动画所需时间 */
        transition-duration: 500ms;
        /* 虽然说上面的是一个通用的写法，但是以防万一还是尽可能多地覆盖各种内核 */
        -webkit-transition-duration: 500ms;
        /* 选择要过渡的属性，默认是all */
        transition-property: height,background;
    }
</style>
```

如果想要更加复杂的动画，就要配合@keyframes来使用

```css
<style type="text/css">
    p {
        width: 100px;
        height: 100px;
        background-color: black;
    }

    p:hover {
        animation-name: test_animation;
        animation-duration: 500ms;
        /* 循环动画的次数 */
        animation-iteration-count: 5;
        /* 轮流反向播放动画 */
        animation-direction: alternate;
    }

    @keyframes test_animation {

        /* from相当于0% */
        from {
            width: 100px;
            height: 100px;
        }

        /* 在这里输入0%到100%的有效值 */
        50% {
            background-color: blue;
        }

        /* to相当于100% */
        to {
            width: 300px;
            height: 300px;
        }
    }
</style>
```

## 盒子模型

- 网页设计中常听的属性名：margin(外边距)、 border(边框)、 padding(内边距)、content(内容) ，CSS盒子模式都具备这些属性。
- 所有HTML元素可以看作盒子，在CSS中，"box model"这一术语是用来设计和布局时使用。 

下面给出图解

{%asset_img box-model.png %}

```css
<style type="text/css">
    .class_test{
        /* 依次定义边框的粗细、样式、颜色 */
        border: 1px solid black;
        /* 边框距离周围元素的上边距 */
        margin-top: 100px;
        /* 内容到边框的上边距 */
        padding-top: 20px;
    }
</style>
```

', description='## 文本修饰类型CSS

```css
.class_test {
    /* 对齐方式 */
	text-align: left;
	/* 行高 */
	line-height: 20px;
	/* 字母间距 */
	letter-spacing: 5px;
	/* 单词间距 对中文无效*/
	word-spacing: 30px;
	/* 文本修饰 如加下划线等 */
	text-decoration: underline;
	/* 首行缩进 */
	text-indent: 2em;
	/* 文本', views=0, published=true, tagIds='null', createTime=Sun Mar 08 14:00:00 CST 2020, updateTime=Sun Mar 08 14:00:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=18, name='JavaScript语法一', content='

## 前言

 JavaScript 是一种脚本，一门编程语言，它可以在网页上实现复杂的功能，网页展现给你的不再是简单的静态信息，而是实时的内容更新，交互式的地图，2D/3D 动画，滚动播放的视频等等。构建web前端，JavaScript 怎能缺席。它是标准 Web 技术蛋糕的第三层，其中 [HTML ](https://ruixin_huang.gitee.io/mblog/2020/03/07/html%E8%AF%AD%E6%B3%951/)和 [CSS ](https://ruixin_huang.gitee.io/mblog/2020/03/08/css-%E8%AF%AD%E6%B3%95/)我们已经在前面有了初步学习。

## 使用方法

前面学习CSS中，我们知道CSS的使用方法有三种：元素内嵌、文档内嵌、导入外部。这里的JavaScript也有类似的方法：元素内嵌、文档内嵌、导入外部：



- 元素内嵌

  ```html
  <input type="button" value="这是一个按钮" onclick="alert('你好')">
  ```

- 文档内嵌

  ```html
  <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <meta http-equiv="X-UA-Compatible" content="ie=edge">
      <title>Document</title>
      <script>
          alert("hello world");
      </script>
  </head>
  ```

- 导入外部

  ```javascript
  //新建一个test.js
  alert("test");
  //在HTML文件中的head标签下引入
  <script src="test.js"></script>
  ```

## 输出内容

可以用alert()函数或者document.write()，这前者是弹出式，后者直接在网页中显示，还可以配合标签来使用

```javascript
<script>
    var title = "这是一级标题";
    document.write("<h1>"+title+"</h1>");
</script>
```

还有用console.log()在控制台控制输出，一般用于程序员调试。

## 输入内容

获取用户输入，我们在HTML的表单中已经学习过，如果用JavaScript也可以实现，prompt()方法用于显示一个带有提示信息，并且用户可以输入的对话框。 

```javascript
prompt(text,defaultText);
```

| 参数        | 描述                                       |
| ----------- | ------------------------------------------ |
| text        | 可选。要在对话框中显示的提示信息（纯文本） |
| defaultText | 可选。默认的输入文本。                     |

如

```htm
<script>
	var inPut = prompt("请输入你的内容","");
	alert("您输出的是\n"+inPut);
</script>
```

## 对象

JavaScript跟其他面向对象语言一样，有对象的属性，关于详细的面向对象，[这里]( [https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/24792?fromtitle=%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B&fromid=254878](https://baike.baidu.com/item/面向对象程序设计/24792?fromtitle=面向对象编程&fromid=254878) )有着详细的介绍

- 使用对象字面量创建对象

  ```javascript
  var student = {
      ID: 11111111,
      name: "学生名字",
      age: 18,
      sayHello: function () {
          console.log("hello world");
      }
  };
  /* 两种方法引用对象属性 */
  alert(student.ID);
  alert(student["ID"]);
  ```

  

- 使用new object()方式创建

  ```javascript
  var student = new Object(); //创建了一个空对象
  student.ID = 123;
  student.name = "学生姓名";
  student.age = 18;
  student.sayHello = function () {
  	console.log("hello world");
  };
  ```

  

- 利用构造函数方式创建

  ```javascript
  function Creatstudent(s_ID,s_name,s_age){ //构造函数名一般首字母大写
      this.ID = s_ID;
      this.name = s_name;
      this.age = s_age;
      this.sayHello = function(){
          console.log("hello");
      }
      // 没有返回值
  }
  var student = new Creatstudent(12345,"学生姓名",18);
  
  ```

## 遍历对象的内容

有的时候我们想获取对象的全部属性，我们可以用对象+“.”+属性名来获取，这种方法对于属性少的对象来说固然奏效，但是假如我的对象有一千个、一万个属性呢？（当然了这只是一个假设，我们自定义的对象一般不会有这么多的属性吧）上面的方法估计就有些吃力了吧！因此我们需要换一种方式来遍历。

```javascript
var key;
for(key in student){
    console.log(key+":"); //循环一次 得到的是属性名
    // console.log(student.key); 不得使用该方法 因此该方法返回的是undefined
    console.log(student[key]);
}

```

## 内置对象

- JavaScript中对象分为三种：自定义对象、内置对象、浏览器对象。

- 前面两种对象属于ECMAScript，第三个是JavaScript独有的

- 内置对象是官方定义，供开发人员使用的对象，它能帮助开发者快速开发，而不必要在意背后的工作原理（当然了喜欢钻研也可以）。

- JavaScript提供了大量的内置对象，如Math、Date、Array、String等。

- 为了了解如何使用内置对象，我们需要去[官网]( https://developer.mozilla.org/zh-CN/ )查阅官方文档，例如，根据官方文档，我们可以知道获取时间的方法是

  ```javascript
  function showTime() {
      nowtime = new Date();
      year = nowtime.getFullYear();
      month = nowtime.getMonth() + 1;
      date = nowtime.getDate();
      console.log(year + "年" + month + "月" + date + "日" + nowtime.toLocaleTimeString());
  }
  // 更新时间间隔
  setInterval("showTime()", 1000); 
  
  ```

  ', description='JavaScript 是一种脚本，一门编程语言，它可以在网页上实现复杂的功能，网页展现给你的不再是简单的静态信息，而是实时的内容更新，交互式的地图，2D/3D 动画，滚动播放的视频等等。构建web前端，JavaScript 怎能缺席。它是标准 Web 技术蛋糕的第三层，', views=0, published=true, tagIds='null', createTime=Mon Mar 09 09:08:00 CST 2020, updateTime=Mon Mar 09 09:08:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=19, name='JavaScript语法二', content='

## window对象

- window对象是BOM的核心，window对象指当前的浏览器窗口

- 所有JavaScript全局对象、函数以及变量均自动成为window对象的成员

- 全局变量是window对象的属性

- 全局函数是window对象的方法

- 甚至HTML DOM的document也是window对象的属性之一

- window.innerHeight ：浏览器窗口的内部高度

- window.innerWidth ：浏览器窗口的内部宽度

- 打开一个window窗口:windows.open()

  

  | 参数     | 描述                                                         |
  | :------- | :----------------------------------------------------------- |
  | URL      | 一个可选的字符串，声明了要在新窗口中显示的文档的 URL。如果省略了这个参数，或者它的值是空字符串，那么新窗口就不会显示任何文档。 |
  | name     | 一个可选的字符串，该字符串是一个由逗号分隔的特征列表，其中包括数字、字母和下划线，该字符声明了新窗口的名称。如果该参数指定了一个已经存在的窗口，那么 open() 方法就不再创建一个新窗口，而只是返回对指定窗口的引用。在这种情况下，features 将被忽略。 |
  | features | 一个可选的字符串，声明了新窗口要显示的标准浏览器的特征。如果省略该参数，新窗口将具有所有标准特征。在[窗口特征](https://www.w3school.com.cn/jsref/met_win_open.asp#windowfeatures)这个表格中，我们对该字符串的格式进行了详细的说明。 |
  | replace  | 一个可选的布尔值。规定了装载到窗口的 URL 是在窗口的浏览历史中创建一个新条目，还是替换浏览历史中的当前条目。支持下面的值：<br>true - URL 替换浏览历史中的当前条目。<br>false - URL 在浏览历史中创建新的条目。 |

- 关闭一个window窗口:windows.close()

  ```html
  <html>
  
  <head>
      <script type="text/javascript">
          function closeWin() {
              myWindow.close()
          }
      </script>
  </head>
  
  <body>
      <script type="text/javascript">
          myWindow = window.open('', '', 'width=200,height=100')
          myWindow.document.write("This is 'myWindow'")
      </script>
      <input type="button" value="Close 'myWindow'" onclick="closeWin()" />
  </body>
  
  </html>
  ```

  当然了，如果想要通过打开一个窗口的方式来打开一个链接URL，是不推荐的，因为有些浏览器为了安全起见，可能会阻止windows.open()打开一个URL。

  ![](http://q78fmp2j4.bkt.clouddn.com/blog/20200315/upP0Jok6i6zX.png)

## js对象控制HTML元素

想要要控制元素，首先就要先得到，或者说找到该元素，通过以下不同的几个不同的方法，可以得到或者控制HTML元素。

| 方法名                          | 方法描述                                                     |
| ------------------------------- | ------------------------------------------------------------ |
| document.getElementsByTagName() | 返回带有指定标签名的对象的集合。                             |
| document.getElementById()       | 返回对拥有指定 ID 的第一个对象的引用。                       |
| document.getElementsByName()    | 返回带有指定名称的对象的集合。                               |
| node_name.getAttribute()        | 返回指定属性名的属性值。                                     |
| node_name.setAttribute()        | 添加指定的属性，并为其赋指定的值。<br>如果这个指定的属性已存在，则仅设置/更改值。 |
| node_name.childNodes            | 返回节点的子节点集合，以 NodeList 对象。                     |
| node_name.parentNode            | 以 Node 对象的形式返回指定节点的父节点                       |
| document.createElement()        | 通过指定名称创建一个元素                                     |
| node_name.removeChild()         | 删除当前节点下的特定子节点                                   |

```html
<body>
    <p name="p_name">1</p>
    <p name="p_name">2</p>
    <p name="p_name">3</p>
    <p name="p_name">4</p>
    <a id="a_id" href="https://yalexin.gitee.io/">博客</a>
    <div id="div">
        <p name="p_name" id="p_5">5</p>
        <p name="p_name">6</p>
    </div>
    <script>
        function demo() {
            var p_count = document.getElementsByTagName("p");
            var n_count = document.getElementsByName("p_name");
            // print:HTMLCollection(4)
            console.log(p_count);
            //通过下标访问集合中的元素
            console.log(n_count[1].innerHTML);
            // 通过id得到元素
            var a = document.getElementById("a_id");
            // 查找元素的属性
            console.log(a.getAttribute("href"));
            // 设置新的属性值
            a.setAttribute("href", "https://yalexin.gitee.io/guestbook/");
            var div = document.getElementById("div");
            // 得到子节点集合
            var child_list = div.childNodes;
            var p = document.getElementById("p_5");
            //得到父节点（只有一个）
            var parent = p.parentNode;
            var body = document.body;
            //创建一个输入框节点
            var input = document.createElement("input");
            input.type = "text";
            input.placeholder = "这是通过createElement方法创建的";
            // 将input添加到body中（在末尾）
            body.appendChild(input);
            var p_insert = document.createElement("p");
            p_insert.innerHTML = "这是通过insert方法插入的";
            // 将p_insert节点插入到p节点之前（id = p_5）
            div.insertBefore(p_insert, p);
            // 删除div的子节点p（id = p_5）
            div.removeChild(p);
        }
        demo();
    </script>
</body>
```

## ', description='## window对象

- window对象是BOM的核心，window对象指当前的浏览器窗口

- 所有JavaScript全局对象、函数以及变量均自动成为window对象的成员

- 全局变量是window对象的属性

- 全局函数是window对象的方法', views=0, published=true, tagIds='null', createTime=Sun Mar 15 12:40:00 CST 2020, updateTime=Sun Mar 15 12:40:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=20, name='JavaScript语法三', content='

## js对象控制CSS

```html
<!DOCTYPE html>
<html lang="zh">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <style type="text/css">
        p {
            color: brown;
            width: fit-content;
            height: auto;
            background-color: aquamarine;
        }
    </style>
</head>

<body>
    <p id="p_id">这是一段测试的文字</p>
    <button onclick="change()">改变背景颜色</button>
    <script>
        function change() {
            document.getElementById("p_id").style.backgroundColor = "#ffffff";
        }
    </script>
</body>

</html>
```



其他的效果类似，方法都是先找到要改变的元素，然后设置新的CSS样式。

## 计时器

### 1.计时事件

通过JavaScript，我们可以在一个需要的时间间隔之后执行我们的任务，而不是在函数被调用后立即执行，我们称之为计时事件。

### 2.计时方法

1. setInterval(code,millisec[,"lang"])：间隔指定的毫秒数不停地执行指定的代码

   | 参数     | 描述                                                   |
   | :------- | :----------------------------------------------------- |
   | code     | 必需。要调用的函数或要执行的代码串。                   |
   | millisec | 必须。周期性执行或调用 code 之间的时间间隔，以毫秒计。 |

   例如：

   ```html
   <p id="time_p"></p>
   <script>
       var demo_time = setInterval( "getTime()",1000);
       function getTime(){
           var nowDate = new Date();
           var nowTime = nowDate.toLocaleTimeString();
           document.getElementById("time_p").innerHTML = nowTime;
       }
   </script>
   ```

   那我们想要停止执行怎么办？用下面这个方法就可以了

   ```javascript
   clearInterval(demo_time);
   ```

1. setTimeout(code,millisec[,"lang"])：延迟指定的毫秒数后执行指定的代码   

   例如

   ```javascript
   var demo_time = setTimeout( "getTime()",1000);//一秒后执行一次getTime()
   ```

   虽然说是执行一次，但是我们可以利用递归进行不断调用，从而实现setInterval()类似的效果，如

   ```html
   <p id="time_p"></p>
   <button onclick="stop_time()">停止计时</button>
   <script>
       var demo_time;
       function getTime(){
           var nowDate = new Date();
           var nowTime = nowDate.toLocaleTimeString();
           document.getElementById("time_p").innerHTML = nowTime;
           demo_time = setTimeout( "getTime()",3000);
       }
       function stop_time(){
           clearTimeout(demo_time);
       }
       getTime();
   </script>
   ```

   但是”可以“并不代表着推荐这么做，想想调用函数的本质是什么？不就是压栈吗？我们永不断地进行压栈，而没有弹栈，计算机的资源不久就会被消耗殆尽。因此，对于周期性的工作，我们还是 强烈推荐使用setInterval()方法。

   

## 利用screen对象获取屏幕信息

```html
<script>
    var a_height = screen.availHeight;
    var a_width = screen.availWidth;
    var height = screen.height;
    var width = screen.width;
    console.log("可用的屏幕高度："+a_height
                +"\n可用的屏幕宽度："+a_width
                +"\n屏幕的高度："+height
                +"\n屏幕的宽度："+width);
</script>
```

', description='## js对象控制CSS

```html
<!DOCTYPE html>
<html lang="zh">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <', views=0, published=true, tagIds='null', createTime=Mon Mar 16 12:20:00 CST 2020, updateTime=Mon Mar 16 12:20:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=21, name='Vue框架', content='

## 前言

 Vue 是一套用于构建用户界面的**渐进式框架** ，利用Vue可以方面地经行中小型项目的快速构建， 它的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。 这里是它的官网[链接]( https://cn.vuejs.org/ )



## 最简单的例子

```html
<!DOCTYPE html>
<html lang="zh">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>

<body>
    <div id="app">
        {{ message}}
    </div>
    <!-- 导包 -->
    <!-- 开发环境版本，包含了有帮助的命令行警告 -->
    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    <script>
        var app = new Vue({
            el: "#app",
            data: {
                message: "hello world",
            }
        });
    </script>
</body>

</html>
```

**一定要导包，可以下载到本地使用，也可以直接通过远程导入的方法导入，对于制作项目，推荐下载到本地，如果只是学习，直接远程导入即可，但是前提是要有网络**

## el挂载点

- 作用域：el指定的标签范围，即在这个范围之下

  ```html
      <div id="app">
          {{ message}}
      </div>
  ```

  

- 选择器的类型：不限于id选择器，下面的三个都是可以的

  ```html
  <body>
      <div class="app">
          {{ message}}
      </div>
      <!-- 导包 -->
      <!-- 开发环境版本，包含了有帮助的命令行警告 -->
      <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
      <script>
          var app = new Vue({
              // 注意看这里
              el: ".app",
              data: {
                  message: "你好",
              }
          });
      </script>
  </body>
  ```

  ```html
  <body>
      <div>
          {{ message}}
      </div>
      <!-- 导包 -->
      <!-- 开发环境版本，包含了有帮助的命令行警告 -->
      <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
      <script>
          var app = new Vue({
              // 注意看这里
              el: "div",
              data: {
                  message: "你好",
              }
          });
      </script>
  </body>
  ```

  ```html
  <body>
      <!-- 注意看这里 -->
      <p id="app">
          {{ message}}
      </p>
      <!-- 导包 -->
      <!-- 开发环境版本，包含了有帮助的命令行警告 -->
      <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
      <script>
          var app = new Vue({
              // 注意看这里
              el: "#app",
              data: {
                  message: "你好",
              }
          });
      </script>
  </body>
  ```

  **值得注意的是，el不能够挂载到单标签和body标签中**，建议使用id选择器和挂载到div中。

## date数据对象

+ Vue中用到的数据定义在data中

+ data中的数据类型不限于字符串，还可以是复杂的数据类型，如对象，数组

+ 渲染复杂类型数据时，遵守js的语法即可，如

  ```javascript
  data: {
      message: "你好",
      student: {
          name: "YaleXin",
          age: 20,
          address: "earth",
      },
      test_array: [1, 2, 3, 4, 5, 6],
  }
  ```

  引用时加上双大括号即可

  ```html
  <div id="app">
      {{ message }}
      {{student.name}}
      <ol>
          <li>{{test_array[0]}}</li>
          <li>{{test_array[2]}}</li>
      </ol>
  </div>
  ```

  

  ![](http://q78fmp2j4.bkt.clouddn.com/blog/20200316/akfBfVATnbor.png)', description=' Vue 是一套用于构建用户界面的**渐进式框架** ，利用Vue可以方面地经行中小型项目的快速构建， 它的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。 这里是它的官网[链接]( https://cn.vuejs.org/ )', views=0, published=true, tagIds='null', createTime=Sat Mar 21 10:24:00 CST 2020, updateTime=Sat Mar 21 10:24:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=22, name='Vue指令', content='

## v-text

设置标签的文本值（textContent）

  ```javascript
  var app = new Vue({
      el: "#app",
      data: {
          message: "hello",
      }
  });
  ```



  ```html
  <div id="app">
      <h2 v-text="message">标题</h2>
      <h2>{{message}}标题</h2>
  </div>
  ```

  我们会发现，使用v-text设置文本的话，标签内部的文本值会被完全地覆盖

  ![](http://q78fmp2j4.bkt.clouddn.com/blog/20200316/wFn0pr9f1dW3.png)

## v-html

设置标签地innerHTML

  **注意**当v-html的值是普通的字符串的时候，v-html和v-text的用法没有区别，但当v-html的值是一个标签的语法时，这二者的用法就有了区别

  ```html
   <div id="app">
      <p v-html = "content1"></p>
      <p v-text = "content1"></p>
      <p v-html = "content2"></p>
      <p v-text = "content2"></p>
   </div>
  ```

  ```javascript
  var app = new Vue({
      el: "#app",
      data: {
          content1: "hello",
          content2: "<a href='https://yalexin.gitee.io/'>超链接</a>",
      }
  });
  ```

  ![图片](http://q78fmp2j4.bkt.clouddn.com/blog/20200322/SPaHMAOyWjC7.png)

  可以发现，v-html成功地渲染成了标签，但是前提是v-html所在节点能够拥有子节点。

## v-on

 为元素绑定事件

  我们可以从官方的[文档]( https://developer.mozilla.org/zh-CN/docs/Web/Events )中可以得知，Vue支持的事件非常多，用法都是类似下面的情况

  ```html
  <div id="app">
      <!-- 格式是   v-on:+事件名+="需要绑定的方法" -->
      <input type="button" v-on:click="demo1_fun" value="事件绑定-全写">
      <!-- 格式是   @+事件名+="需要绑定的方法" -->
      <input type="button" @click="demo2_fun" value="事件绑定-简写">
  </div>
  ```

  ```jiarujavascript
  var app = new Vue({
      el: "#app",
      methods: {
          demo1_fun:function(){
              alert("demo1_fun");
          },
          demo2_fun:function(){
              alert("demo2_fun");
          },
          demo3_fun:function(){
              alert("demo3_fun");
          },
      },
  });
  ```

  假如需要传递参数，只需要v-on处提供实参即可

  ```html
  @click="demo2_fun(p1,p2,p3,...)"
  ```

  该指令还可以配合事件修饰符来使用，一个简单的例子就是，我们希望按下回车键时触发事件：

  ```html
  <input type="text" @keydown.enter="do_sh">
  ```

  关于更多的用法，可以参照官方[文档]( [https://cn.vuejs.org/v2/guide/events.html#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6](https://cn.vuejs.org/v2/guide/events.html#事件修饰符) )

  事件名不需要写**on**，绑定的方法定义在**methods**属性中，而且方法内部通过**this**关键字可以访问定义在**data**中的数据。

## v-show：

根据真假切换元素的显示状态，原理是修改元素的display，实现显示和隐藏，指令的值最终被解析为布尔值(true显示，false隐藏)。

  ```html
  <div id="app">
      <button @click="change_show">click-me</button>
      <p v-show="isShow">这是一段测试的文字</p>
  </div>

  ```

  ```javascript
  var app = new Vue({
      el: "#app",
      data: {
          isShow: false,
      },
      methods: {
          change_show: function () {
              this.isShow = !this.isShow;
          }
      },
  });

  ```


## v-if

根据真假切换元素的显示状态，原理是操纵dom元素来切换显示状态，效果跟v-show是一样的。

  ```html
  <div id="app">
      <button @click="change_show">click-me</button>
      <p v-if="isIf">这是一段测试的文字</p>
  </div>

  ```

  ```javascript
  var app = new Vue({
      el: "#app",
      data: {
          isIf: false,
      },
      methods: {
          change_show: function () {
              this.isIf = !this.isIf;
          }
      },
  });

  ```

  ![图片](http://q78fmp2j4.bkt.clouddn.com/blog/20200322/BRp7PP313Lue.png)

![图片](http://q78fmp2j4.bkt.clouddn.com/blog/20200322/3zny7F5J6mgD.png)

	即当v-if的值是true时，该元素在存在于div标签中，否则将元素移除，那我们如何进行选择？ 一般来说， v-if 有	更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；	如果在运行时条件不太可能改变，则使用 v-if 较好。 
	

## v-bind

为元素绑定属性值

  ```html
  <div id="app">
      <img v-bind:src="img_src" v-bind:title="title1">
      <!-- 简写 -->
      <img :src="img_src" :title="title2">
  </div>

  ```

  ```javascript
  var app = new Vue({
      el: "#app",
      data: {
          isShow: false,
          img_src:"../study/images/2.jpg",
          title1:"图片一",
          title2:"图片二",
      },
  });

  ```

  

## v-for

根据数据源生成列表结构，语法是(item,index) in 数据源：

  ```html
  <div id="app">
      <ol>
          <li v-for="item in demo_array">
              每天做的事情:{{item}}
          </li>
      </ol>
  </div>

  ```

  ```javascript
  var app = new Vue({
      el: "#app",
      data: {
          demo_array:["写bug","查bug","改bug"]
      },
  });

  ```

  ![图片](http://q78fmp2j4.bkt.clouddn.com/blog/20200323/KILg1Tt8tV9r.png)

  v-for不仅仅可以放进`li`标签中，还可以放进其他中，而且数据源也不仅限于普通数组，对象性数组也是可以的，如：

  ```html
  <!DOCTYPE html>
  <html lang="zh">
  
  <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <meta http-equiv="X-UA-Compatible" content="ie=edge">
      <title>Document</title>
  </head>
  
  <body>
      <div id="app">
          <p v-for="item in students">
              学生姓名：{{item.name}}
          </p>
      </div>
      <!-- 开发环境版本，包含了有帮助的命令行警告 -->
      <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
      <script>
          var app = new Vue({
              el: "#app",
              data: {
                  students: [
                      { name: "张三" },
                      { name: "李四" },
                      { name: "王五" },
                  ],
              }
          });
      </script>
  </body>
  
  </html>

  ```

  

## v-model

便捷地设置和获取表单元素的值，它可以将某个特定的值和表单元素的值相关联，这种关联是双向的：

  ```html
  <div id="app">
      <input type="text" v-model="message" @keydown.enter="setNewMsg">
      <p>{{message}}</p>
  </div>

  ```

  ```javascript
  var app = new Vue({
      el: "#app",
      data: {
          message: "",
      },
      methods:{
          setNewMsg:function(){
              this.message = "通过vue改变message";
              console.log(66);
          }
      }
  });

  ```

  ', description='## v-text

设置标签的文本值（textContent）

  ```javascript
  var app = new Vue({
      el: "#app",
      data: {
          message: "hello",
      }
  });
  ```', views=0, published=true, tagIds='null', createTime=Sat Mar 21 10:31:00 CST 2020, updateTime=Sat Mar 21 10:31:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=23, name='双蛋问题', content='

昨天看了李永乐老师的[视频]( https://www.bilibili.com/video/av96214853 )，想着利用编程实现，想着想着就动起手来了。

## 问题描述

你有两个鸡蛋，楼层有一百层，这座楼有一个**临界点**，即从高于（含该楼层）高楼层往下扔鸡蛋，鸡蛋会碎，低于

该楼层，无论扔几次都不会碎（~~忽略物理因素），问你最少需要尝试几次，**一定**可以确定该临界楼层。

## 解法一

一层一层地尝试，最好的情况下只需仍一次，最坏的情况是100次，即答案是在[1,100]，即最终答案是100次。

## 解法二

二分法，即第一个鸡蛋我不从第一层开始，我从第50（100的一半）层开始，要是鸡蛋碎了，临界楼层就在[1,50]之间，接着用解法一的方式去尝试；要是不碎，说明临界楼层就在[51,100]之间，继续从75层开始，然后又会出现两种情况，重复上述过程。即第一个鸡蛋是用于确定区间，第二个鸡蛋是用于确定临界楼层。在这种情况下最坏情况下需要**1+49=50**次，最好的情况是**8**次（依次扔的楼层是50，75，87，93，96，98，99，100），即答案是在[8,50],最终答案是50.

## 解法三

经过上面的尝试，我们发现，最坏情况下和最好情况下，需要的次数跨度太大了，我们可以不可以尝试着一种方案，使得最坏和最好的情况下使用次数相差最小呢？如何做到相差最小呢？那我只要两个鸡蛋所需扔的次数之和趋向于一个常数，就可以了。假设第一个鸡蛋第一次在第n层扔，假如鸡蛋碎了，第二个鸡蛋最坏情况需要扔n-1次，总次数是（1+n-1）次；假如没碎，第一个鸡蛋就可以再选择一个楼层来确定区间，那选哪一层呢？答案是第[n+(n-1)]层，假如碎了，第二个鸡蛋就从第n层开始往上寻找答案，最坏情况需要仍n-2次，即总次数是[2+(n-2)]次；假如没碎，第一个鸡蛋接着从第[n+(n-1)+(n-2)]层开始扔，重复上述过程，最坏情况下是：第一个鸡蛋扔的楼层是n，n-1，n-2，n-3，……，1，只需要[n+(n-1)+(n-2)+……+1]>=100，将求得的n向下求整即可，此时n=14。即最终答案是14，即**14次尝试，一定可以确定该临界值。**

## 普遍化

假如楼层数是m，鸡蛋数是n呢，对于某一个组合（m，n），怎样快速地得到答案呢？我们可以先画出一张表

| 下面是楼层数m，右边是鸡蛋数n | 1                               | 2    | 3    | 4    | 5    |
| ---------------------------- | ------------------------------- | ---- | ---- | ---- | ---- |
| 1                            | <span color="##ff0000">1</span> | 1    | 1    | 1    | 1    |
| 2                            | 2                               |      |      |      |      |
| 3                            | 3                               |      |      |      |      |
| 4                            | 4                               |      |      |      |      |
| 5                            | 5                               |      |      |      |      |
| 6                            | 6                               |      |      |      |      |

对于最左边和最上边，我们很容易可以填好，对于其他情况呢？设T（m，n）表示拥有n个蛋，需要确定m层楼的临界层的最小尝试次数。假设手上的第一个鸡蛋在第k层楼扔

- 假如碎了，相当于鸡蛋少了，临界楼层在第k层下面，需要的次数就是{T（k-1，n-1）+1}
- 假如不碎，相当于手上的鸡蛋数没变，而且需要确定的楼层数也减少了，答案就是{T（m-k，n）+1}

对于这两种情况，要么是使得鸡蛋数减少了，要么使得楼层数减少了，二者的取值有可能不一样，为了确保一定能确定出来，我们取最大值，我们记为T<sub>k</sub> 。那k的取值又该如何选择呢？我们不难发现，k可以从**1**取到**m**，都会对应一个T<sub>k</sub> ，我们只要选出最小的值即可。有同学可能会疑问，上面是选择最大值，这里为什么选择最小值呢？是因为这里的k是我们自己选择的，但是选好了k后，鸡蛋碎不碎我们无法预测，因此上面选择最大值，这里选择最小值。因此状态转移方程就是

T（m，n）= min(T<sub>k</sub>  ,k=1,2,3,……,m，T<sub>k</sub>={max[T（m，n-1）,T（m-k，n）]+1}

因此填表的方式就是以列为主序，从上往下，下面给出代码

```c
/*
 * @Description:
 * @Author: Yale_Xin
 * @Date: 2020-03-22 15:44:41
 * @LastEditTime: 2020-03-22 15:56:36
 * @LastEditors: Yale_Xin
 */
#include <stdio.h>
#define max(a, b) a > b ? a : b
int T[100][100], egg, floor;
int main() {
    int m, n, k;
    scanf("%d %d", &floor, &egg);
    //两个循环用于初始化
    for (m = 1; m <= floor; m++) {
        T[m][1] = m;
    }
    for (n = 1; n <= egg; n++) {
        T[1][n] = 1;
    }
    // 填表开始
    for (n = 2; n <= egg; n++)
        for (m = 2; m <= floor; m++) {
            int minTk = 32767, Tk;
            for (k = 1; k <= m; k++) {
                // 蛋碎了，则还需尝试k-1次，不碎还需m-k次
                Tk = max(T[k - 1][n - 1], T[m - k][n]);
                Tk++;
                minTk = minTk < Tk ? minTk : Tk;
            }
            T[m][n] = minTk;
        }
    return 0;
}
```

', description='昨天看了李永乐老师的[视频]( https://www.bilibili.com/video/av96214853 )，想着利用编程实现，想着想着就动起手来了。

## 问题描述

你有两个鸡蛋，楼层有一百层，这座楼有一个**临界点**，即从高于（含该楼层）高楼层往下扔鸡蛋，鸡蛋会碎，低于

该楼层，无论扔几次都不会碎（~~忽略物理因素），问你最少需要尝试几次，**一定**可以确定该临界楼层。<!--more-->', views=0, published=true, tagIds='null', createTime=Sun Mar 22 16:09:00 CST 2020, updateTime=Sun Mar 22 16:09:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=24, name='博客转移', content='现在是2020年3月26日，前几天搭建好了typecho的博客，把Hexo下的文章全都转移了过去，接着又是换主题，小修改，终于算是满意了，我为什么要进行博客转移？

## 起因

最近新冠肺炎不断肆虐各国各地区，各地都在积极采取措施，在这里我要感谢奋斗在一线的医生护士们，你们辛苦了，你们是最棒的！阿里云为了鼓励大家利用在家的时间多多学习，推出了[高校学生“在家实践”计划活动]( https://developer.aliyun.com/adc/student/ ),，只要是在校大学生，通过测试就可以领取六个月的服务器ECS，2核cpu+4GB内存+1M宽带+40GB的系统盘，这个配置算下来应该也要五六百吧人民币。但是我领取了以后也不知道拿来干嘛，我之前搭建的Hexo博客不需要服务器就可以搭建，所以服务器就一直闲置着。前几天刚好看到一个IT之家网友分享的typecho博客，然后就想搭建一个，也不算是浪费了服务器。然后一番折腾终于搭建好了，主题用的是[Aria]( https://eriri.ink/archives/Typecho-Theme-Aria.html )。但是截止到今天，我的域名备案还没通过，所以typecho的博客还是利用我的服务器IP来进行访问。

这是我的[typecho博客]( http://47.92.93.189/ )，主题是[Aria]( https://eriri.ink/archives/Typecho-Theme-Aria.html )

这是我的[Hexo博客]( https://yalexin.gitee.io/ )，主题是[Next]( https://github.com/theme-next/hexo-theme-next )

目前是文章两边同时更新，所以就相当于同一个博客不同主题吧（~~~）。

## 这二者博客的区别

- Hexo

  - 它基于node.js，是一个静态博客，关于什么是静态web和动态web，[这里]( https://blog.csdn.net/qq_33915826/article/details/81172555 )有说明，Hexo比较轻量，访问速度比较快，托管方便，几乎不用担心数据丢失的问题，在没有服务器情况下也可以搭建。
  - 但是每次发布文章都要输入命令，重新渲染成HTML文件
  - 移动端写文章不太方便

- Typecho

  - 它基于PHP+ MySQL 数据库 ，只需要仅仅七张数据表，以及不足500KB的代码文件，就可以构建博客框架，写文章十分方便，支持原生Markdown语法，只要有网络就可以进行发布文章，修改文章，删除文章等操作。
  - 需要额外的服务器，域名（当然了，也可以用服务器的ip来访问）等
  - 模板插件比较少

## 最后

目前重心主要放在Typecho上面，等哪一天没钱续费服务器，再转回Hexo，反正目前两边都同一时间更新，不用担心数据不同步的问题，但是可能评论迁移比较困难。', description='现在是2020年3月26日，前几天搭建好了typecho的博客，把Hexo下的文章全都转移了过去，接着又是换主题，小修改，终于算是满意了，我为什么要进行博客转移？', views=0, published=true, tagIds='null', createTime=Thu Mar 26 12:22:00 CST 2020, updateTime=Thu Mar 26 12:22:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=25, name='C语言向main函数传递参数', content='
我们一般写C语言的代码的时候，`main`函数是不带形参的，如

```c
/*
 * @Description: 
 * @Author: Yale_Xin
 * @Date: 2020-04-02 11:16:47
 * @LastEditTime: 2020-04-02 12:44:54
 * @LastEditors: Yale_Xin
 */
#include<stdio.h>
int main(){
    printf("hello world");
    return 0;
}
```

但是其实我们是可以向`main`函数传递参数的，只不过此时我们需要在命令行中进行编译运行，例如

```c
/*
 * @Description:
 * @Author: Yale_Xin
 * @Date: 2020-04-02 11:16:47
 * @LastEditTime: 2020-04-02 12:52:16
 * @LastEditors: Yale_Xin
 */
#include <stdio.h>
int main(int arc, char* input[]) {
    printf("您输入了%d个参数，分别是：\n", arc);
    for (int i = 0; i <= arc; i++) {
        printf("%s\n", input[i]);
    }
    return 0;
}
```

在命令行中，进入到程序所在的文件夹下，输入编译命令：

```shell
gcc -o test test.c
```

运行：

```shell
./test 参数一 参数二 参数三
```

输出的结果如下：

```shell
您输入了4个参数，分别是：
D:\my_c_workspace\some_test\test.exe
参数一
参数二
参数三
```

可以发现第一个参数实际上是命令本身（虽然说它的下标是0）！

我们可以借助上面的方法给`main`函数进行传递参数，接着进行类型转换就可以得到我们想要的数据类型。', description='我们一般写C语言的代码的时候，`main`函数是不带形参的，如

```c
/*
 * @Description: 
 * @Author: Yale_Xin
 * @Date: 2020-04-02 11:16:47
 * @LastEditTime: 2020-04-02 12:44:54
 * @LastEditors: Yale_Xin
 */
#include<stdio.h>
int main(){
    printf("hello world");
    return 0;
}
```

', views=0, published=true, tagIds='null', createTime=Thu Apr 02 11:40:00 CST 2020, updateTime=Thu Apr 02 11:40:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=26, name='最小点对', content='
## 问题描述

对于给定的n个点，求出这些点的最小的距离。

## 解法一：暴力法

遍历任意两点之间的距离，找出最小值。

```c
/*
 * @Description:
 * @Author: Yale_Xin
 * @Date: 2020-04-02 20:37:23
 * @LastEditTime: 2020-04-02 21:23:54
 * @LastEditors: Yale_Xin
 */
#include <math.h>
#include <stdio.h>
double distance(double x1, double y1, double x2, double y2) {
    return sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
}
typedef struct point {
    double x, y;
} mPoint;
mPoint p[120], mid[120];
int main() {
    int n;
    scanf("%d", &n);
    for (int i = 1; i <= n; i++) {
        scanf("%lf %lf", &p[i].x, &p[i].y);
    }
    double min = 9999.0;
    for (int i = 1; i < n; i++)
        for (int j = i + 1; j <= n; j++) {
            double t = distance(p[i].x, p[i].y, p[j].x, p[j].y);
            min = min < t ? min : t;
        }
    printf("%lf", min);
    return 0;
}
```

算法复杂度是：O（n<sup>2</sup>）

## 解法二：分治法

1. 先将点集按照x坐标的大小进行排序
2. 递归进行3，4，5步骤
3. 取一条中线，将点集分成左右两部分，尽量把点集分为数量相同的两半，找出左边最小的点距离DL和右边最小的点距离DR，取二者的较小者minD=min(DL,DR)
4. 合并：以中线为中心，半径为minD做圆，将左右两边的点中处于该圆的点保存在一个数组中，求出这些点中的最小距离，关于这个距离，可以先按照y坐标的大小进行排序，接着， 对于每一个点P0(x1,y1)，只要计算出紧接在P0后面的6个点和P0之间的距离，取较小值，该值就是P0和距离DR中的点的最小值（假设P0在DL），计算该数组中的每一个点的最小值，并找出在这里边的最小值m。
5. 取m和minD的较小者，即为所求。

```c
/*
 * @Description:
 * @Author: Yale_Xin
 * @Date: 2020-04-02 15:59:50
 * @LastEditTime: 2020-04-02 21:03:04
 * @LastEditors: Yale_Xin
 */
#include <math.h>
#include <stdio.h>
// 交换两个数的宏定义
#define swap(a, b)    \
    {                 \
        mPoint t = a; \
        a = b;        \
        b = t;        \
    }
// 计算两个点之间的距离函数
double distance(double x1, double y1, double x2, double y2) {
    return sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
}
typedef struct point {
    double x, y;
} mPoint;
mPoint p[100], mid[100];
int n;
void q_sort(int l, int r) {
    if (l >= r)
        return;
    int i = l, j = i + 1;
    mPoint key = p[l];
    for (; j <= r; j++) {
        if (p[j].x <= key.x) {
            i++;
            swap(p[i], p[j]);
        }
    }
    swap(p[l], p[i]);
    q_sort(l, i - 1);
    q_sort(i + 1, r);
}
void q_sort_y(int l, int r) {
    if (l >= r)
        return;
    int i = l, j = i + 1;
    mPoint key = mid[l];
    for (; j <= r; j++) {
        if (mid[j].y <= key.y) {
            i++;
            swap(mid[i], mid[j]);
        }
    }
    swap(mid[l], mid[i]);
    q_sort(l, i - 1);
    q_sort(i + 1, r);
}
double find_minD(int l, int r) {
    if (r - l == 2) {
        double d1, d2, d3;
        d1 = distance(p[l].x, p[l].y, p[r + 1].x, p[r + 1].y);
        d2 = distance(p[l].x, p[l].y, p[r].x, p[r].y);
        d3 = distance(p[l + 1].x, p[l + 1].y, p[r].x, p[r].y);
        d1 = d1 < d2 ? d1 : d2;
        d1 = d1 < d3 ? d1 : d3;
        return d1;
    } else if (l + 1 == r) {
        return distance(p[l].x, p[l].y, p[r].x, p[r].y);
    } else {
        // 分别是距离中线距离小于min的点的数量、中线位置
        int number = 0, mid_x = p[(l+r)/2].x;
        double Lmin, Rmin, min, mid_min = 32767;
        Lmin = find_minD(l, (l+r) / 2);
        Rmin = find_minD((l+r) / 2 + 1, r);
        min = Lmin < Rmin ? Lmin : Rmin;
        // 以中线为为中心，寻找左右两边中距离中线距离小于等于min的点
        for (int i = l; i <= r; i++) {
            if ((p[i].x - mid_x) < min) {
                mid[number++] = p[i];
            }
        }
        // 将得到的数组根据坐标y的值进行排序 求出该数组中最小点对值
        if (number > 0) {
            q_sort_y(0, number - 1);
            for (int i = 0; i < number - 1; i++) {
                int count = 0;
                for (int j = i + 1; j < number; j++) {
                    double t = distance(p[i].x, p[i].y, p[j].x, p[j].y);
                    mid_min = mid_min < t ? mid_min : t;
                    if (++count > 7) {
                        break;
                    }
                }
            }
        }
        return min < mid_min ? min : mid_min;
    }
}
int main() {
    double min_d;
    scanf("%d", &n);
    for (int i = 1; i <= n; i++) {
        scanf("%lf %lf", &p[i].x, &p[i].y);
    }
    //先按照x坐标进行排序
    q_sort(1, n);
    
    min_d = find_minD(1, n);
    printf("%lf",min_d);
    return 0;
}
```

算法复杂度是：O（nlogn）', description='## 问题描述

对于给定的n个点，求出这些点的最小的距离。

## 解法一：暴力法

遍历任意两点之间的距离，找出最小值。<!--more-->

```c
/*
 * @Description:
 * @Author: Yale_Xin
 * @Date: 2020-04-02 20:37:23
 * @LastEditTime: 2020-04-02 21:23:54
 * @LastEditors: Yale_Xin
 */', views=0, published=true, tagIds='null', createTime=Thu Apr 02 21:04:00 CST 2020, updateTime=Thu Apr 02 21:04:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=27, name='Git和远程仓库建立连接', content='
今天因为一些不可抗力因素重装了系统，发现`git`环境丢失了，就不得不重新配置一下`git`，顺便把过程写下来吧。

## git下载安装

安装过程直接默认，一直`next`就可以了。

## 代码托管平台账号注册

`git`下载安装期间到第三方代码托管平台注册账户，开启一个远程仓库，记住该远程仓库的链接。

以码云为例：

![仓库截图]( http://q78fmp2j4.bkt.clouddn.com/1586182061136.png )

## 设置用户名和邮箱

在`cmd`命令行或者用安装`git`时自带的`Git bash`输入下面的命令

```shell
git config --global user.name "根据自己喜好进行设置用户名" 
git config --global user.email "自己常用的邮箱"
```

## 生成密钥

```shell
ssh-keygen -t rsa -C "这里换上你的邮箱"
```

上面这条命令在`cmd`命令行下可能会失败，用安装`git`时自带的`Git bash`就可以成功了，然后按照提示按下三次回车。

![密钥图片]( http://q78fmp2j4.bkt.clouddn.com/1586182931481.png )

## 第三方平台添加密钥

将上述生成的`/c/Users/YaleXin/.ssh/id_rsa.pub`文件中的内容复制，打开码云，在设置 -->SSH公钥处粘贴所复制的内容。

## 初始化本地仓库

在需要的地方地方打开`Git bash`，输入：

```shell
git init
```



## 将本地修改提交到远程仓库

随便修改一个文件，如新建一个`test.txt`，然后在`Git bash`输入下面的命令：

暂存更改：

```shell
git add .
```

提交更改：

```shell
git commit -m "你的提交备注"
```

连接远程仓库

```
git remote add origin 你的远程仓库地址
```

可以使用`HTTPS`或者`SSH`的方式。

从远程仓库拉取（若远程仓库没有任何数据，可以跳过这个步骤，否则输入：）

```shell
git pull
```

推送到远端

```shell
git push -u origin master
```

上面的命令是第一次提交的时候使用的命令，假如是非第一次，直接使用`git push`即可', description='今天因为一些不可抗力因素重装了系统，发现`git`环境丢失了，就不得不重新配置一下`git`，顺便把过程写下来吧。

## git下载安装

安装过程直接默认，一直`next`就可以了。<!--more-->

## 代码托管平台账号注册

`git`下载安装期间到第三方代码托管平台注册账户，开启一个远程仓库，记住该远程仓库的链接。', views=0, published=true, tagIds='null', createTime=Mon Apr 06 22:56:00 CST 2020, updateTime=Mon Apr 06 22:56:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=28, name='Java的环境配置（Windows系统）', content='## 下载安装jdk

[甲骨文官网]( https://www.oracle.com/java/technologies/javase-downloads.html )

从甲骨文下载好后，安装过程把安装的路径记住，或者更改到自己喜欢的路径。

## 新建系统变量

右击“此电脑”，依次点击“属性”，“高级系统设置”，“环境变量”，在“系统变量”处新建以下变量：

| 变量名    | 变量值                                                |
| --------- | ----------------------------------------------------- |
| JAVA_HOME | jdk的位置，如`D:\Java\jdk-14`                         |
| CLASSPATH | `.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;` |

 **jdk1.5版本以上不需要设置`CLASSPATH`变量**

如果在`jdk`安装目录下没有`jre`的文件下，只要在命令行模式下进入该`jdk`的安装目录，输入下面的命令：

```shell
bin\jlink.exe --module-path jmods --add-modules java.desktop --output jre
```

就可以生成了`jre`的相关文件了。

然后在`path`变量中添加两条变量值：

![1586233918848]( http://q78fmp2j4.bkt.clouddn.com/1586233918848.png )

并且`%JAVA_HOME%\bin`必须在前面，否则可能出现下面这种错误：

![1586234001560]( http://q78fmp2j4.bkt.clouddn.com/1586234001560.png )

## 验证

在命令行中输入下面的命令，能正常显示版本号就说明环境配置成功了。

```shell
java -version
javac -version
```

', description='## 下载安装jdk

[甲骨文官网]( https://www.oracle.com/java/technologies/javase-downloads.html )

从甲骨文下载好后，安装过程把安装的路径记住，或者更改到自己喜欢的路径。', views=0, published=true, tagIds='null', createTime=Tue Apr 07 13:11:00 CST 2020, updateTime=Tue Apr 07 13:11:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=29, name='利用并查集求最小生成树', content='
## 什么是 Kruskal 算法？

**Kruskal** 算法是求最小生成树的一种方法，有点类似于贪心算法，首先是按照边的权值从小到大进行排序，然后不断地将较小的边加入到过程解的集合，关键是要解决回路的问题，而利用并查集就可以很好地解决这个问题，即每次添加边之前，判断该边的两个顶点是否是处于相同的集合，相同就跳过，否则加入到过程解中，重复这个过程，知道最后只有一个集合，该集合即为所求。

## 题目：

来源于[洛谷]( https://www.luogu.com.cn/problem/P3366 )

### 题目描述

如题，给出一个无向图，求出最小生成树，如果该图不连通，则输出 `orz`。

### 输入格式

第一行包含两个整数 N,*M*，表示该图共有 *N* 个结点和 *M* 条无向边。

接下来 *M* 行每行包含三个整数 X<sub>i</sub>，  Y<sub>i</sub>，  Z<sub>i</sub>，表示有一条长度为   Z<sub>i</sub> 的无向边连接结点   X<sub>i</sub>，  Y<sub>i</sub>

### 输出格式

如果该图连通，则输出一个整数表示最小生成树的各边的长度之和。如果该图不连通则输出 `orz`。

## 求解：

```c
/*
 * @Author: YaleXin
 * @Date: 2020-01-21 11:11:04
 * @LastEditTime: 2020-04-10 22:51:47
 * @LastEditors: YaleXin
 * @Description:
 * @FilePath: \my_c_workspace\luo_gu\P3366.c
 * @祈祷不出现BUG
 */
#include <stdio.h>  //利用kruskal算法
int arc[200001][3], n, m;  // arc的最后一个代表权值，前两个代表邻接点
int arc_index[200001];  //存放边的编号,排序后得到的是按照边权值升序的编号
int anc[200001];  //并查集辅助数组,存放每一个点属于的集合
int find_anc(int son) {
    if (anc[son] == son)
        return son;
    else {
        //压缩路径
        anc[son] = find_anc(anc[son]);
        return anc[son];
    }
}
void q_sort(int left, int right) {
    if (left >= right) return;
    int l = left, r = right, piv = arc_index[left];
    while (l < r) {
        while (l < r && arc[arc_index[r]][2] >= arc[piv][2]) r--;
        arc_index[l] = arc_index[r];
        while (l < r && arc[arc_index[l]][2] <= arc[piv][2]) l++;
        arc_index[r] = arc_index[l];
    }
    arc_index[l] = piv;
    q_sort(left, l - 1);
    q_sort(r + 1, right);
}
int main() {
    int i, sum = 0;
    scanf("%d %d", &n, &m);
    for (i = 0; i < n; i++) anc[i] = i;  //刚开始每一个点是单独的集合
    for (i = 0; i < m; i++) {
        scanf("%d %d %d", &arc[i][0], &arc[i][1], &arc[i][2]);
        arc_index[i] = i;
    }
    q_sort(0, m - 1);          //将边的权值排序
    for (i = 0; i < m; i++) {  //依次把最小的边进行“并”
        // 如果同属于“祖先”，则跳过
        if (find_anc(arc[arc_index[i]][1]) == find_anc(arc[arc_index[i]][0]))
            continue;
        // 如果不同，则说明是符合，可以添加
        else {
            anc[find_anc(anc[arc[arc_index[i]][0]])] = arc[arc_index[i]][1];
            sum += arc[arc_index[i]][2];
        }
    }
    printf("%d", sum);
    return 0;
}
/*
4 5
1 2 2
1 3 8
1 4 3
2 3 4
3 4 3
*/
```



', description='## 什么是 Kruskal 算法？

**Kruskal** 算法是求最小生成树的一种方法，有点类似于贪心算法，首先是按照边的权值从小到大进行排序，然后不断地将较小的边加入到过程解的集合，关键是要解决回路的问题，而利用并查集就可以很好地解决这个问题，即每次添加边之前，判断该边的两个顶点是否是处于相同的集合，相同就跳过，否则加入到过程解中，重复这个过程，知道最后只有一个集合，该集合即为所求。<!--more-->', views=0, published=true, tagIds='null', createTime=Fri Apr 10 22:52:00 CST 2020, updateTime=Fri Apr 10 22:52:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=30, name='Linux下使用GDB调试C程序', content='

在Windows上利用vs code等IDE（虽然是vs code不能算得上IDE）是很方便进行程序的调试，但是在没有图形界面的Linux环境下如何进行调试？答案就是借助`GDB`类似的调试器。

> 文章摘录自[linux tools quick tutoril]( https://linuxtools-rst.readthedocs.io/zh_CN/latest/base/ )中的[gdb调试利器]( https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/gdb.html )

<!--more-->GDB是一个由GNU开源组织发布的、UNIX/LINUX操作系统下的、基于命令行的、功能强大的程序调试工具。

对于一名Linux下工作的c++程序员，gdb是必不可少的工具；

有些系统没有默认安装，需要自己安装：

```shell
yum install gdb
```

例如，有一个c程序：

```c
#include<stdio.h>
int main(){
    printf("hello\n");
    printf("world");
    return 0;
}

```

对C/C++程序的调试，需要在编译前就加上-g选项:

```
$gcc -g hello.c -o hello  # C++程序使用g++
```

调试可执行文件:

```
$gdb hello
```

然后进入交互界面，通过下面的命令进行调试：

运行类命令：

| 命令            | 说明                                                         |
| --------------- | ------------------------------------------------------------ |
| run，简写r      | 运行程序，当遇到断点后，程序会在断点处停止运行，等待用户输入下一步的命令。 |
| continue 简写c  | 继续执行，到下一个断点处（或运行结束）                       |
| step 简写s      | 单步调试如果有函数调用，则进入函数；                         |
| next 简写n      | 单步跟踪程序，当遇到函数调用时，也不进入此函数体；此命令同 step 的主要区别是，step 遇到用户自定义的函数，将步进到函数中去运行，而 next 则直接调用函数，不会进入到函数体内 |
| until           | 当你厌倦了在一个循环体内单步跟踪时，这个命令可以运行程序直到退出循环体 |
| until+行号      | 运行至某行，不仅仅用来跳出循环                               |
| finish          | 运行程序，直到当前函数完成返回，并打印函数返回时的堆栈地址和返回值及参数值等信息。 |
| call 函数(参数) | 调用程序中可见的函数，并传递“参数”，如：call gdb_test(55)    |
| quit简写q       | 推出gdb交互界面                                              |

设置断点类：

| 命令               | 说明                                                         |
| ------------------ | ------------------------------------------------------------ |
| break n 简写 b n   | 在程序的第n行设置断点                                        |
| b  n if conditions | 满足conditions条件时候在第n行设置断点                        |
| b functionName     | 在函数functionName()的入口处设置断点                         |
| delete n           | 删除第n个断点                                                |
| clear n            | 清除第n行的断点 注意和delete的区别，删除函数的入口断点也是使用该命令 |
| disable n          | 暂停第n个断点                                                |
| enable n           | 开启第n个断点                                                |
| info b             | 显示当前程序的断点设置情况                                   |
| delete breakpoints | 清除所有断点                                                 |

查看源代码类：

| 命令              | 说明                                                         |
| ----------------- | ------------------------------------------------------------ |
| list 简写l        | 列出程序的源代码，默认每次显示10行。<br>再次输入则将从上次输出的位置开始输出<br>**注意：**生成可执行程序的时候如果没有加上`-g`选项的话，该命令是不能够执行的 |
| list n            | 将显示当前文件以第n行为中心的前后10行代码，如：list 5        |
| list functionName | 将显示“函数名”所在函数的源代码，如：list main   或者 list test |

打印表达式类：

| 命令                       | 说明                                                         |
| -------------------------- | ------------------------------------------------------------ |
| print 表达式               | 表达式可以是程序中的变量，也可以是自己定义的表达式，如<br>`print 2 * 2`，类似于C语言的`printf`函数 |
| print func_name(p1,p1,...) | 例如，调用求和函数并且打印结果`print sum(1,2,3)`             |
| display 表达式             | 单步运行时每执行一步都打印表示式的内容。                     |
| info locals                | 显示当前堆栈页的所有变量                                     |

查询运行信息

| 命令          | 说明                                           |
| ------------- | ---------------------------------------------- |
| where/bt      | 当前运行的堆栈列表                             |
| bt backtrace  | 显示当前调用堆栈                               |
| up/down       | 改变堆栈显示的深度                             |
| set args 参数 | 指定运行时的参数                               |
| show args     | 查看设置好的参数                               |
| info program  | 来查看程序的是否在运行，进程号，被暂停的原因。 |

分割窗口

| 命令         | 说明                                     |
| ------------ | ---------------------------------------- |
| layout       | 用于分割窗口，可以一边查看代码，一边测试 |
| layout src   | 显示源代码窗口                           |
| layout asm   | 显示反汇编窗口                           |
| layout regs  | 显示源代码/反汇编和CPU寄存器窗口         |
| layout split | 显示源代码和反汇编窗口                   |
| Ctrl + L     | 刷新窗口                                 |

**交互模式下直接回车的作用是重复上一指令，对于单步调试非常方便； **

', description='在Windows上利用vs code等IDE（虽然是vs code不能算得上IDE）是很方便进行程序的调试，但是在没有图形界面的Linux环境下如何进行调试？答案就是借助`GDB`类似的调试器。', views=0, published=true, tagIds='null', createTime=Wed Apr 15 12:57:00 CST 2020, updateTime=Wed Apr 15 12:57:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=31, name='shell字符串截取', content='
## 使用 # 号截取右边字符

格式为：

```
${url#*childStr}
```

childStr可以是字符串或者是特定字符，将返回匹配**第一个**`childStr`后的字符串<!--more-->

```shell
file_name="test.txt"
echo ${file_name#*.}
```

将输出`txt`

如果希望匹配**最后一个**`childStr`后的字符串,可以使用`##`

```shll
file_name="test.tar.gz"
echo ${file_name##*.}
```

将返回`gz`

## 使用 % 号截取左边字符

格式为：

```
${url%childStr*}
```

例如：

```shell
#!/bin/bash
file_name="test.tar.gz"
echo ${file_name%.*}
echo ${file_name%%.*}
```

将输出

```
test.tar
test
```

## 截取指定个数字符串

- 从字符串左边

  语法：

  ```
  c
  ```

  例如：

  ```shell
  str="abcdefghijkl"
  echo ${str:2:100}
  ```

  输出`cdefg`，即输出从`startIndex`开始长度是`length`的字符串，当`length`超出最后一个元素的界限或者是缺省时将输出从`startIndex`直至末尾。

- 从字符串右边

  通常的语法：

  ```
  ${string: 0-startIndex :length}
  
  
  ```

  例如

  ```
  str="abcdefghijkl"
  echo ${str:0-7:3}
  
  
  ```

  将输出`fgh`，因为从右边往左边数，c，当然也可以这样：

  ```
  str="abcdefghijkl"
  echo ${str:1-7:3}
  
  
  ```

  此时的输出就变成了：`ghi`,可以这样理解：第七个字符是`f`，然后再往后偏移一个字符，再从这里开始截取三个字符。', description='## 使用 # 号截取右边字符

格式为：

```
${url#*childStr}
```

childStr可以是字符串或者是特定字符，将返回匹配**第一个**`childStr`后的字符串<!--more-->

```shell
file_name="test.txt"
echo ${file_name#*.}
```

将输出`txt`', views=0, published=true, tagIds='null', createTime=Sun Apr 19 14:49:00 CST 2020, updateTime=Sun Apr 19 14:49:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=32, name='进程之间使用共享内存通信', content='## 共享内存

共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。<!--more-->

但是它并未提供同步机制，即在某一个进程结束对共享内存的写操作之前，并不能可以阻止第二个进程开始对它进行读取，因此我们需要人为阻止通过其他机制进行同步。

## shmget()函数

用于得到一个共享内存标识符或创建一个共享内存。

函数原型：

```c
int shmget(key_t key, size_t size, int shmflg);
```

| 参数   | 说明                                                         |
| ------ | ------------------------------------------------------------ |
| key    | 标识共享内存的键值，shmget()函数成功时返回一个与key相关的共享内存标识符（非负整数），用于后续的共享内存函数。调用失败返回-1. |
| size   | 指明共享内存的大小，以字节为单位                             |
| shmflg | 权限标志<br>IPC_CREAT  如果共享内存不存在，则创建一个共享内存，否则打开操作。<br/>  IPC_EXCL  只有在共享内存不存在的时候，新的共享内存才建立，否则就产生错误。 |

## shmat()函数

第一次创建完共享内存后，它还不能被任何进程访问，`shmat()`函数的作用就是用来启动对该共享内存的访问，并把共享内存连接到当前进程的地址空间。

原型：

```c
void *shmat(int shmid, const void *shmaddr, int shmflg)
```

| 参数    | 说明                                                         |
| ------- | ------------------------------------------------------------ |
| shmid   | 共享存储的id，如shmget()函数的返回值                         |
| shmaddr | 指定共享内存连接到当前进程中的地址位置，一般为0，表示让内核自己决定一个合适的地址位置 |
| shmflg  | SHM_RDONLY：为只读模式，其他为读写模式，如0                  |

调用成功时返回一个指向共享内存第一个字节的指针，如果调用失败返回-1。

## shmdt()函数

与`shmat`函数相反，是用来断开与共享内存附加点的地址，禁止本进程访问此片共享内存，但是并不是删除该共享内存。

原型：

```c
int shmdt(const void *shmaddr);
```

**shmaddr**:连接的共享内存的起始地址，如`shmat()`函数的返回值。调用成功的时候返回0，失败时返回-1。

## shmctl()函数

控制共享内存。

原型：

```c
int shmctl(int shm_id, int command, struct shmid_ds *buf);
```

| 参数    | 说明                                                         |
| ------- | ------------------------------------------------------------ |
| shm_id  | 共享内存标识符，如shmget()的返回值                           |
| command | 一些命令，如<br>IPC_STAT：得到共享内存的状态，把共享内存的shmid_ds结构复制到buf中<br>IPC_SET：如果进程有足够的权限，就把共享内存的当前关联值设置为shmid_ds结构中给出的值<br>IPC_RMID：删除这片共享内存 |
| buf     | 共享内存管理结构体。                                         |

shmid_ds结构 至少包括以下成员：

```
struct shmid_ds
{
    uid_t shm_perm.uid;
    uid_t shm_perm.gid;
    mode_t shm_perm.mode;
};
```

例如一个简单的例子，父子进程通过共享内存的方式进行通信：

```c
/*
 * @Author: YaleXin
 * @Date: 2020-04-22 14:22:16
 * @LastEditTime: 2020-04-22 21:38:34
 * @LastEditors: YaleXin
 * @Description:
 * @FilePath: \my_c_workspace\others\shareMemory.c
 * @祈祷不出现BUG
 */
#include <stdio.h>
#include <string.h>
#include <sys/shm.h>
#include <unistd.h>
struct shareMemoryDate {
    int mod;
    char msg[100];
};
int main() {
    int *shm = NULL;
    struct shareMemoryDate *share;
    // 创建一个共享内存
    // IPC_CREAT表示如果共享内存不存在，则创建一个共享内存，否则打开操作。
    // 需要与IPC对象存取权限（如0600）进行|运算来确定信号量集的存取权限
    int shm_id =
        shmget((key_t)0, sizeof(struct shareMemoryDate), 0600 | IPC_CREAT);
    if (shm_id == -1) {
        printf("创建共享内存失败，我也不知为什么\n");
        return 0;
    }
    int pId = fork();
    if (pId == -1) {
        printf("创建子进程失败，我也不知为什么\n");
    } else if (pId == 0) {
        //子进程
        // 将共享内存连接到当前进程的地址空间
        shm = shmat(shm_id, 0, 0);
        if (shm == NULL) {
            printf("链接失败，我也不知为什么\n");
            return 0;
        }
        share = (struct shareMemoryDate *)shm;
        char buffer[100];
        printf("我是子进程，请输入想要写入共享内存的内容:\n");
        fgets(buffer, sizeof(buffer), stdin);
        strcpy(share->msg, buffer);
        // 表示将数据写入完毕
        share->mod = 1;
        // 把共享内存从当前进程中分离
        if (shmdt(shm) == -1) {
            printf("分离失败，我也不知为什么\n");
        }
    } else if (pId > 0) {
        //父进程
        // 将共享内存连接到当前进程的地址空间
        shm = shmat(shm_id, 0, 0);
        if (shm == NULL) {
            printf("链接失败，我也不知为什么\n");
            // 删除共享内存
            if (shmctl(shm_id, IPC_RMID, 0) == -1) {
                printf("（无法链接）删除共享内存失败，我也不知为什么\n");
                return 0;
            }
        }
        share = (struct shareMemoryDate *)shm;
        //等待子进程写入完毕
        while (share->mod != 1) sleep(1);
        printf("我是父进程，让我看看我的子进程在共享内存里边写了什么东西：\n");
        printf("%s\n", share->msg);
        printf("噢，原来是这些鬼玩意\n");
        // 删除共享内存
        if (shmctl(shm_id, IPC_RMID, 0) == -1) {
            printf("(读取完毕)删除共享内存失败，我也不知为什么\n");
        }
    }
    return 0;
}
```

调试：

```shell
yalexin@yalexin-PC:/media/yalexin/软件/my_c_workspace/others$ gcc -o share shareMemory.c
yalexin@yalexin-PC:/media/yalexin/软件/my_c_workspace/others$ ./share
我是子进程，请输入想要写入共享内存的内容:
你好啊
我是父进程，让我看看我的子进程在共享内存里边写了什么东西：
你好啊

噢，原来是这些鬼玩意
yalexin@yalexin-PC:/media/yalexin/软件/my_c_workspace/others$ 
```

', description='## 共享内存

共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。<!--more-->

但是它并未提供同步机制，即在某一个进程结束对共享内存的写操作之前，并不能可以阻止第二个进程开始对它进行读取，因此我们需要人为阻止通过其他机制进行同步。', views=0, published=true, tagIds='null', createTime=Wed Apr 22 21:41:00 CST 2020, updateTime=Wed Apr 22 21:41:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=33, name='通过编译内核的方式增加系统调用', content='

> Ubuntu 版本：20.04 LTS
>
> 虚拟机配置：硬盘：40 GB 内存：4 GB
>
> 内核版本：5.4.0.26-generic
>
> VMware 版本：15.5.0

## 前期准备

编译的时候需要一些库，所以要提前安装：

```
sudo apt-get install libncurses5-dev
```

```
sudo apt-get install bison
```

```
sudo apt-get install flex
```

```
sudo apt-get install libssl-dev
```

```
sudo apt-get install 
```

```
sudo apt-get install build-essential
```

```
sudo apt-install kernel-package
```

这么多？？好吧，其实不一定需要全部，部分Linux发行版可能自带，可以先跳过这一步，先做后面的事情，前提是自己先做好中途出现`error`的准备！中途出现错误的话可以根据提示安装即可。

## 查看自己内核版本

```shell
uname -a
```

我的是 5.4.0.26-generic

## 下载内核

尽量下载和自己内核相近的内核,避免版本跨度过大引起不兼容情况。下面是网址

```
http://cdn.kernel.org/pub/linux/kernel

```

我下载的是`linux-5.3.9.tar.xz`

## 解压缩内核文件

首先将上面的内核文件移动到`/usr/src/`目录下

在`/usr/src/`目录下打开终端

解压

```
sudo xz -d linux-5.3.9.tar.xz

```

解包

```
sudo tar -xvf linux-5.3.9.tar

```

## 加入函数

解包完毕之后会出现一个`linux-5.3.9`文件夹，进入该文件夹的`kernel`文件夹中

```
cd linux-5.3.9/kernel


```

编辑`sys.c`文件，在末尾加入函数：

```c
asmlinkage long sys_hello(void){
    prink("hello syscall!");
    return 1;
}

```

## 添加函数声明

进入`/usr/src/linux-5.3.9/arch/x86/include/asm`

编辑 `syscalls.h`，加入我们的`sys_hello`函数：

![](https://q.yalexin.top/1588224505122.png)

## 给我们的系统调用分配一个id

打开`/usr/src/linux-5.3.9/arch/x86/entry/syscalls/syscall_64.tbl`，

一定要确保不会跟已有的冲突

我加的是

548 64 hello sys_hello

![](https://q.yalexin.top/1588225138576.png)

## 配置内核

进入到`/usr/src/linux-5.3.9`目录下，依次执行

```
sudo make mrproper

```

```
sudo make clean

```

```
sudo make menuconfig

```

假如执行`sudo make menuconfig`时候出现下面的错误

![](https://q.yalexin.top/1588253321277.png)

将虚拟机全屏即可（撑满屏幕）

然后出现该页面，直接`save`，然后`exit`。

![](https://q.yalexin.top/1588253775435.png)
然后就可以通过下面的命令编译我们的内核了

```
sudo make

```

该过程大概持续几个小时，反正我是放后台，然后先去睡觉的~~。

**但是！等我睡醒才发现，电脑自动休眠了！白白浪费了一个晚上的时间，所以提醒编译之前将电脑的休眠模式关闭。还有编译过程会产生大量中间文件，建议硬盘给够 40 GB**

![](https://q.yalexin.top/1588329524537.png)

出现类似上面的信息就说明编译成功了。

## 生成modules

```
sudo make modules

```

这个过程也需要一定的时间。

## 安装modules

```
sudo make modules_install

```

## 将内核安装进系统中

```
sudo make install

```

## 重启并测试

重启过程进入高级选项

刚刚重启的时候按下`ESC`（网上说是`ESC`，但是我的是长按`Shift`）

![](https://q.yalexin.top/1588383413241.png)

选择高级选项，然后选择新内核

![](https://q.yalexin.top/1588383460106.png)

假如进入内核的过程出现`kernel panic not syncing:System is deadlocked on memory`错误，只需要将内存增大即可。

新建测试源程序`testMyCall.c`

```c
#include<stdio.h>
#include<sys/syscall.h>
#include<unistd.h>
#include<stdio.h>
int main(){
    // syscall 需要传递一个系统调用编号
	long int myRetutn = syscall(548);
    printf("syscall return: %ld",myRetutn);
	return 0;
}

```

编译运行

```shell
gcc testMyCall.c -o test
./test
syscall return: 1

```

**我们发现并没有输出`hello syscall!`**,是因为日志输出级别问题，只需要调用`dmesg`命令即可。

', description='> Ubuntu 版本：20.04 LTS
>
> 虚拟机配置：硬盘：40 GB 内存：4 GB
>
> 内核版本：5.4.0.26-generic
>
> VMware 版本：15.5.0', views=0, published=true, tagIds='null', createTime=Sat May 02 09:41:00 CST 2020, updateTime=Sat May 02 09:41:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=34, name='浅谈设计模式之单例模式', content='
单例模式： 保证一个类仅有一个实例，并提供一个访问它的全局访问点， 目的是为了保证在一个进程中，某个类有且仅有一个实例。 

要做到这点，必须将构造方法进行私有，防止外部通过构造方法进行实例化该类，在类内部提供方法引用唯一创建的实例。

## 实现方式

### 懒汉模式

```java
package study.design.singleton;

public class Singleton {
    private static Singleton instance = null;

    public static Singleton getInstance() {
        if (instance == null) {
            instance = new Singleton();
        }
        return instance;
    }

    private Singleton() {
    }
}
```

这样外部类就不能通过构造方法进行实例化该类，只能通过`Singleton.getInstance()`的方式进行获取唯一的对象。但是很遗憾，该方式没有考虑多线程的情况，不同的线程同时调用`Singleton.getInstance()`的时候很有可能会实例化多个对象。因此需要对`getInstance()`进行加锁

### 加强版懒汉模式（线程安全）

给加上`getInstance()`，加上`synchronized`关键字

```java
package study.design.singleton;

public class Singleton {
    private static Singleton instance = null;

    public static synchronized Singleton getInstance() {
        if (instance == null) {
            instance = new Singleton();
        }
        return instance;
    }

    private Singleton() {
    }
}
```

这样多线程并发执行`getInstance()`的时候，就只有最早拿到锁的线程能够执行`instance = new Singleton()`，其他的线程从阻塞队列中下来的时候`Singleton`已经被实例化了，因此不会执行`instance = new Singleton()`，从而确保多线程安全。 遗憾的是，由于synchronized的存在，效率很低，在单线程的情景下，完全可以去掉synchronized，为了兼顾效率与性能问题，改进后代码如下： 

```java
package study.design.singleton;

public class Singleton {
    private static Singleton instance = null;

    public static Singleton getInstance() {
        if (instance == null) {
            synchronized (Singleton.class) {
                if (instance == null) {
                    instance = new Singleton();
                }
            }
        }
        return instance;
    }

    private Singleton() {
    }
}
```

该方法也叫**“双重校验法”**，在`instance != null`的时候，就不会进行加锁操作，提升了系统性能。但是理论是美好的，而现实是残酷的， 由于Java的内存模型 ，上述代码在执行期间还是有些不同，具体参照[这篇文章]( https://blog.csdn.net/chenchaofuck1/article/details/51702129 )

### 饿汉模式

```java
package study.design.singleton;

public class Singleton {
    private static Singleton instance = new Singleton();

    public static synchronized Singleton getInstance() {
        return instance;
    }

    private Singleton() {
    }
}
```

该模式在加载该类的时候直接实例化该类，因此不管用与不用都占着空间，如果项目中有大量单例对象，则可能会浪费大量内存空间 

### 静态内部类加载

```java
package study.design.singleton;

public class Singleton {
    public static Singleton getInstance() {
        return SingletonHolder.instance;
    }

    private static class SingletonHolder {
        private static Singleton instance = new Singleton();
    }

    private Singleton() {
    }
}
```

该模式在加载`Singleton`类的时候不会直接实例化该类，而是调用`getInstance()`后才实例化`Singleton`类，做到了懒加载的效果，而且是线程安全的。

### 借助枚举类

```java
package study.design.singleton;

public enum Singleton {
    INSTANCE;
}
```

是不是十分的简洁？这种方式解决了以下三个问题：

- 自由序列化。关于序列化，[这里]( https://www.runoob.com/java/java-serialization.html )有比较详细的介绍
- 保证只有一个实例。
- 线程安全。

引用实例对象的时候只需要：`Singleton singleton = Singleton.INSTANCE`即可，当然了，我们也可以像常规类一样添加变量和方法：

```java
package study.design.singleton;

public enum Singleton {
    INSTANCE;
    private String name = "INSTANCE";
    public String getName() {
        return name;
    }
}
```

调用的时候只需`Singleton.INSTANCE.getName()`。

但是在`Android`平台上面，`Android`官方不建议使用枚举类实现单例， 因为内存消耗会其他方式多一些 。

## 总结

单例的实现方式有多种，该怎么选择需要根据实际情况考虑，如果说不考虑多线程则直接使用懒汉模式，简单又节约，如果说考虑多线程则建议使用双重校验法或者静态内部法，或者如果说确保项目中使用单例情况非常少，则可以考虑使用枚举实现。', description='单例模式： 保证一个类仅有一个实例，并提供一个访问它的全局访问点， 目的是为了保证在一个进程中，某个类有且仅有一个实例。 

要做到这点，必须将构造方法进行私有，防止外部通过构造方法进行实例化该类，在类内部提供方法引用唯一创建的实例。', views=0, published=true, tagIds='null', createTime=Thu May 07 12:48:00 CST 2020, updateTime=Thu May 07 12:48:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=35, name='设计模式之静态代理', content='## 代理模式定义

代理模式又叫委托模式，为某一个对象提供一个代理对象，代理通过访问原对象，使得真正实施动作的是原对象。一个简单的例子就是：

一个厨师想要做饭的时候，他必须要有食材，做完饭之后需要清理厨具，但是对于厨师来说，他的任务就是做饭，其他的事情他不想插手，那么他就可以雇用一个帮手，为他做这些准备工作和处理工作。

代理模式一般可分为静态代理和动态代理：

- 静态代理： 由程序员创建或工具生成代理类的源码，再编译代理类。 静态代理也就是意味着程序运行之前就已经自动生成代理类的字节码文件，代理类和委托类的关系就已经确认下来。
- 动态代理： 动态代理类的源码是在程序运行期间由JVM根据反射等机制动态的生成，过程不会生成多余的字节码文件，代理类和委托类的关系在运行时期确认。

本文只讨论静态代理。

## 代码说明

```java
package study.design.proxy;

public class StaticProxy {
    public static void main(String[] args) {
        Cook chef  = new Chef();
        Cook chefProxy = new ChefProxy(chef);
        chefProxy.cook();
    }
}
// 委托类和代理类都要实现该接口
interface Cook {
    void cook();
}

class Chef implements Cook {

    @Override
    public void cook() {
        // 具体的实际实现逻辑
        System.out.println("=======厨师做饭啦=======");
    }
}

class ChefProxy implements Cook {
    private Cook chef = null;

    // 默认代理自己
    public ChefProxy() {
        this.chef = new ChefProxy();
    }

    // 指明需要代理的对象
    public ChefProxy(Cook chef) {
        this.chef = chef;
    }

    @Override
    public void cook() {
        this.before();
        this.chef.cook();
        this.after();
    }

    // 预处理
    private void before() {
        System.out.println("=======食材准备完毕=======");
    }

    // 后处理
    private void after() {
        System.out.println("=======厨具清理完毕=======");
    }

}
```

控制台输出

```
=======食材准备完毕=======
=======厨师做饭啦=======
=======厨具清理完毕=======
```

- 优点：委托类只关心具体的逻辑，无需浪费时间在其他无关事务上面；代理类还可以实现对委托类的管控，例如说上文的例子，假如某道菜厨师不会做或者不在行，帮手可以提醒或者直接拒绝厨师的行为，即根据对象的权限来进行实施动作。
- 不足：
  - 需要代理的逻辑方法比较少的时候难度不大，假如方法非常多的时候，代码量就会非常多
  - 接口增加方法的时候，不仅仅委托类需要实现该方法，代理类也需要实现该方法，代码维护难度大。

', description='## 代理模式定义

代理模式又叫委托模式，为某一个对象提供一个代理对象，代理通过访问原对象，使得真正实施动作的是原对象。一个简单的例子就是：

一个厨师想要做饭的时候，他必须要有食材，做完饭之后需要清理厨具，但是对于厨师来说，他的任务就是做饭，其他的事情他不想插手，那么他就可以雇用一个帮手，为他做这些准备工作和处理工作', views=0, published=true, tagIds='null', createTime=Sun May 10 09:17:00 CST 2020, updateTime=Sun May 10 09:17:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=36, name='设计模式之动态代理', content='

上文介绍了[静态代理](https://yalexin.gitee.io/2020/05/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/),本文介绍动态代理。

所谓动态，是指代理类是动态生成的，而不是我们提前定义好的。

动态代理实现的方式

- 原生JDK（比较常用）
- CGLIB（需要导包 cloud-cglib.jar ）

这里介绍利用原生JDK的方式实现

```java
package study.design.proxy;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;

public class DynamicProxy {
    public static void main(String[] args) {
        ProxyInvocationHandler pih = new ProxyInvocationHandler();
        Cook d_shef = new Chef();
        // 设置需要代理的对象
        pih.setTarget(d_shef);
        // 动态生成代理类
        Cook proxy = (Cook) pih.getProxy();
        proxy.cook("番茄炒蛋");
    }
}

interface Cook {
    void cook(String name);
}

class Chef implements Cook {

    @Override
    public void cook(String name) {
        // 具体的实际实现逻辑
        System.out.println("=======厨师做饭啦:"+name+"=======");
    }
}

// 用于自动生成代理类
class ProxyInvocationHandler implements InvocationHandler {
    // 被代理的接口
    private Object target;

    public void setTarget(Object target) {
        this.target = target;
    }

    // 生成得到代理类
    public Object getProxy() {
        return Proxy.newProxyInstance(this.getClass().getClassLoader(),
                target.getClass().getInterfaces(), this);
    }

    // 处理代理实例 并返回结果

    /**
     *
     * @param proxy  代理对象
     * @param method 代理对象调用的方法
     * @param args
     * @return 调用的方法中的参数
     * @throws Throwable
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        before();
        //  动态代理的本质，是利用反射机制实现
        Object result = method.invoke(target, args);
        after();
        return result;
    }

    // 预处理
    public void before() {
        System.out.println("=======食材准备完毕=======");
    }

    // 后处理
    public void after() {
        System.out.println("=======厨具清理完毕=======");
    }

}
```

控制台输出：

```
=======食材准备完毕=======
=======厨师做饭啦:番茄炒蛋=======
=======厨具清理完毕=======
```

- 优点：只需要定义实现`InvocationHandler`接口的实现类，利用该类的实例对象将托管类的实例对象进行绑定即可实现代理； 动态代理的服务内容不需要像静态代理一样写在每个代码块中，只需要写在invoke()方法中即可，降低了代码的冗余度。 

- 缺点：任然需要一个实现接口的实现类。要想不需要接口，可借助 `CGLIB`，关于相关的用法，不在本文介绍范围之内。

', description='本文介绍动态代理。

所谓动态，是指代理类是动态生成的，而不是我们提前定义好的。

动态代理实现的方式

- 原生JDK（比较常用）
- CGLIB（需要导包 cloud-cglib.jar ）

这里介绍利用原生JDK的方式实现<!--more-->', views=0, published=true, tagIds='null', createTime=Sun May 10 16:45:00 CST 2020, updateTime=Sun May 10 16:45:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=37, name='设计模式之模板方法', content='

先来看一个简单的例子：假如学院通知开学，那么每个学生所经历的流程就是：收到通知 --> 购票 --> 坐火车/坐飞机/坐大巴/……  --> 返校报道。对应的实现代码如下：

```java
package com.study.design.templateMethod;


public class Main {
    public static void main(String[] args) {
        StudenA A = new StudenA();
        A.process();
        StudenB B = new StudenB();
        B.process();
    }
}

class StudenA {
    public void process() {
        receiveNotification();
        buyTicket();
        byTrain();
        register();
    }

    private void byTrain() {
        System.out.println("====我在火车上啦====");
    }

    private void buyTicket() {
        System.out.println("====我购票啦====");
    }

    private void receiveNotification() {
        System.out.println("====我收到通知啦====");
    }

    private void register() {
        System.out.println("====我注册完毕啦====");
    }
}

class StudenB {
    public void process() {
        receiveNotification();
        buyTicket();
        byPlane();
        register();
    }

    private void byPlane() {
        System.out.println("====我在飞机上啦====");
    }

    private void buyTicket() {
        System.out.println("====我购票啦====");
    }

    private void receiveNotification() {
        System.out.println("====我收到通知啦====");
    }

    private void register() {
        System.out.println("====我注册完毕啦====");
    }
}
```

观察上面的例子，发现每一个学生有相同之处，也有不同之处，如果每一个学生类都是这么写，就会产生大量冗余代码，而且假如每个学生返校后还要参加开学典礼，那么还要为每一个学生一个方法，在学生类非常多的情况下工作是非常的繁琐。因此我们可以引入**模板方法**。

## 模板方法

 定义：定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。它是一种类行为型模式。

## 适用场景

- 算法的整体步骤大体上固定，也存在不同之处，可以将不同的逻辑业务抽象出来，子类进行实现。例如上文中的“收到通知”、“购票”、“返校报道”

- 子类有公共的行为，可以提出到父类中，避免代码重复。

- 需要通过子类判断父类中某个步骤是否执行，从而实现子类对父类的反向控制。

## 代码实现

### 定义抽象模板类

```java
abstract class BaseProcess {
    public void process() {
        receiveNotification();
        buyTicket();
        backSchool();
        register();
    }

    abstract void backSchool();

    private void buyTicket() {
        System.out.println("====我购票啦====");
    }

    private void receiveNotification() {
        System.out.println("====我收到通知啦====");
    }

    private void register() {
        System.out.println("====我注册完毕啦====");
    }
}
```

### 定义实现类

```java
class StudentA extends BaseProcess {

    @Override
    void backSchool() {
        System.out.println("===我通过坐飞机返校的===");
    }
}

class StudentB extends BaseProcess {

    @Override
    void backSchool() {
        System.out.println("===我通过坐火车返校的===");
    }
}
```

### 测试类

```java
public class Main {
    public static void main(String[] args) {
        BaseProcess A = new StudentA();
        A.process();
        BaseProcess B = new StudentB();
        B.process();
    }
}
```

## 模式扩展

 在模板方法模式中，基本方法包含：抽象方法、具体方法和钩子方法，正确使用“钩子方法”可以使得子类控制父类的行为。 例如上文中，不同学生返校的时候可能还有具体不同的行为，例如单身的学生是直接进入校门然后回到宿舍的，但是有男/女朋友的学生可能进入校门后第一件事就是去见另一半。要实现该逻辑只需要在抽象父类中定义抽象钩子方法，子类实现：

```java
abstract class BaseProcess {
    public void process() {
        receiveNotification();
        buyTicket();
        backSchool();
        if (!isSingle()) {
            SeeCouples();
        }
        register();
    }

    abstract void backSchool();

    abstract boolean isSingle();

    private void buyTicket() {
        System.out.println("====我购票啦====");
    }

    private void receiveNotification() {
        System.out.println("====我收到通知啦====");
    }

    private void SeeCouples() {
        System.out.println("好久不见，我快要想死你了~~");
    }

    private void register() {
        System.out.println("====我注册完毕啦====");
    }
}
```

```java
class StudentB extends BaseProcess {

    @Override
    void backSchool() {
        System.out.println("===我通过坐火车返校的===");
    }

    @Override
    boolean isSingle() {
        return false;
    }
}
```

## 主要缺点

-  需要为每一个基本方法的不同实现提供一个子类 ，假如父类中可变的基本方法很多，那么势必造成实现的子类非常多，后期维护难度增大。
-  父类中的抽象方法由子类实现，子类执行的结果会影响父类的结果 ，不仅增加了阅读难度，也 违反了[里氏替换原则](https://www.cnblogs.com/jimoer/p/9163426.html#autoid-3-2-0)，会给程序带来风险。 ', description='先来看一个简单的例子：假如学院通知开学，那么每个学生所经历的流程就是：收到通知 --> 购票 --> 坐火车/坐飞机/坐大巴/……  --> 返校报道。对应的实现代码如下：', views=0, published=true, tagIds='null', createTime=Thu May 14 08:06:00 CST 2020, updateTime=Thu May 14 08:06:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=38, name='设计模式之观察者模式', content='## 模式介绍

定义： 在对象之间定义了一对多的依赖，这样一来，当一个对象改变状态，依赖它的对象会收到通知并自动更新。 类似于公众号订阅模式，公众号发布新通知的时候只有关注了该公众号的用户才会接收该通知。

该模式包含四个部分

- 抽象被观察接口：将同类的所有观察者保存在一个集合中，每一个被观察者都可以被若干个观察者观察，该接口至少提供注册观察者和注销观察者方法以及通知观察者方法。
- 抽象观察者接口： 它定义了一个更新接口，使得在得到被观察者更改通知时产生相应动作。 
- 被观察者的实现类： 将有关状态存入具体观察者对象，在具体被观察者的内部状态发生改变时，给所有注册过的观察者发送通知。 
- 观察者的实现类： 实现抽象观察者定义的更新接口，以便在得到主题更改通知时更新自身的状态。 

## 代码实现

### 抽象观察者

提供抽象方法用于更新状态

```java
interface Observer {
    void update(String msg);
}
```

### 抽象被观察者

```java
interface Subject {
    /**
     * @param observer 需要注册的观察者
     */
    void registerObserver(Observer observer);

    /**
     * @param observer 需要注销的观察者
     */
    void removeObserver(Observer observer);

    /**
     * @param msg 需要发送的通知
     */
    void notify(String msg);
}
```

### 具体观察者

```java
/**
 * 注意：原生JDK中 java.util.Observer 也有 Observer 接口，我们这里用的是自定义的
 */
class ObserverIplm implements Observer {
    private String name;

    public ObserverIplm(String name) {
        this.name = name;
    }

    @Override
    public void update(String msg) {
        System.out.println(name + "收到新内容，为：" + msg);
    }
}
```

### 具体被观察者

```java
class SubjectIplm implements Subject {
    private List<Observer> observerList = new ArrayList<Observer>();

    @Override
    public void registerObserver(Observer observer) {
        this.observerList.add(observer);
    }

    @Override
    public void removeObserver(Observer observer) {
        this.observerList.remove(observer);
    }
    // 通知所有观察者
    @Override
    public void notify(String msg) {
        for (Observer item : observerList) {
            item.update(msg);
        }
    }
}
```

### 测试类

```java
public class ObserverTest {
    public static void main(String[] args) {
        Subject mySubject = new SubjectIplm();
        Observer myObserver1 = new ObserverIplm("myObserver1");
        Observer myObserver2 = new ObserverIplm("myObserver2");
        mySubject.registerObserver(myObserver1);
        mySubject.registerObserver(myObserver2);
        mySubject.notify("震惊！Java居然是世界上最好的语言！");
        System.out.println("=====================");
        // myObserver1 颇为震惊 果断取消订阅（C生万物）
        mySubject.removeObserver(myObserver1);
        mySubject.notify("Java天下第一！");
    }
}
```

运行结果如下：

```
myObserver1收到新内容，为：震惊！Java居然是世界上最好的语言！
myObserver2收到新内容，为：震惊！Java居然是世界上最好的语言！
=====================
myObserver2收到新内容，为：Java天下第一！
```

## 总结

- 优点：降低了耦合，使得耦合的观察者和被观察者都只依赖于抽象接口，从而各自的变换都不会影响另一方。

- 缺点：消息通知是顺序进行，那么一个观察者卡顿，会影响整体的执行效率 。', description='定义： 在对象之间定义了一对多的依赖，这样一来，当一个对象改变状态，依赖它的对象会收到通知并自动更新。 类似于公众号订阅模式，公众号发布新通知的时候只有关注了该公众号的用户才会接收该通知。', views=0, published=true, tagIds='null', createTime=Sat May 16 13:40:00 CST 2020, updateTime=Sat May 16 13:40:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=39, name='阶乘求和', content='> 题目来源：[C语言网1014]( https://www.dotcpp.com/oj/problem1014.html )

## 问题描述

 求Sn=1!+2!+3!+4!+5!+…+n!之值，其中n是一个数字(n不超过20)。 

### 样例输入

```
5
```

### 样例输出


```
153
```

## 问题求解

```c
/*
 * @Author: YaleXin
 * @Date: 2020-05-22 20:40:31
 * @LastEditTime: 2020-05-22 22:19:56
 * @LastEditors: YaleXin
 * @Description:
 * @FilePath: \my_c_workspace\dotcpp\1014.c
 * @祈祷不出现BUG
 */
#include <stdio.h>
#define MAX_NUM 100
typedef struct factorial {
    int factorial[100];
} f;
f num[25];
int ans[100] = {0};
// 高精度存储
void setNum(int index) {
    if (index == 1) {
        num[1].factorial[1] = 1;
        return;
    } else {
        int c = 0, mul = 0, i;
        for (i = 1;; i++) {
            mul = (num[index - 1].factorial[i] * index + c) % MAX_NUM;
            c = (num[index - 1].factorial[i] * index + c) / MAX_NUM;
            num[index].factorial[i] = mul;
            if ((mul + c + num[index - 1].factorial[i + 1]) == 0) break;
        }
    }
}
int addAns(int index) {
    int c = 0, i, sum = 0;
    for (i = 1;; i++) {
        sum = (ans[i] + num[index].factorial[i] + c) % MAX_NUM;
        c = (ans[i] + num[index].factorial[i] + c) / MAX_NUM;
        ans[i] = sum;
        if ((sum + c + ans[i + 1]) == 0) break;
    }
    return i;
}
int main() {
    int n, i, len;
    scanf("%d", &n);
    for (i = 1; i <= n; i++) {
        setNum(i);
        len = addAns(i);
    }
    for (i = len - 1; i >= 1; i--) {
        // 首位前导零去掉
        if (ans[i] < 10 && i != len - 1) {
            printf("0%d", ans[i]);
        } else {
            // 个位数补零
            printf("%d", ans[i]);
        }
    }
    return 0;
}
```

', description='## 问题描述

 求Sn=1!+2!+3!+4!+5!+…+n!之值，其中n是一个数字(n不超过20)。 

### 样例输入

```
5
```

### 样例输出


```
153
```', views=0, published=true, tagIds='null', createTime=Fri May 22 22:21:00 CST 2020, updateTime=Fri May 22 22:21:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=40, name='马拦过河卒', content='> 题目来源：[C语言网1266](  https://www.dotcpp.com/oj/problem1266.html )

## 问题描述

 棋盘上A点有一个过河卒，需要走到目标B点。卒行走的规则：可以向下、或者向右。同时在棋盘上C点有一个对方的马，该马所在的点和所有跳跃一步可达的点称为对方马的控制点。因此称之为“马拦过河卒”。
棋盘用坐标表示，A点(0, 0)、B点(n, m)(n, m为不超过15的整数)，同样马的位置坐标是需要给出的。现在要求你计算出卒从A点能够到达B点的路径的条数，假设马的位置是固定不动的，并不是卒走一步马走一步。
### 输入

 一行四个数据，分别表示B点坐标和马的坐标。（保证所有的数据有解） 

### 输出

 一个数据，表示所有的路径条数。 

### 样例输入

```
6 6 3 5
```

### 样例输出

```
6
```

## 问题求解

```c
/*
 * @Author: YaleXin
 * @Date: 2020-05-24 13:34:01
 * @LastEditTime: 2020-05-24 14:16:01
 * @LastEditors: YaleXin
 * @Description:
 * @FilePath: \my_c_workspace\dotcpp\1266.c
 * @祈祷不出现BUG
 */
#include <stdio.h>
/**
 * @x : 马的横坐标  @y : 马的纵坐标
 */
int path[16][16] = {0}, sum = 0, n, m, x, y;
/**
 * 初始化禁区
 */
void setHorse() {
    path[x][y] = 1;
    if ((x - 2) >= 0 && (y - 1) >= 0) path[x - 2][y - 1] = 1;
    if ((x - 1) >= 0 && (y - 2) >= 0) path[x - 1][y - 2] = 1;
    if ((x - 2) >= 0 && (y + 1) <= m) path[x - 2][y + 1] = 1;
    if ((x - 1) >= 0 && (y + 2) <= m) path[x - 1][y + 2] = 1;
    if ((x + 2) <= n && (y - 1) >= 0) path[x + 2][y - 1] = 1;
    if ((x + 1) <= n && (y - 2) >= 0) path[x + 1][y - 2] = 1;
    if ((x + 2) <= n && (y + 1) <= m) path[x + 2][y + 1] = 1;
    if ((x + 1) <= n && (y + 2) <= m) path[x + 1][y + 2] = 1;
}
void findPath(int nowX, int nowY) {
    if (nowX == n && nowY == m) {
        sum++;
        return;
    }
    // 先往右
    if ((nowY + 1) <= m && !path[nowX][nowY + 1]) findPath(nowX, nowY + 1);
    // 再往下
    if ((nowX + 1) <= n && !path[nowX + 1][nowY]) findPath(nowX + 1, nowY);
}
int main() {
    scanf("%d%d%d%d", &n, &m, &x, &y);
    setHorse();
    // 先往右
    if (!path[0][1]) findPath(0, 1);
    // 再往下
    if (!path[1][0]) findPath(1, 0);
    printf("%d", sum);
    return 0;
}
```

', description=' 棋盘上A点有一个过河卒，需要走到目标B点。卒行走的规则：可以向下、或者向右。同时在棋盘上C点有一个对方的马，该马所在的点和所有跳跃一步可达的点称为对方马的控制点。因此称之为“马拦过河卒”。', views=0, published=true, tagIds='null', createTime=Sun May 24 14:21:00 CST 2020, updateTime=Thu Aug 06 08:49:42 CST 2020, category=null, comments=[], tags=[]}, Blog{id=41, name='ek算法实现最大流问题', content='

最大流问题的解决方法一般是利用`Ford-Fulkerson`算法，该算法伪码如下:
```csharp
for each edge (u, v) ∈ E do
	f[u, v]←0
	f[v, u]←0
end for
while there exists a path P from s to t in the residual network Gf
do
	cf (P)←mine∈P {cf (e)}
	for each edge (u, v) ∈ P do
		f[u, v]←f[u, v] + cf (P)
		f[v, u]← − f[u, v]
	end for
end while
```

而ek算法是对` Ford-Fulkerson`方法的实现，基于BFS。 

网上也有许多很好的模板：

[最大流问题(EK算法模板)]( https://blog.csdn.net/jaster_wisdom/article/details/50942351 )

[HDU1532(最大流EK算法模板题)]( https://blog.csdn.net/creatorx/article/details/72629583 )

我自己也写了一个：

```c
/*
 * @Author: YaleXin
 * @Date: 2020-05-30 14:55:40
 * @LastEditTime: 2020-05-30 17:26:38
 * @LastEditors: YaleXin
 * @Description:
 * @FilePath: \my_c_workspace\others\maxFlow.c
 * @祈祷不出现BUG
 */
#include <stdio.h>
#define MAXLEN 10001
#define min(a, b) a < b ? a : b
int capacity[MAXLEN][MAXLEN] = {0};
// 记录路径上的前驱，用于添加反向边
int pre[MAXLEN];
int vertexNum, arcNum;
int BFS(int start, int end) {
    for (int i = 1; i <= vertexNum; i++) pre[i] = -1;
    int flow[vertexNum + 1], queue[vertexNum + 1], front = 0, rear = 0;
    flow[start] = 32767;
    // 源点进队列
    queue[++rear] = start;
    while (front != rear) {
        int frontIndex = queue[++front];
        if (frontIndex == end) break;
        for (int i = 1; i <= vertexNum; i++) {
            // 存在有向边并且点i没有被访问过
            if (i != start && capacity[frontIndex][i] > 0 && pre[i] == -1) {
                pre[i] = frontIndex;
                flow[i] = min(capacity[frontIndex][i], flow[frontIndex]);
                queue[++rear] = i;
            }
        }
    }
    // 残余网络中不存在增广路
    if (pre[end] == -1)
        return -1;
    else
        return flow[end];
}
int getMaxFlow(int S, int T) {
    int minF, preIndex, th, sum = 0;
    while ((minF = BFS(S, T)) != -1) {
        // 更新残留网络
        th = T;
        preIndex = pre[th];
        while (preIndex != -1) {
            capacity[th][preIndex] += minF;
            capacity[preIndex][th] -= minF;
            th = preIndex;
            preIndex = pre[th];
        }
        sum += minF;
    }
    return sum;
}
int main() {
    int SVertex, TVertex;
    // printf("请输入点的个数和有向边的个数以及源点汇点编号：\n");
    scanf("%d%d%d%d", &vertexNum, &arcNum, &SVertex, &TVertex);
    // printf("请依次输入每条有向边的容量，格式为 1 2 3：\n");
    int u, v, c;
    for (int i = 1; i <= arcNum; i++) {
        scanf("%d%d%d", &u, &v, &c);
        // 有可能输入重复边
        capacity[u][v] += c;
    }
    printf("%d", getMaxFlow(SVertex, TVertex));
    return 0;
}
/*

4 6 1 4
1 3 5
1 4 20
1 2 10
3 4 50
3 2 30
2 4 40

*/
```

', description='最大流问题的解决方法一般是利用`Ford-Fulkerson`算法，该算法伪码如下:
```csharp
for each edge (u, v) ∈ E do
	f[u, v]←0
	f[v, u]←0
end for
while there exists a path P from s to t in the residual network Gf
do
	cf (P)←mine∈P {cf (e)}
	for each edge (u, v) ∈ P do
		f[u, v]←f[u, v] + cf', views=0, published=true, tagIds='null', createTime=Sat May 30 18:15:00 CST 2020, updateTime=Sat May 30 18:15:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=42, name='C语言的指针', content='## 指针作为参数传递

C语言中，当指针作为函数参数进行传递时，实际上形参和实参指向的是同一个地方，例如：

```c
/*
 * @Author: YaleXin
 * @Date: 2020-06-19 18:02:53
 * @LastEditTime: 2020-06-29 08:59:40
 * @LastEditors: YaleXin
 * @Description:
 * @FilePath: \my_c_workspace\some_test\pointTest-copy.c
 * @祈祷不出现BUG
 */
#include <malloc.h>
#include <stdio.h>
#include <stdlib.h>
void test(int *p1) { printf("=== test p1 = %p ====\n", p1); }
int main() {
    int *p;
    printf("=== main p = %p ====\n", p);
    test(p);
    return 0;
}
```

输出的是：

```powershell
=== main p = 0000000000000010 ====
=== test p1 = 0000000000000010 ====
```

可见二者的地址是相同的。

所以形参对其指向的内存区域进行修改，也会影响到实参指向的内存区域，因为二者指向的区域是同一个位置，例如：

```c
/*
 * @Author: YaleXin
 * @Date: 2020-06-19 18:02:53
 * @LastEditTime: 2020-06-29 09:08:30
 * @LastEditors: YaleXin
 * @Description:
 * @FilePath: \my_c_workspace\some_test\pointTest-copy.c
 * @祈祷不出现BUG
 */
#include <malloc.h>
#include <stdio.h>
#include <stdlib.h>
void test(int *p1) { *p1 = 2; }
int main() {
    int a = 1;
    int *p = &a;
    printf("before a = %d\n", a);
    test(p);
    printf("after a = %d\n", a);
    return 0;
}
```

输出的是：

```powershell
before a = 1
after a = 2
```

但是，我们再来看一个例子：

```c
/*
 * @Author: YaleXin
 * @Date: 2020-06-19 18:02:53
 * @LastEditTime: 2020-06-29 09:16:55
 * @LastEditors: YaleXin
 * @Description:
 * @FilePath: \my_c_workspace\some_test\pointTest-copy.c
 * @祈祷不出现BUG
 */
#include <malloc.h>
#include <stdio.h>
#include <stdlib.h>
void test(char *p1) { p1 = "modified"; }
int main() {
    char *p = NULL;
    test(p);
    printf("after p = %s\n", p);
    return 0;
}
```

很容易让人以为输出的是

```powershell
after p = modified
```

但是实际上输出的是

```c
after p = (null)
```

下图给出这个过程中，指针的变化：

![1]( https://q.yalexin.top/1.png )

实际上是因为形参指向的区域已经与实参指向的不一致。

但是假如有在被调函数改变实参的地址的需求怎么办？

两种方法：

1. 被调函数返回指针：

   ```c
   #include <malloc.h>
   #include <stdio.h>
   #include <stdlib.h>
   #include <malloc.h>
   #include <stdio.h>
   #include <stdlib.h>
   char *test(char *p1) { p1 = "modified"; }
   int main() {
       char *p = NULL;
       p = test(p);
       printf("after p = %s\n", p);
       return 0;
   }
   ```

   但是使用该方法的时候，不推荐返回局部指针，返回局部指针很容易出现错误，详见[这篇文章]( https://www.cnblogs.com/qinguoyi/p/10154804.html )

   下面的例子就是存在问题：

   ```c
   #include <malloc.h>
   #include <stdio.h>
   #include <stdlib.h>
   #include <malloc.h>
   #include <stdio.h>
   #include <stdlib.h>
   char *test(char *p1) {
       p1 = "modified";
       char str[20] = "";
       sprintf(str, "yalexin %s", p1);
       printf("str = %s\n",str);
       return str;
   }
   int main(void) {
       char *p = NULL;
       p = test(p);
       printf("after p = %s\n", p);
       return 0;
   }
   
   ```

   输出的是：

   ```powershell
   str = yalexin modified
   after p = (null)
   
   ```

2. 使用二级指针：

   ```c
   #include <malloc.h>
   #include <stdio.h>
   #include <stdlib.h>
   char test(char **p1) { *p1 = "modified"; }
   int main(void) {
       char *p = NULL;
       printf("调用函数之前p的地址是 %p\n", p);
       test(&p);
       printf("调用函数之后p的地址是 %p\n", p);
       printf("after p = %s\n", p);
       return 0;
   }
   
   ```

   输出：

   ```powershell
   调用函数之前p的地址是 0000000000000000
   调用函数之后p的地址是 0000000000404000
   after p = modified
   
   ```

## 注意事项

1. 当指针指向的是一个变量，例如`*int* *p = &a;`，是不能使用`free(p)`进行释放资源， `free()` 只是针对使用了 `malloc()`， `realloc()`函数进行申请的内存进行释放。 
2. 使用`free()`后，相应的指针就会变为“野指针”，如果对野指针进行引用，会造成不可预期的后果，所以一般使用`free(p)`后，一般紧接着`p = NULL`', description='## 指针作为参数传递

C语言中，当指针作为函数参数进行传递时，实际上形参和实参指向的是同一个地方，例如：', views=0, published=true, tagIds='null', createTime=Mon Jun 29 08:56:00 CST 2020, updateTime=Mon Jun 29 08:56:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=43, name='记一次C语言程序设计', content='## 背景

那是一个闷热的下午，正值期末复习之际，突然手机响了：

![]( https://q.yalexin.top/%E8%81%8A%E5%A4%A9%E6%88%AA%E5%9B%BE.png )

然后因为是高中同桌兼舍友，所以就立马接了下来。但是当时我这边刚好是准备考试，所以时间上肯定不充裕，原本是想着两三天写出来，但是最后发现一天左右就完成了。但是功能并没有完全实现，还差最后的功能没有做出来，也没有过多的测试。

## 题目

![]( https://q.yalexin.top/%E9%A2%98%E7%9B%AE.jpg )

其实C语言很多课程设计题目大多是使用结构体+文件操作（不排除大神的课设做得很复杂的情况），我当年拿到的就是学生成绩管理系统，对！就是这种烂大街的题目，这类题也是使用结构体+文件操作就可以解决，但是当时年少不知事，文件操作我自己一直掌握得不好，所以当时的程序无法保存数据~~，当时我还写了好久，在界面美观（狗屁美观，现在想想就是太花里胡哨了，在黑框里谈啥美观）上。所以本次课设，我就不考虑啥美观了，毕竟时间有限，能力也有限，简单构思了几分钟后，就根据整体框架设计结构体了，然后…………

## 源程序

```c
/*
 * @Author: YaleXin
 * @Date: 2020-05-26 15:12:01
 * @LastEditTime: 2020-05-27 15:09:36
 * @LastEditors: YaleXin
 * @Description:
 * @FilePath: \my_c_workspace\maoning\1.c
 * @祈祷不出现BUG
 */
#include <malloc.h>
#include <stdio.h>
#include <string.h>
#include <windows.h>
#define OK 1
#define ERROR 0
typedef struct DiscInfo {
    char name[50];
    char country[50];
    char type[50];
    char director[50];
    char producer[50];
    char stars[500];
    int inventory;
    struct DiscInfo *next;
} DiscInfo;
// 每一条借阅记录
typedef struct RentInfo {
    long CId;
    char DName[50];
    long long BDate;
    long long RDate;
    long rentNum;
    int isReturn;
    struct RentInfo *next;
} RentInfo;
typedef struct Blist {
    char DName[50];
    struct Blist *next;
} Blist;
typedef struct CustomerInfo {
    long id;
    char name[50];
    long acount;
    Blist *RentList;
    struct CustomerInfo *next;
} CustomerInfo;
int customerInitial(CustomerInfo **L) {
    char buffer[50];
    long id;
    FILE *fp = fopen("customer.txt", "r");
    if (fp == NULL)
        printf("customer.txt not exist！\n");
    else {
        while (fscanf(fp, "%ld", &id) > 0) {
            CustomerInfo *cRead = (CustomerInfo *)malloc(sizeof(CustomerInfo));
            cRead->RentList = NULL;
            cRead->next = NULL;
            cRead->id = id;
            fscanf(fp, "%s", cRead->name);
            fscanf(fp, "%ld", &cRead->acount);
            fscanf(fp, "%s", buffer);
            while (strcmp(buffer, "END")) {
                Blist *b = (Blist *)malloc(sizeof(Blist));
                strcpy(b->DName, buffer);
                b->next = cRead->RentList;
                cRead->RentList = b;
                fscanf(fp, "%s", buffer);
            }
            cRead->next = (*L);
            (*L) = cRead;
        }
        fclose(fp);
        printf("\n\n\n读取到的顾客信息：\n\n");
        CustomerInfo *c = *L;
        while (c != NULL) {
            printf("%ld %s %ld", c->id, c->name, c->acount);
            Blist *b = c->RentList;
            while (b != NULL) {
                printf(" %s", b->DName);
                b = b->next;
            }
            printf("\n");
            c = c->next;
        }
    }
    system("pause");
    return OK;
}
int discInitial(DiscInfo **L) {
    char buffer[500];
    FILE *fp = fopen("disc.txt", "r");
    if (fp == NULL)
        printf("disc.txt not exist！\n");
    else {
        while (fscanf(fp, "%s", buffer) > 0) {
            DiscInfo *dRead = (DiscInfo *)malloc(sizeof(DiscInfo));
            dRead->next = NULL;
            strcpy(dRead->name, buffer);
            fscanf(fp, "%s", dRead->country);
            fscanf(fp, "%s", dRead->type);
            fscanf(fp, "%s", dRead->director);
            fscanf(fp, "%s", dRead->producer);
            fscanf(fp, "%s", dRead->stars);
            fscanf(fp, "%d", &dRead->inventory);
            dRead->next = (*L);
            *L = dRead;
        }
        fclose(fp);
        printf("\n\n\n读取到的碟片信息：\n\n");
        DiscInfo *d = *L;
        while (d != NULL) {
            printf("%s %s %s %s %s %s %d\n", d->name, d->country, d->type,
                   d->director, d->producer, d->stars, d->inventory);
            d = d->next;
        }
    }
    system("pause");
    return OK;
}
int rentInitial(RentInfo **L) {
    char buffer[50];
    long id;
    FILE *fp = fopen("rent.txt", "r");
    if (fp == NULL)
        printf("rent.txt not exist！\n");
    else {
        while (fscanf(fp, "%ld", &id) > 0) {
            RentInfo *rRead = (RentInfo *)malloc(sizeof(RentInfo));
            rRead->next = NULL;
            rRead->CId = id;
            fscanf(fp, "%s", rRead->DName);
            fscanf(fp, "%lld", &rRead->BDate);
            fscanf(fp, "%lld", &rRead->RDate);
            fscanf(fp, "%ld", &rRead->rentNum);
            fscanf(fp, "%d", &rRead->isReturn);
            rRead->next = *L;
            *L = rRead;
        }
        fclose(fp);
        printf("\n\n\n读取到的借阅信息\n\n");
        RentInfo *r = *L;
        while (r != NULL) {
            printf("%ld %s %lld %lld %ld %d\n", r->CId, r->DName, r->BDate,
                   r->RDate, r->rentNum, r->isReturn);
            r = r->next;
        }
    }
    system("pause");
    return OK;
}
int discAdd(DiscInfo **L) {
    DiscInfo *newDisc = (DiscInfo *)malloc(sizeof(DiscInfo));
    newDisc->next = NULL;
    printf("请输入影碟名字:\n");
    scanf("%s", newDisc->name);
    printf("请输入影碟国家:\n");
    scanf("%s", newDisc->country);
    printf("请输入影碟类型:\n");
    scanf("%s", newDisc->type);
    printf("请输入影碟导演:\n");
    scanf("%s", newDisc->director);
    printf("请输入影碟制片人:\n");
    scanf("%s", newDisc->producer);
    printf("请输入影碟主演明星(如有多个，每个明星之间以空格隔开):\n");
    getchar();
    fgets(newDisc->stars, sizeof(newDisc->stars), stdin);
    printf("请输入影碟库存量:\n");
    scanf("%d", &newDisc->inventory);
    if (*L == NULL) {
        *L = newDisc;
    } else {
        newDisc->next = *L;
        *L = newDisc;
    }
    printf("添加完毕\n");
    system("pause");
    return OK;
}
int discQuery(DiscInfo *L) {
    DiscInfo *p = L;
    printf("请输入您想要查询的碟片名字:\n");
    char query[50];
    scanf("%s", query);
    while (p != NULL) {
        if (!strcmp(query, p->name)) break;
        p = p->next;
    }
    if (p != NULL) {
        if (p->inventory > 0)
            printf("可以借阅！\n");
        else
            printf("不可以借阅，因为库存为零\n");
    } else
        printf("不存在该影碟");
    system("pause");
    return OK;
}
int discDelete(DiscInfo **L) {
    if ((*L) == NULL) {
        printf("还没有用户，无法删除!\n");
        system("pause");
        return ERROR;
    }
    DiscInfo *p1 = (*L)->next, *p2 = *L;
    printf("请输入您想要删除的碟片名字:\n");
    char query[50];
    scanf("%s", query);
    // 删除头节点
    if (!strcmp((*L)->name, query)) {
        (*L) = (*L)->next;
        free(p2);
        printf("删除成功");

    } else {
        while (p1 != NULL) {
            if (!strcmp(query, p1->name)) break;
            p2 = p1;
            p1 = p1->next;
        }
        if (p1 == NULL)
            printf("不存在该影片\n");
        else {
            p2->next = p1->next;
            free(p1);
            printf("删除成功");
        }
    }
    system("pause");
    return OK;
}
int discModify(DiscInfo **L) {
    DiscInfo *p = *L;
    printf("请输入您想要修改的碟片的名字:\n");
    char query[50];
    scanf("%s", query);
    while (p != NULL) {
        if (!strcmp(query, p->name)) break;
        p = p->next;
    }
    if (p != NULL) {
        printf("请输入新影碟国家:\n");
        scanf("%s", p->country);
        printf("请输入新影碟类型:\n");
        scanf("%s", p->type);
        printf("请输入新影碟导演:\n");
        scanf("%s", p->director);
        printf("请输入新影碟制片人:\n");
        scanf("%s", p->producer);
        printf("请输入新影碟主演明星(如有多个，每个明星之间以空格隔开):\n");
        getchar();
        fgets(p->stars, sizeof(p->stars), stdin);
        printf("请输入新影碟库存量:\n");
        scanf("%d", &p->inventory);
        printf("修改成功！\n");
    } else
        printf("不存在该影碟");
    system("pause");
    return OK;
}
int customerAdd(CustomerInfo **L) {
    CustomerInfo *newCustomer = (CustomerInfo *)malloc(sizeof(CustomerInfo));
    newCustomer->next = NULL;
    printf("请输入顾客名字：\n");
    scanf("%s", newCustomer->name);
    printf("请输入顾客账户id：\n");
    scanf("%ld", &newCustomer->id);
    printf("请输入顾客账户金额：\n");
    scanf("%ld", &newCustomer->acount);
    newCustomer->RentList = NULL;
    if (*L == NULL) {
        *L = newCustomer;
    } else {
        newCustomer->next = *L;
        *L = newCustomer;
    }
    printf("添加完毕\n");
    system("pause");
    return OK;
}
int customerDelete(CustomerInfo **L) {
    if ((*L) == NULL) {
        printf("还没有用户，无法删除!\n");
        system("pause");
        return ERROR;
    }
    CustomerInfo *p1 = (*L)->next, *p2 = *L;
    printf("请输入想要删除的顾客名字：\n");
    char query[50];
    scanf("%s", query);
    // 删除头节点
    if (!strcmp((*L)->name, query)) {
        if ((*L)->RentList != NULL) {
            printf("该用户还未归还借阅的碟片，不能删除用户\n");
        } else {
            (*L) = (*L)->next;
            free(p2);
            printf("删除成功");
        }
    } else {
        while (p1 != NULL) {
            if (!strcmp(query, p1->name)) break;
            p2 = p1;
            p1 = p1->next;
        }
        if (p1 == NULL)
            printf("不存在该用户\n");
        else {
            if (p1->RentList != NULL) {
                printf("该用户还未归还借阅的碟片，不能删除用户\n");
            } else {
                p2->next = p1->next;
                free(p1);
                printf("删除成功");
            }
        }
    }
    system("pause");
    return OK;
}
int customerModify(CustomerInfo **L) {
    CustomerInfo *p = *L;
    printf("请输入想要修改的顾客的账户id：\n");
    long query;
    scanf("%ld", &query);
    while (p != NULL) {
        if (query != p->id) break;
        p = p->next;
    }
    if (p != NULL) {
        printf("请输入新顾客名字:\n");
        scanf("%s", p->name);
        printf("请输入新顾客账户金额:\n");
        scanf("%ld", &p->acount);
        printf("修改成功！\n");
    } else
        printf("不存在该用户");
    system("pause");
    return OK;
}
int borrowDisc(RentInfo **RL, DiscInfo **DL, CustomerInfo **CL) {
    DiscInfo *dp = *DL;
    CustomerInfo *cp = *CL;
    int id;
    while (1) {
        printf("请输入借阅人的id,输入“0”结束本次借阅\n");
        scanf("%ld", &id);
        if (!id) break;
        while (cp != NULL) {
            if (cp->id == id) break;
            cp = cp->next;
        }
        if (cp == NULL) {
            printf("用户不存在，请重新输入\n");
            continue;
        } else if (cp->acount < 20) {
            printf("租金不足20元，无法借阅\n");
        } else {
            printf("请输入借阅日期(格式：年月日时分秒，如20200526192222)\n");
            long long date;
            // scanf("%lld", &date);
            while (scanf("%lld", &date) &&
                   !(date < 99999999999999 && date > 10000000000000)) {
                printf("日期格式错误\n");
                //  continue;
            }
            printf(
                "请输入借阅的碟片数量（一次只能借阅同种碟片的一片，但是可以借阅"
                "不同的碟片）\n");
            int count = 0;
            scanf("%d", &count);
            int status[100];
            char buffer[50];
            for (int i = 1; i <= count; i++) {
                printf("请输入第%d个碟片的名字\n", i);
                scanf("%s", buffer);
                dp = *DL;
                while (dp != NULL) {
                    if (!strcmp(buffer, dp->name)) break;
                    dp = dp->next;
                }
                if (dp == NULL || dp->inventory == 0)
                    status[i] = 0;
                else {
                    dp->inventory--;
                    RentInfo *newRent = (RentInfo *)malloc(sizeof(RentInfo));
                    newRent->next = NULL;
                    newRent->BDate = date;
                    newRent->CId = cp->id;
                    newRent->isReturn = 0;
                    strcpy(newRent->DName, buffer);
                    if (*RL == NULL) {
                        *RL = newRent;
                    } else {
                        newRent->next = *RL;
                        *RL = newRent;
                    }
                    newRent->isReturn = 0;
                    Blist *newBlist = (Blist *)malloc(sizeof(Blist));
                    newBlist->next = NULL;
                    strcpy(newBlist->DName, buffer);
                    if (cp->RentList == NULL) {
                        cp->RentList = newBlist;
                    } else {
                        newBlist->next = cp->RentList;
                        cp->RentList = newBlist;
                    }
                    status[i] == 1;
                }
            }
            int successCount = 0;
            for (int i = 1; i <= count; i++)
                if (!status[i])
                    printf("借阅的第%d个碟片失败\n");
                else
                    successCount++;
            printf("本次借阅碟片成功数量：%d，失败数量：%d\n", successCount,
                   count - successCount);
        }
    }
    printf("操作成功\n");
    system("pause");
    return OK;
}  // 2020 0222 181212
int getDays(long long num1, long long num2) {
    int months[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    int sum = 0, year, month, day;
    year = (num1 - num2) / 10000000000;
    month = (num1 - num2) / 100000000;
    day = (num1 - num2) / 1000000;
    for (int i = 0; i <= month - 2; i++) sum += months[i];
    sum += day;
    sum += year * 365;
    return sum;
}
int returnDisc(RentInfo **RL, DiscInfo **DL, CustomerInfo **CL) {
    DiscInfo *dp = *DL;
    CustomerInfo *cp = *CL;
    int id;
    while (1) {
        printf("请输入归还人的id,输入“0”结束本次归还\n");
        scanf("%ld", &id);
        if (!id) break;
        while (cp != NULL) {
            if (cp->id == id) break;
            cp = cp->next;
        }
        if (cp == NULL) {
            printf("用户不存在，请重新输入\n");
            continue;
        } else {
            printf("请输入归还日期(格式：年月日时分秒，如20200526192222)\n");
            long long date;
            // scanf("%lld", &date);
            while (scanf("%lld", &date) &&
                   !(date < 99999999999999 && date > 10000000000000)) {
                printf("日期格式错误\n");
                //  continue;
            }
            printf("请输入归还的碟片数量\n");
            int count = 0;
            scanf("%d", &count);
            int status[100];
            char buffer[100][50];
            RentInfo *rp;
            int totalCost = 0, reality = 0;
            for (int i = 1; i <= count; i++) {
                printf("请输入第%d个碟片的名字\n", i);
                scanf("%s", buffer[i]);
                rp = *RL;
                while (rp != NULL) {
                    if (!strcmp(rp->DName, buffer[i]) && !(rp->isReturn)) {
                        rp->RDate = date;
                        int days = getDays(rp->RDate, rp->BDate);
                        // 日期错误
                        if (days <= 0)
                            status[i] = 0;
                        else {
                            rp->rentNum = days / 3;
                            if (days % 3 > 0) rp->rentNum++;
                            totalCost += rp->rentNum;
                            // 不够钱
                            if (cp->acount + 20 - rp->rentNum < 0)
                                status[i] = 0;
                            else {
                                reality += rp->rentNum;
                                cp->acount = cp->acount + 20 - rp->rentNum;
                                status[i] = 1;
                                // 记上已经归还
                                rp->isReturn = 1;
                                DiscInfo *d = *DL;
                                while (d != NULL)
                                    if (!strcmp(d->name, buffer[i])) break;
                                //库存加一
                                d->inventory++;
                                Blist *b1 = cp->RentList->next,
                                      *b2 = cp->RentList;
                                // 头节点
                                if (!strcmp(cp->RentList->DName, buffer[i])) {
                                    cp->RentList = NULL;

                                } else {
                                    while (b1 != NULL)
                                        if (!strcmp(b1->DName, buffer[i]))
                                            break;
                                        else {
                                            b2 = b1;
                                            b1 = b1->next;
                                        }
                                    // 头节点
                                    if (b1 == NULL)
                                        b2 = b2->next;
                                    else
                                        b2->next = b1->next;
                                }
                            }
                        }
                        break;
                    }
                    rp = rp->next;
                }
                if (rp == NULL || !(rp->isReturn)) {
                    status[i] = 0;
                }
            }

            int successCount = 0;
            for (int i = 1; i <= count; i++)
                if (!status[i])
                    printf("归还第%d个碟片失败\n", i);
                else
                    successCount++;
            printf("本次归还碟片成功数量：%d，失败数量：%d\n", successCount,
                   count - successCount);
            printf("本次归还碟片需要支付总费用%d，实际支付：%d\n", totalCost,
                   reality);
        }
    }
    printf("操作成功\n");

    system("pause");
    return OK;
}
int save(RentInfo *RL, DiscInfo *DL, CustomerInfo *CL) {
    FILE *fp = fopen(".\\rent.txt", "w+");
    if (fp != NULL) {
        while (RL != NULL) {
            fprintf(fp, "%ld ", RL->CId);
            fprintf(fp, "%s ", RL->DName);
            fprintf(fp, "%lld ", RL->BDate);
            fprintf(fp, "%lld ", RL->RDate);
            fprintf(fp, "%ld ", RL->rentNum);
            fprintf(fp, "%d ", RL->isReturn);
            fputc('\n', fp);
            RL = RL->next;
        }
        printf("rent.txt保存成功\n");
        fclose(fp);
    } else {
        printf("rent.txt保存失败\n");
    }
    fp = fopen(".\\customer.txt", "w+");
    if (fp != NULL) {
        while (CL != NULL) {
            fprintf(fp, "%ld ", CL->id);
            fprintf(fp, "%s ", CL->name);
            fprintf(fp, "%ld ", CL->acount);
            Blist *b = CL->RentList;
            while (b != NULL) {
                fprintf(fp, "%s ", b->DName);
                b = b->next;
            }
            char end[] = {'E', 'N', 'D', '\n'};
            fprintf(fp, "%s", "END\n");
            CL = CL->next;
        }
        printf("customer.txt保存成功\n");
        fclose(fp);
    } else {
        printf("customer.txt保存失败\n");
    }
    fp = fopen(".\\disc.txt", "w+");
    if (fp != NULL) {
        while (DL != NULL) {
            fprintf(fp, "%s ", DL->name);
            fprintf(fp, "%s ", DL->country);
            fprintf(fp, "%s ", DL->type);
            fprintf(fp, "%s ", DL->director);
            fprintf(fp, "%s ", DL->producer);
            fprintf(fp, "%s ", DL->stars);
            fprintf(fp, "%d ", DL->inventory);
            fputc('\n', fp);
            DL = DL->next;
        }
        printf("customer.txt保存成功\n");
        fclose(fp);
    } else {
        printf("customer.txt保存失败\n");
    }
    system("pause");
    return OK;
}
int main() {
    CustomerInfo *CL = NULL;
    DiscInfo *DL = NULL;
    RentInfo *RL = NULL;
    customerInitial(&CL);
    discInitial(&DL);
    rentInitial(&RL);
    int exit = 0;
    while (!exit) {
        int choose;
        system("cls");
        printf("1.影碟添加\n\n");
        printf("2.影碟删除\n\n");
        printf("3.影碟修改\n\n");
        printf("4.顾客添加\n\n");
        printf("5.顾客删除\n\n");
        printf("6.顾客修改\n\n");
        printf("7.碟片查询\n\n");
        printf("8.碟片借阅\n\n");
        printf("9.碟片归还\n\n");
        printf("0.退出\n\n");
        scanf("%d", &choose);
        switch (choose) {
            case 1:
                discAdd(&DL);
                break;
            case 2:
                discDelete(&DL);
                break;
            case 3:
                discModify(&DL);
                break;
            case 4:
                customerAdd(&CL);
                break;
            case 5:
                customerDelete(&CL);
                break;
            case 6:
                customerModify(&CL);
                break;
            case 7:
                discQuery(DL);
                break;
            case 8:
                borrowDisc(&RL, &DL, &CL);
                break;
            case 9:
                returnDisc(&RL, &DL, &CL);
                break;
            case 0:
                save(RL, DL, CL);
                system("cls");
                printf("正在退出...");
                Sleep(1000);
                system("cls");
                exit = 1;
        }
    }
    return 0;
}
```

## 反思

- 写完后才发现`time.h`库文件中就有`*time_t`类型的变量，十分方便记录时间。而不是像我一样，直接拿`long long`变量来表示~~~。

- 客户的结构体设计得不合理，应该把借阅队列设置为影碟类型，而不是简单地用字符串简单表示。
- …………', description='那是一个闷热的下午，正值期末复习之际，突然手机响了：', views=0, published=true, tagIds='null', createTime=Thu Jul 02 19:32:00 CST 2020, updateTime=Thu Jul 02 19:32:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=44, name='模拟设计磁盘文件的链接存储结构', content='

## 课题要求

1. 磁盘文件的管理采用显式链接结构，将文件占用的物理块号和链接指针记录 在一张文件分配表（`FAT`）中。文件第一块的块号记录在索引结点中。文件目录 只记录文件名和索引结点的编号。索引结点的结构如下： 


   | 索引结点编号 | 文件属性 | 创建时间 | 文件第一块块号 | 文件占用盘块数 | 备用 |
   | ------------ | -------- | -------- | -------------- | -------------- | ---- |


2. 假定磁盘存储空间共有 100 个物理块用于存放数据， 目录文件和索引结点可 直接访问，不存放在这 100 个块中。

3. 一个物理块可存放 3 个文件逻辑记录，并且假设文件逻辑记录定长。

4. 要求用键盘输入的方式模拟用户读写请求，菜单格式建议如下： 

   -  `Create（filename） ` 
   -  ` Write（filename， text， logical_record_no）` 
   -  `Read (filename, logical_record_no)` 
   -  ` Delete（filename）` 其中` filename `是要读写的文件名，`text` 是写入的内容，`logical_record_no `是逻辑 记录号。`Create`、`Write`、`Read`、`Delete `分别表示创建一个文件，向文件的某个逻 辑记录写，从文件的某个逻辑记录读，删除一个文件。 

5. 文件存储空间管理采用位示图（位示图为 7 行，16 列）的方式。 

6. 要求程序可以打印` FAT `以及位示图的情况。 

## 结构设计

### 数据结构

- 结点项

  ```c
  typedef struct Inode {
      int firstBlockId;     // 文件第一块块号
      int lastBlockId;      // 文件最后一块块号
      int usedBlocksNum;    // 文件占用的盘块数
      time_t createTime;    // 文件创建时间
      time_t LastEditTime;  // 文件上次修改时间
      int permission;       // 文件权限
      int isDelete;         // 该节点是否被标记“已删除”
      char standby[20];     // 备用
  } Inode;
  ```

- 目录项

  ```c
  typedef struct listItem {
      char fileName[256];  // 文件名字
      int nodeId;          // 文件对应的结点编号
  } listItem;
  ```

- 物理盘块号

  ```c
  typedef struct Block {
      // 每一个物理块有三块逻辑记录号
      char firstLogical[LOGICALSIZE];
      char secondLogical[LOGICALSIZE];
      char thirdogical[LOGICALSIZE];
  } Block;
  ```

- 抽象磁盘

  ```c
  typedef struct Disk {
      int FAT[BLOCKNUM];             // 最多有BLOCKNUM个表项
      int bitmap[ROW][COL];          // 示位图
      listItem directory[BLOCKNUM];  // 目录 最多有BLOCKNUM个目录项
      Inode FDI[BLOCKNUM];  // 索引结点集合 最多有BLOCKNUM个节点
      int fileNum;
      Block blocks[BLOCKNUM];  // 总的物理盘块数
      int freeBlock;           // 空闲盘块数量
  } Disk;
  ```

### 设计思路

程序一开始将磁盘格式化，然后根据用户选择进行相关操作。

- 创建文件：

  首先申请一块空闲盘块（即默认一个文件初始占用一块盘块），同时将申请到的盘块记为“已使用”状态。

  申请方式是：选定一个随机数作为“基址”，假如该盘块已被占用，尝试申请该“基址”的下一块，假若仍然被占用，则继续往后尝试………

- 读取文件：

  根据文件名，在目录中检索，将该文件对应的索引结点找到。然后根据欲读取的逻辑记录号进行尝试读取（一个文件最多拥有的逻辑记录号为：`max = 3 * n - 1`，`n`是文件占用盘块数，即编号从零开始）。

  方法是：根据在检索目录得到的索引结点获得该文件占用的第一块盘块号，假如该盘块不是用户所要读取的盘块，则根据文件分配表获取下一块盘块号，不断重复上面过程，直到找到目的盘块号。

- 写入文件

  - 写入数据：

    向某个文件的某个逻辑记录号中写入数据，写入之前检查逻辑记录号的合法性

  - 修改文件大小：假若新文件大小小于旧文件大小，则只保留新文件大小的数据

- 删除文件：

  先根据文件名，在目录中检索出相应的索引结点，根据索引结点获得第一块盘块号，将该盘块置为“未使用状态”，并将这一盘块指向的下一块盘块（假如存在）也置为“未使用”，依此重复，直至该文件占用盘块全都归还。同时盘块对应的示位图也要更新状态。

## 源程序

```c
/*
 * @Author: YaleXin
 * @Date: 2020-06-07 15:53:40
 * @LastEditTime: 2020-07-01 21:08:41
 * @LastEditors: YaleXin
 * @Description: 操作系统课程设计
 * @FilePath: \my_c_workspace\OS\design\main.c
 *
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#define LOGICALSIZE 1024  //一条逻辑记录的大小
#define BLOCKNUM 100      //物理块数
#define ROW 7             //示位图行数
#define COL 16            //示位图列数
#define FREE 0            //示位图中表示空闲状态
#define USED 1            //示位图中表示已用状态
const int OK = 1;
/**
 * 目录项
 */
typedef struct listItem {
    char fileName[256];  // 文件名字
    int nodeId;          // 文件对应的结点编号
} listItem;
typedef struct Block {
    // 每一个物理块有三块逻辑记录号
    char firstLogical[LOGICALSIZE];
    char secondLogical[LOGICALSIZE];
    char thirdogical[LOGICALSIZE];
} Block;
typedef struct Inode {
    int firstBlockId;     // 文件第一块块号
    int lastBlockId;      // 文件最后一块块号
    int usedBlocksNum;    // 文件占用的盘块数
    time_t createTime;    // 文件创建时间
    time_t LastEditTime;  // 文件上次修改时间
    int permission;       // 文件权限
    int isDelete;         // 该节点是否被标记“已删除”
    char standby[20];     // 备用
} Inode;
typedef struct Disk {
    int FAT[BLOCKNUM];             // 最多有BLOCKNUM个表项
    int bitmap[ROW][COL];          // 示位图
    listItem directory[BLOCKNUM];  // 目录 最多有BLOCKNUM个目录项
    Inode FDI[BLOCKNUM];  // 索引结点集合 最多有BLOCKNUM个节点
    int fileNum;
    Block blocks[BLOCKNUM];  // 总的物理盘块数
    int freeBlock;           // 空闲盘块数量
} Disk;
Disk d;
int dirLastIndex;  // 最后的目录项下标
int fdiLastIndex;  // 最后的索引结点下标
/**
 * 申请成功，则返回申请的物理块号
 * 否则返回-1
 */
int getFreeBlock() {
    if (d.freeBlock <= 0) return -1;
    // 随机申请一块物理块 假如已经被使用  则往后寻找
    srand((unsigned)time(NULL));
    int index = rand() % BLOCKNUM;
    int r = index / 16, c = index % 16;
    if (d.bitmap[r][c] == 0) {
        d.bitmap[r][c] = 1;
        d.freeBlock--;
        return index;
    } else {
        int i, j;
        if (c == 15) {
            i = (r + 1) % 7;
            j = 0;
        } else {
            i = r;
            j = (c + 1) % 16;
        }
        for (; i < 7; )
            for (; j < 16; ) {
                if (d.bitmap[i][j] == 0) {
                    d.bitmap[i][j] = 1;
                    d.freeBlock--;
                    return (i * 16 + j);
                }
                j++;
                if(j == 16){
                    i = (i + 1)%7;
                    j = 0;
                }
            }
    }
}
/**
 * 格式化
 */
void intial() {
    for (int i = 0; i <= 99; i++) d.FAT[i] = EOF;
    for (int i = 0; i < ROW; i++)
        for (int j = 0; j < COL; j++) d.bitmap[i][j] = FREE;
    for (int i = 0; i < BLOCKNUM; i++) {
        d.blocks[i].firstLogical[0] = '\0';
        d.blocks[i].secondLogical[0] = '\0';
        d.blocks[i].thirdogical[0] = '\0';
    }
    d.fileNum = 0;
    dirLastIndex = 0;
    fdiLastIndex = 0;
    d.freeBlock = BLOCKNUM;
}
/**
 * 错误码：
 * 2：文件已存在
 * 3：磁盘空间不足
 */
int Create(char *fileName) {
    for (int i = 0; i < dirLastIndex; i++)
        if (!strcmp(d.directory[i].fileName, fileName) &&
            d.directory[i].nodeId != -1) {
            return 2;
        }
    int blockId = getFreeBlock();
    if (blockId == -1) {
        return 3;
    } else {
        int i;
        for (i = 0; i < fdiLastIndex; i++)
            if (d.FDI[i].isDelete) break;
        // 处理索引结点
        d.FDI[i].firstBlockId = d.FDI[i].lastBlockId = blockId;
        // 获取当前时间戳
        time(&(d.FDI[i].createTime));
        d.FDI[i].LastEditTime = d.FDI[i].createTime;
        d.FDI[i].permission = 444;
        d.FDI[i].usedBlocksNum = 1;
        d.FDI[i].isDelete = 0;
        int j;
        for (j = 0; j < dirLastIndex; j++)
            if (d.directory[j].nodeId == -1) break;
        // 处理目录项
        strcpy(d.directory[j].fileName, fileName);
        d.directory[j].nodeId = i;
        if (i == dirLastIndex) dirLastIndex++;
        if (j == fdiLastIndex) fdiLastIndex++;
        d.fileNum++;
        return OK;
    }
}
struct readReturn {
    int status;
    char msg[LOGICALSIZE];
};
/**
 * 返回值：
 * 1:读取正常
 * 2:文件不存在
 * 3:逻辑记录号错误
 */
struct readReturn Read(char *filename, int logical_record_no) {
    struct readReturn r;
    int i;
    for (i = 0; i < dirLastIndex; i++)
        if (!strcmp(filename, d.directory[i].fileName) &&
            d.directory[i].nodeId != -1)
            break;
    if (i >= dirLastIndex) {
        r.status = 2;
        return r;
    }
    int BlockId = logical_record_no / 3;
    if (BlockId + 1 > d.FDI[d.directory[i].nodeId].usedBlocksNum) {
        r.status = 3;
        return r;
    }
    int index = d.FDI[i].firstBlockId;
    for (int j = 0; j < BlockId; j++) index = d.FAT[index];
    switch (logical_record_no % 3) {
        case 0:
            strcpy(r.msg, d.blocks[index].firstLogical);
            break;
        case 1:
            strcpy(r.msg, d.blocks[index].secondLogical);
            break;
        case 2:
            strcpy(r.msg, d.blocks[index].thirdogical);
            break;
    }
    r.status = 1;
    return r;
}
/**
 * 错误码：
 * 2：文件不存在
 * 3：逻辑记录号错误
 */
int Write(char *filename, char *text, int logical_record_no) {
    int i;
    for (i = 0; i < dirLastIndex; i++)
        if (!strcmp(filename, d.directory[i].fileName) &&
            d.directory[i].nodeId != -1)
            break;
    if (i >= dirLastIndex) return 2;
    if (logical_record_no < 0 ||
        logical_record_no >= d.FDI[i].usedBlocksNum * 3)
        return 3;
    // 通过 firstBlockId 在 FAT 中寻找正确的位置写入
    int index = d.FDI[i].firstBlockId, blockId = logical_record_no / 3;
    for (int j = 0; j < blockId; j++) index = d.FAT[index];
    switch (logical_record_no % 3) {
        case 0:
            strcpy(d.blocks[index].firstLogical, text);
            break;
        case 1:
            strcpy(d.blocks[index].secondLogical, text);
            break;
        case 2:
            strcpy(d.blocks[index].thirdogical, text);
            break;
    }
    // 获取当前时间戳
    time(&(d.FDI[i].LastEditTime));
    return OK;
}
void tryCreate() {
    char fileName[256];
    printf("请输入新文件名：\n");
    scanf("%s", fileName);
    int status = Create(fileName);
    if (status == 2)
        printf("该文件已存在，请先删除旧文件再创建该文件。\n");
    else if (status == 3)
        printf("磁盘空间不足！无法创建新文件。\n");
    else
        printf("创建成功!\n");
    system("pause");
}
void tryRead() {
    char fileName[256];
    int logical_record_no;
    printf("请输入想要读取的文件名：\n");
    scanf("%s", fileName);
    printf("请输入想要读取的逻辑记录号（编号从零开始）：\n");
    scanf("%d", &logical_record_no);
    struct readReturn r = Read(fileName, logical_record_no);
    if (r.status == 2) {
        printf("该文件不存在！请重新输入文件名。\n");
    } else if (r.status == 3) {
        printf("该文件没有该逻辑记录，请输入正确的逻辑记录号。\n");
    } else {
        printf("读取到的内容是\n%s\n", r.msg);
    }
    system("pause");
}
void tryWrite() {
    char fileName[256], text[1024];
    int logical_record_no, newBlockSize;
    int exit = 0, choice;
    while (!exit) {
        system("cls");
        printf("1.向文件中写入数据\n");
        printf("2.修改文件大小\n");
        printf("0.返回\n");
        printf("请输入您的选择：\n");
        scanf("%d", &choice);
        switch (choice) {
            case 1: {
                printf("请输入想要写入的文件名：\n");
                scanf("%s", fileName);
                printf("请输入想要写入的逻辑记录号（编号从零开始）：\n");
                scanf("%d", &logical_record_no);
                printf("请输入您想要写入的信息（一次最多写入%d个字符）\n",
                       LOGICALSIZE);
                getchar();
                gets(text);
                int status = Write(fileName, text, logical_record_no);
                if (status == 2) {
                    printf("文件不存在，请输入正确的文件名！\n");
                } else if (status == 3) {
                    printf(
                        "您输入的逻辑记录号过大或者是负数，您可以通过增加文件大"
                        "小使得文件拥有该逻辑记录号\n");
                } else {
                    printf("写入成功！\n");
                }
                system("pause");
                break;
            }
            case 2: {
                printf("请输入您想要修改的文件名：\n");
                scanf("%s", fileName);
                printf(
                    "请输入该文件新大小（若新的大小小于原来的大小，则只保留新的"
                    "大小的数据，新大小应该是一个大于零的数字，单位：块）：\n");
                scanf("%d", &newBlockSize);
                // 索引结点所在下标
                int i;
                for (i = 0; i < dirLastIndex; i++)
                    if (!strcmp(fileName, d.directory[i].fileName) &&
                        d.directory[i].nodeId != -1)
                        break;
                if (i >= dirLastIndex) {
                    printf("文件不存在，请输入正确的文件名！\n");
                    system("pause");
                    break;
                } else if (newBlockSize > d.FDI[i].usedBlocksNum) {
                    // 增加文件大小
                    int need = newBlockSize - d.FDI[i].usedBlocksNum, blockId;
                    while (need) {
                        blockId = getFreeBlock();
                        if (blockId == -1) {
                            printf(
                                "磁盘空间不足！只成功申请了 %d "
                                "个物理块，申请失败 %d 个\n",
                                newBlockSize - need, need);
                            system("pause");
                            break;
                        }
                        need--;
                        d.FAT[d.FDI[i].lastBlockId] = blockId;
                        d.FDI[i].lastBlockId = blockId;
                        d.FDI[i].usedBlocksNum++;
                    }
                    time(&(d.FDI[i].LastEditTime));
                    printf("修改成功！\n");
                    system("pause");
                    break;
                } else if (newBlockSize < d.FDI[i].usedBlocksNum) {
                    // 减小文件
                    int index = d.FAT[d.FDI[i].firstBlockId], count = 1;
                    while (count < newBlockSize) {
                        index = d.FAT[index];
                        count++;
                    }
                    // 回收后面的磁盘空间
                    while (newBlockSize - count > 0) {
                        int old = d.FAT[index];
                        index = d.FAT[index];
                        d.FAT[old] = EOF;
                        count++;
                    }
                    time(&(d.FDI[i].LastEditTime));
                    printf("修改成功！\n");
                    system("pause");
                    break;
                }
            }
            case 0:
                return;
            default:
                printf("您输入有误，请重新输入！\n");
                system("pause");
                break;
        }
    }
}
void showBitmap() {
    printf("“0”代表空闲，“1”代表已用\n");
    for (int i = 0; i < 7; i++)
        for (int j = 0; j < 16; j++) {
            if (i * 16 + j >= BLOCKNUM) {
                printf("\n");
                system("pause");
                return;
            } else {
                printf("%d ", d.bitmap[i][j]);
            }
            if (j == 15) printf("\n");
        }
}
void showFiles() {
    printf(
        "----------------------------------------------------------------------"
        "--------------\n");
    printf("|%-20s|%-19s|%-19s|%-10s|%-10s|\n", "文件名", "创建日期",
           "修改日期", "权限信息", "文件大小");
    for (int i = 0; i < dirLastIndex; i++)
        if (d.directory[i].nodeId != -1) {
            printf(
                "|%-20s|%4d-%2d-%2d %2d:%2d:%2d|%4d-%2d-%2d "
                "%2d:%2d:%2d|%-10d|%-10d|\n",
                d.directory[i].fileName,
                // 年份从1900开始算起，因此要加上1900
                gmtime(&(d.FDI[d.directory[i].nodeId].createTime))->tm_year +
                    1900,
                gmtime(&(d.FDI[d.directory[i].nodeId].createTime))->tm_mon + 1,
                gmtime(&(d.FDI[d.directory[i].nodeId].createTime))->tm_mday,
                gmtime(&(d.FDI[d.directory[i].nodeId].createTime))->tm_hour + 8,
                gmtime(&(d.FDI[d.directory[i].nodeId].createTime))->tm_min,
                gmtime(&(d.FDI[d.directory[i].nodeId].createTime))->tm_sec,
                gmtime(&(d.FDI[d.directory[i].nodeId].LastEditTime))->tm_year +
                    1900,
                gmtime(&(d.FDI[d.directory[i].nodeId].LastEditTime))->tm_mon +
                    1,
                gmtime(&(d.FDI[d.directory[i].nodeId].LastEditTime))->tm_mday,
                gmtime(&(d.FDI[d.directory[i].nodeId].LastEditTime))->tm_hour +
                    8,
                gmtime(&(d.FDI[d.directory[i].nodeId].LastEditTime))->tm_min,
                gmtime(&(d.FDI[d.directory[i].nodeId].LastEditTime))->tm_sec,
                d.FDI[d.directory[i].nodeId].permission,
                d.FDI[d.directory[i].nodeId].usedBlocksNum);
        }
    printf(
        "----------------------------------------------------------------------"
        "--------------\n");
    system("pause");
}
/**
 * 错误码：
 * 2：文件不存在
 */
int Delete(char *fileName) {
    int i;
    for (i = 0; i < dirLastIndex; i++)
        if (!strcmp(d.directory[i].fileName, fileName) &&
            d.directory[i].nodeId != -1)
            break;
    if (i >= dirLastIndex) return 2;
    int nextIndex = d.FDI[d.directory[i].nodeId].firstBlockId;
    int row, col, pre;
    while (d.FAT[nextIndex] != EOF) {
        row = nextIndex / COL;
        col = nextIndex % COL;
        d.bitmap[row][col] = FREE;
        pre = nextIndex;
        nextIndex = d.FAT[nextIndex];
        d.FAT[pre] = -1;
    }
    row = nextIndex / COL;
    col = nextIndex % COL;
    d.bitmap[row][col] = FREE;
    d.FDI[d.directory[i].nodeId].isDelete = 1;
    d.directory[i].nodeId = -1;
    return OK;
}
void tryDelete() {
    char fileName[11];
    printf("请输入您想要删除的文件：\n");
    scanf("%s", fileName);
    int status = Delete(fileName);
    if (status == 2) {
        printf("该文件不存在，请重新输入!\n");
    } else {
        printf("删除成功！\n");
    }
    system("pause");
}
void showFAT() {
    int i = 0, len = 25, j = 1, t, k;
    for (; j <= 4; j++) {
        t = i;
        for (k = 1; k <= 114; k++) printf("-");
        printf("\n");
        printf("|%-12s|", "编号");
        for (; i < j * len; i++) printf("%-3d|", i);
        printf("\n");
        printf("|%-12s|", "下一块盘块号");
        for (i = t; i < j * len; i++) printf("%-3d|", d.FAT[i]);
        printf("\n");
        for (k = 1; k <= 114; k++) printf("-");
        printf("\n\n");
    }
    system("pause");
}
int main() {
    // 初始化磁盘 即格式化
    intial();
    int exit = 0, choice;
    while (!exit) {
        system("cls");
        printf("1.创建文件\n");
        printf("2.读取文件\n");
        printf("3.写入文件\n");
        printf("4.删除文件\n");
        printf("5.显示示位图\n");
        printf("6.列出所有文件\n");
        printf("7.打印FAT\n");
        printf("0.退出系统\n");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                tryCreate();
                break;
            case 2:
                tryRead();
                break;
            case 3:
                tryWrite();
                break;
            case 4:
                tryDelete();
                break;
            case 5:
                showBitmap();
                break;
            case 6:
                showFiles();
                break;
            case 7:
                showFAT();
                break;
            case 0:
                exit = 1;
                break;
            default:
                printf("输入有误，请重新输入！\n");
                system("pause");
                break;
        }
    }
}
```

## 小插曲

在验收前的十几分钟突然发现`getFreeBlock()`函数有`bug`，当时立马从腾讯会议中退出来，测试了好久发现是`for`循环有问题，之前的写法是这样：

```c
for (; i < 7; i =( i + 1 ) % 7)
	for (; j < 16; j = (j + 1) % 16) {
                
}
```

这样子内循环一直结束不了，造成了死循环。之前一直没发现这个问题是因为之前测试的时候，一般不会把文件大小改得很大，所以不会触发这个循环。', description='1. 磁盘文件的管理采用显式链接结构，将文件占用的物理块号和链接指针记录 在一张文件分配表（`FAT`）中。文件第一块的块号记录在索引结点中。文件目录 只记录文件名和索引结点的编号。索引结点的结构如下： ', views=0, published=true, tagIds='null', createTime=Thu Jul 02 21:24:00 CST 2020, updateTime=Thu Jul 02 21:24:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=45, name='Windows系统下C语言连接MySQL', content='## 前言

高级语言连接数据库技术可谓十分成熟，但是使用C语言连接数据库还是挺少的，之前做数据库课程设计的时候刚好用到C语言连接数据库，因此就把这次过程记录下来。

## 准备

1. MySQL 5.6.48-64位
2. MinGW64 
   - ==假如你安装的MySQL是32位的，那么MinGW就需要安装32位版本的==

- Visual Studio Code（其他编辑器也可以，有条件的可以用记事本）

## 开始搭建环境

- 配置`MinGW64`环境:

  - [官网下载]( http://mingw.org/ )或者[点此下载]( https://q.yalexin.top/MinGW64.zip )

  - 假如是从这里下载的，将压缩文件解压到自定义位置，记住该位置

  - 依次点击“此电脑”，“属性”，“高级系统设置”，“环境变量”，在系统变量中找到`Path`，增加一条记录，记录值是`MinGW64`安装路径下的`bin`文件夹

    ![](   https://q.yalexin.top/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%9B%BE.png   )

  - 在终端输入`gcc`时假如输出下面的语句就说明配置好了

    ```shell
    gcc: fatal error: no input files
    compilation terminated.
    ```

- 项目中引入库文件

  - 所在项目处新建文件夹`lib`，在`MySQL`的安装目录下的`lib`文件夹下找到`libmysql.dll`文件（我的是在`C:\Program Files\MySQL\MySQL Server 5.6\lib`文件夹下），将该文件复制到刚刚新建的`lib`文件夹中

  - 在程序中加入头文件：
    - `#include <C:\Program Files\MySQL\MySQL Server 5.6\include\mysql.h>`（该路径自己根据自己的情况进行相应更改）
    - `#include <winsock.h>`

## 测试

例如我有一个数据库`test`，我要访问的是`stu`表：

在项目位置新建`main.c`文件：

```c
/*
 * @Author: YaleXin
 * @Date: 2020-07-03 14:17:45
 * @LastEditTime: 2020-07-03 14:53:58
 * @LastEditors: YaleXin
 * @Description:
 * @FilePath: \my_c_workspace\DatabaseConnect\main.c
 * @祈祷不出现BUG
 */
#include <winsock.h>
#include <C:\Program Files\MySQL\MySQL Server 5.6\include\mysql.h>
#include <stdio.h>
#include <stdlib.h>
#include <windows.h>
#define HOST "localhost"
#define PORT 3306
#define DBNAME "test"
#define TABLENAME "stu"
#define USERNAME "root"
#define PASW "123456"
int main() {
    MYSQL mysql;
    MYSQL_ROW row;
    MYSQL_RES *res = (MYSQL_RES *)malloc(sizeof(MYSQL_RES));
    mysql_init(&mysql);
    if (mysql_real_connect(&mysql, HOST, USERNAME, PASW, DBNAME, PORT, NULL,
                           CLIENT_FOUND_ROWS)) {
        printf("ok!\n");
        char sql[50] = "";
        // 告知此次是gbk
        mysql_set_character_set(&mysql, "gbk");
        sprintf(sql, "SELECT * FROM %s", TABLENAME);
        if (mysql_real_query(&mysql, sql, (unsigned long)strlen(sql))) {
            printf("查询失败,错误信息：%s", mysql_error(&mysql));
        } else {
            res = mysql_store_result(&mysql);
            printf("|%-10s|%-10s|\n\n", "学号", "姓名");
            while ((row = mysql_fetch_row(res)) != NULL) {
                printf("|%-10s|%-10s|\n\n", row[0], row[1]);
            }
            mysql_free_result(res);
        }
        // 关闭连接，避免浪费资源
        mysql_close(&mysql);
    } else {
        printf("登录失败！错误原因：%s\n是否退出：0：是，其他：否。\n",
               mysql_error(&mysql));
    }
    return 0;
}
```

利用命令行进行编译，进入该项目位置，打开命令终端，输入：

```shell
gcc -Iinclude -Llib main.c -llibmysql -o main
```

如果足够幸运的话就会产生`main.exe`文件，运行该文件，输出：

```shell
ok!
|学号      |姓名      |

|1         |张三      |

|2         |李四      |

|3         |王五      |
```

## 可能遇到的问题

1. 

   ```shell
   error: unknown type name 'SOCKET'
    #define my_socket SOCKET
   ```

   加入头文件的顺序中，`#include <winsock.h>`需要在`#include <C:\Program Files\MySQL\MySQL Server 5.6\include\mysql.h>`上面

2. 

   ```shell
   File format not recognized collect2.exe: error: ld returned 1 exit status
   ```

   不知道是不是因为安装的`MySQL`是64位，而编译器`MinGw`是32位造成的，我尝试用32位进行编译的时候会出现上面的错误，换了64位的就不会出现问题了。', description='高级语言连接数据库技术可谓十分成熟，但是使用C语言连接数据库还是挺少的，之前做数据库课程设计的时候刚好用到C语言连接数据库，因此就把这次过程记录下来。', views=0, published=true, tagIds='null', createTime=Fri Jul 03 09:10:00 CST 2020, updateTime=Fri Jul 03 09:10:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=46, name='图书借阅管理系统', content='>项目地址：[gitee]( https://gitee.com/YaleXin/caozuoxitongkechengsheji )

一次数据库课程设计，系统界面用C语言，后台数据用`MySQL`（如果不知道如何用C语言连接`MySQL`,参照我的[上一篇文章]( https://www.yalexin.top/index.php/archives/46/ )）。

## 数据库设计

- E-R图

![]( https://q.yalexin.top/%E6%80%BB%E4%BD%93er%E5%9B%BE.png )

- 五张表：

  1. 用户表（<u>编号</u>，姓名，性别，年龄）

     ```mysql
      CREATE TABLE `users` (
        `PNO` int(11) NOT NULL,
        `PNAME` varchar(20) NOT NULL,
        `GENDER` enum('男','女') NOT NULL,
        `AGE` int(20) DEFAULT '18',
        PRIMARY KEY (`PNO`)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8
     ```

  2. 书籍表（<u>编号</u>，书名，库存）

     ```mysql
     CREATE TABLE `books` (
        `BNO` int(11) NOT NULL,
        `BNAME` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
        `BINVENTORY` int(11) NOT NULL DEFAULT '0',
        PRIMARY KEY (`BNO`)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8
     ```

  3. 书商表（<u>编号</u>，书商名，地址）

     ```mysql
      CREATE TABLE `booksellers` (
        `SNO` int(11) NOT NULL,
        `SNAME` varchar(20) DEFAULT NULL,
        `ADDR` varchar(50) DEFAULT NULL,
        PRIMARY KEY (`SNO`)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8
     ```

  4. 借阅表（<u>书籍编号</u>，<u>用户编号</u>，借阅日期，归还日期，是否已归还）

     ```mysql
      CREATE TABLE `borrowings` (
        `BNO` int(11) DEFAULT NULL,
        `PNO` int(11) DEFAULT NULL,
        `BDATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
        `RDATE` timestamp NULL DEFAULT '0000-00-00 00:00:00',
        `ISRETURN` tinyint(1) DEFAULT '0',
        KEY `borrowings_ibfk_1` (`PNO`),
        KEY `borrowings_ibfk_2` (`BNO`),
        CONSTRAINT `borrowings_ibfk_1` FOREIGN KEY (`PNO`) REFERENCES `users` (`PNO`) ON DELETE SET NULL ON UPDATE CASCADE,
        CONSTRAINT `borrowings_ibfk_2` FOREIGN KEY (`BNO`) REFERENCES `books` (`BNO`) ON DELETE SET NULL ON UPDATE CASCADE
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4
     ```

  5. 入库表（<u>书商编号</u>，<u>书籍编号</u>，入库数量）

     ```mysql
     CREATE TABLE `warehousings` (
        `SNO` int(11) DEFAULT NULL,
        `BNO` int(11) DEFAULT NULL,
        `NUM` int(11) DEFAULT NULL,
        KEY `SNO` (`SNO`),
        KEY `BNO` (`BNO`),
        CONSTRAINT `warehousings_ibfk_1` FOREIGN KEY (`SNO`) REFERENCES `booksellers` (`SNO`) ON UPDATE CASCADE,
        CONSTRAINT `warehousings_ibfk_2` FOREIGN KEY (`BNO`) REFERENCES `books` (`BNO`) ON DELETE SET NULL ON UPDATE CASCADE
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8
     ```

- 存储过程

  1. 借阅：根据用户ID和书籍ID，形成借阅关系

     ```mysql
     DELIMITER $$
     
     USE `bookbrdb`$$
     
     DROP PROCEDURE IF EXISTS `TRY_BORROW`$$
     
     CREATE DEFINER=`root`@`localhost` PROCEDURE `TRY_BORROW`(IN PNO INT, IN BNO INT)
     BEGIN
         DECLARE EXIT HANDLER FOR SQLEXCEPTION 
         BEGIN
             ROLLBACK ;
             SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = '借阅失败，库存不足或者编号错误！' ;
         END ;
         START TRANSACTION ;
         UPDATE 
             books 
         SET
             BINVENTORY = (BINVENTORY - 1) 
         WHERE books.`BNO` = BNO ;
         INSERT INTO borrowings (BNO, PNO, BDATE, ISRETURN) 
         VALUES
             (BNO, PNO, NOW(), 0) ;
         COMMIT ;
     END$$
     
     DELIMITER ;
     ```

  2. 归还：根据用户ID和书籍ID，修改记录

     ```mysql
     DELIMITER $$
     
     USE `bookbrdb`$$
     
     DROP PROCEDURE IF EXISTS `TRY_RETURN`$$
     
     CREATE DEFINER=`root`@`localhost` PROCEDURE `TRY_RETURN`(IN mPNO INT, IN mBNO INT)
     BEGIN
         DECLARE EXIT HANDLER FOR SQLEXCEPTION 
         BEGIN
             ROLLBACK ;
             SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = '归还失败' ;
         END ;
         START TRANSACTION ;
         UPDATE 
             books,
             borrowings 
         SET
             books.`BINVENTORY` = (books.`BINVENTORY` + 1) 
         WHERE books.`BNO` = mBNO 
             AND borrowings.`BNO` = mBNO 
             AND borrowings.`PNO` = mPNO 
             AND borrowings.`ISRETURN` = 0 ;
         UPDATE 
             borrowings 
         SET
             borrowings.`ISRETURN` = 1,
             borrowings.`RDATE` = NOW() 
         WHERE borrowings.`BNO` = mBNO 
             AND borrowings.`PNO` = mPNO 
             AND borrowings.`ISRETURN` = 0 
         LIMIT 1 ;
         COMMIT ;
     END$$
     
     DELIMITER ;
     ```

  3. 入库：根据书商编号和书籍编号，将对应的书籍库存量进行修改

     ```mysql
     DELIMITER $$
     
     USE `bookbrdb`$$
     
     DROP PROCEDURE IF EXISTS `PUT_IN`$$
     
     CREATE DEFINER=`root`@`localhost` PROCEDURE `PUT_IN`(IN mbno INT, IN msno INT, IN mnum INT)
     BEGIN
         DECLARE EXIT HANDLER FOR SQLEXCEPTION 
         BEGIN
             ROLLBACK ;
             SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = '入库失败,编号错误或者入库数量错误' ;
         END ;
         START TRANSACTION ;
         INSERT INTO warehousings (BNO, SNO, NUM) 
         VALUES
             (mbno, msno, mnum) ;
         UPDATE 
             books 
         SET
             BINVENTORY = (BINVENTORY + mnum) 
         WHERE BNO = mbno ;
         COMMIT ;
     END$$
     
     DELIMITER ;
     ```

- 触发器

  ​      由于`MySQL5.6`不支持`check`功能，因此需要通过触发器限制某些属性的值的范围。

   1. 书籍数量必须是非负数

      ```mysql
      DELIMITER $$
      
      USE `bookbrdb`$$
      
      DROP TRIGGER /*!50032 IF EXISTS */ `BOOK_INVENTORY_INSERT`$$
      
      CREATE
          /*!50017 DEFINER = 'root'@'localhost' */
          TRIGGER `BOOK_INVENTORY_INSERT` BEFORE INSERT ON `books` 
          FOR EACH ROW BEGIN
      IF NEW.BINVENTORY < 0 
      THEN
      SIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = '您输入的库存量不符合现实意义：';
      END IF;
      END;
      $$
      
      DELIMITER ;
      ```

      ```mysql
      DELIMITER $$
      
      USE `bookbrdb`$$
      
      DROP TRIGGER /*!50032 IF EXISTS */ `BOOK_INVENTORY_UPDATE`$$
      
      CREATE
          /*!50017 DEFINER = 'root'@'localhost' */
          TRIGGER `BOOK_INVENTORY_UPDATE` BEFORE UPDATE ON `books` 
          FOR EACH ROW 
      BEGIN
          IF NEW.BINVENTORY < 0 
          THEN SIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = '新的的库存量不符合现实意义：' ;
          END IF ;
      END;
      $$
      
      DELIMITER ;
      ```

   2. 书籍数量必须是非负数

      ```mysql
      DELIMITER $$
      
      USE `bookbrdb`$$
      
      DROP TRIGGER /*!50032 IF EXISTS */ `USER_AGE_INSERT`$$
      
      CREATE
          /*!50017 DEFINER = 'root'@'localhost' */
          TRIGGER `USER_AGE_INSERT` BEFORE INSERT ON `users` 
          FOR EACH ROW 
      BEGIN
          IF NEW.AGE < 0 OR NEW.AGE > 200 
          THEN SIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = '户年龄不符合现实意义：' ;
          END IF ;
      END;
      $$
      
      DELIMITER ;
      ```

      ```mysql
      DELIMITER $$
      
      USE `bookbrdb`$$
      
      DROP TRIGGER /*!50032 IF EXISTS */ `USER_AGE_UPDATE`$$
      
      CREATE
          /*!50017 DEFINER = 'root'@'localhost' */
          TRIGGER `USER_AGE_UPDATE` BEFORE UPDATE ON `users` 
          FOR EACH ROW BEGIN
          IF NEW.AGE < 0 
          THEN SIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = '新的用户年龄不符合现实意义：' ;
          END IF ;
          END;
      $$
      
      DELIMITER ;
      ```

   3. 用户删除之前需要归还所有书籍

      ```mysql
      DELIMITER $$
      
      USE `bookbrdb`$$
      
      DROP TRIGGER /*!50032 IF EXISTS */ `PEOPLE_DELETE`$$
      
      CREATE
          /*!50017 DEFINER = 'root'@'localhost' */
          TRIGGER `PEOPLE_DELETE` BEFORE DELETE ON `users` 
          FOR EACH ROW 
      BEGIN
          IF EXISTS 
          (SELECT 
              * 
          FROM
              borrowings 
          WHERE old.PNO = borrowings.`PNO` 
              AND borrowings.`ISRETURN` = 0) 
          THEN SIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = '该用户仍有未归还的书籍，无法删除' ;
          END IF ;
      END;
      $$
      
      DELIMITER ;
      ```

   4. 书籍删除之前确保该书籍已归还完毕

      ```mysql
      DELIMITER $$
      
      USE `bookbrdb`$$
      
      DROP TRIGGER /*!50032 IF EXISTS */ `BOOK_DELETE`$$
      
      CREATE
          /*!50017 DEFINER = 'root'@'localhost' */
          TRIGGER `BOOK_DELETE` BEFORE DELETE ON `books` 
          FOR EACH ROW BEGIN
      IF EXISTS (
      SELECT * FROM
      borrowings
      WHERE old.BNO = borrowings.`BNO` AND borrowings.`ISRETURN` = 0
      )
      THEN
      SIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = '该书籍仍有未归还的记录，无法删除';
      END IF;
          END;
      $$
      
      DELIMITER ;
      ```

   5. 书记入库数量不能是负数

      ```mysql
      DELIMITER $$
      
      USE `bookbrdb`$$
      
      DROP TRIGGER /*!50032 IF EXISTS */ `PUT_IN_STORAGE`$$
      
      CREATE
          /*!50017 DEFINER = 'root'@'localhost' */
          TRIGGER `PUT_IN_STORAGE` BEFORE INSERT ON `warehousings` 
          FOR EACH ROW BEGIN
          IF new.NUM < 0 THEN
          SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = '入库量不能是负数';
          END IF;
          END;
      $$
      
      DELIMITER ;
      ```

   6. 不能随便修改入库记录中的入库数量

      ```mysql
      DELIMITER $$
      
      USE `bookbrdb`$$
      
      DROP TRIGGER /*!50032 IF EXISTS */ `WAREHOUSINGS_UPDATE`$$
      
      CREATE
          /*!50017 DEFINER = 'root'@'localhost' */
          TRIGGER `WAREHOUSINGS_UPDATE` BEFORE UPDATE ON `warehousings` 
          FOR EACH ROW 
      BEGIN
          IF new.NUM != old.NUM 
          THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = '入库量不能随意修改' ;
          END IF ;
      END;
      $$
      
      DELIMITER ;
      ```

- 用户权限设置

  | **用户**        | **权限**                                                     |
  | --------------- | ------------------------------------------------------------ |
  | root            | 对整个数据库bookbrdb拥有所有权                               |
  | bookAdmin       | 对书籍表拥有所有权、借阅表有插入、选择、更新权               |
  | userAdmin       | 对用户表拥有所有权                                           |
  | booksellerAdmin | 对书商表拥有所有权、入库表拥有插入权、选择权、书籍表有更新权 |', description='一次数据库课程设计，系统界面用C语言，后台数据用`MySQL`（如果不知道如何用C语言连接`MySQL`,参照我的[上一篇文章]', views=0, published=true, tagIds='null', createTime=Fri Jul 03 16:49:00 CST 2020, updateTime=Fri Jul 03 16:49:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=47, name='Linux安装Git、与Windows系统关联同一个码云仓库', content='## 前言

有的时候需要在云主机上跑跑程序，但是在没有图形界面的Linux系统上，利用`vim`编写代码效率还是比较低，当然可以利用`Xftp`相关的软件直接向云主机发送源程序，也可以通过邮件系统的文件中转站等其他办法。但是我发现这样子还是不太方便，为什么不利于版本控制工具，在`Windows`系统上利用`IDE`开发工具编写好代码，推送到远端仓库，在`Linux`端拉取代码，这样子不是更加方便？下面我介绍一下该方法。

在这之前需要注册一个`GitHub`账户或者码云账户，我这里选择的是码云

## 安装Git

可以使用

```shell
yum install git
```

这样子简单快速，但是这样子安装的版本通常都是非常低的，所以我这里不使用这种方法，我们可以从`GitHub`上面找到自己喜欢的版本，下面开始我们的步骤：

1. 去`GitHub`上面搜索`git`，进入到`release`页面寻找自己喜欢的版本

   然后使用下面的命令下载安装包的压缩包：

   ```shell
   wget https://codeload.github.com/git/git/tar.gz/v2.27.0
   ```

   `v2.27.0`是版本号

2. 解包解压

   ```shell
   tar -zxvf v2.27.0
   ```

3. 编译源码

   解包解压完毕，就会生成`git-2.27.0`文件夹，进入该文件夹

   ```shell
   cd git-2.27.0
   ```

   理论上说现在就可以进行编译了，但是编译过程可能会缺失相关库文件，因此建议先安装相关库文件：

   ```shell
   yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker
   ```

   执行上面的步骤的时候，系统会安装旧版的`Git`，因此需要先删除：

   ```shell
   yum remove git
   ```

   开始编译

   ```shell
   make prefix=/usr/local/git all
   ```

4. 设置安装路径

   ```shell
   make prefix=/usr/local/git install
   ```

5. 设置环境变量

   打开配置文件：

   ```shell
   vim /etc/profile
   
   ```

   在最下面加上：

   ```properties
   PATH=$PATH:/usr/local/git/bin
   export PATH
   
   ```

   刷新配置文件，使得文件生效：

   ```shell
   source /etc/profile
   
   ```

   检查版本:

   ```shell
   git --version
   
   ```

   出现版本号就说明`Git`安装好了

## 配置Git

配置账号

```shell
git config --global user.name "码云注册的用户名"
git config --global user.email "码云注册的邮箱"

```

生成密钥

```shell
ssh-keygen -t rsa -C "码云的邮箱"

```

接下来按下回车键几次就可以了

![]( https://q.yalexin.top/%E8%B7%AF%E5%BE%84.png )

红色圈住的是密钥文件路径

直到出现下面的信息即可：

![]( https://q.yalexin.top/%E7%94%9F%E6%88%90%E5%AF%86%E9%92%A5.png )

查看刚刚生成的密钥文件内容:

```shell
cat /root/.ssh/id_rsa.pub

```

复制上面的信息，到码云平台中的“设置”，“SSH公钥”中添加刚刚复制的信息即可

## Windows配置Git

这个应该不会太难，使用图形化界面安装，一直`next`即可，或者参照我的另[一篇文章]( https://www.yalexin.top/index.php/archives/22/ )。

## 建立仓库

在码云网站新建一个仓库

在`Linux`系统的某个文件夹下依次输入以下命令:

```shell
git init
touch README.md
git add .
git commit -m "Linux下的提交"
git remote add origin git@gitee.com:YaleXin/linux-windows.git # YaleXin是你的账户名字，linux-windows是你的刚刚新建的仓库
git push

```

这样子远端仓库就会出现刚刚的`README.md`文件了

来到`Windows`系统端，新建一个文件夹，进入该文件夹，右键鼠标，点击`Git Bash Here`，输入下面的命令：

```shell
git clone git@gitee.com:YaleXin/linux-windows.git

```

然后简单修改一下`README.md`文件

输入下面命令：

```shell
git add .
git commit -m "Windows系统进行修改"
git push

```

如果在`Windows`系统下配置好了`git`后，远端仓库就会出现新文件的内容了

回到`Linux`系统下，在之前的仓库所在文件夹下输入

```shell
git pull

```

本地仓库就会同步远端仓库的内容了。当然了有可能会产生冲突，解决冲突办法参照官网或者网上其他帖子即可。

这样子就算是利用远端仓库，实现云主机和本地进行互通了，后续就可以在`Windows`上利用`IDE`集成开发环境进行愉快地编程了。', description='有的时候需要在云主机上跑跑程序，但是在没有图形界面的Linux系统上，利用`vim`编写代码效率还是比较低，当然可以利用`Xftp`相关的软件直接向云主机发送源程序，也可以通过邮件系统的文件中转站等其他办法。但是我发现这样子还是不太方便，为什么不利于版本控制工具，在`Windows`系统上利用`IDE`开发工具编写好代码，推送到远端仓库，在`Linux`端拉取代码，这样子不是更加方便？下面我介绍一下该方法。', views=0, published=true, tagIds='null', createTime=Mon Jul 06 08:49:00 CST 2020, updateTime=Mon Jul 06 08:49:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=48, name='Spring Boot @Cacheable 失效的解决方法', content='>文章参考了博客园的 **zhaoyue1215** 用户分享的文章【[Spring @Cacheable 缓存不生效的问题](https://www.cnblogs.com/zhaoyue1215/p/9267584.html)】

今天在使用`Spring Boot`的缓存时候，发现控制台一直输出`Hibernate`访问数据库时执行的`Sql`语句，`@EnableCaching`注解已经添加到主启动类中， `@Cacheable`也加到了相应的服务方法上，但是我把断点打到了`ConcurrentMapCacheManager`类中的方法`getCache(String name)`上后，测试过程发现根本就没有调用该方法，即缓存不生效！

## 解决办法

后来查阅资料发现，如果注解都正确添加，缓存不生效的可能是因为被添加`@Cacheable`的方法是在内部被其他方法，这样子是无法使用缓存的，例如说我这次情况：

```java
/**
* 将数据库中的Blog对象取出来，将其属性content（MarkDown语法）转为HTML格式
*/
public Blog getAndConvert(Long id) {
    Blog blog = getBlog(id)
    //
    //
    //
    //
    //
    //
    return blog;
}
@Cacheble()
public Blog getBlog(Long id) {
    //
    //
    //
    //
    //
    //
    return blog;
}
```

因为` @Cacheable`是基于`Spring AOP`代理类，内部方法调用是不走代理的，`@Cacheable`是不起作用的 ，因此需要将这两个方法放到不同的类中。', description='今天在使用`Spring Boot`的缓存时候，发现控制台一直输出`Hibernate`访问数据库时执行的`Sql`语句，`@EnableCaching`注解已经添加到主启动类中， `@Cacheable`也加到了相应的服务方法上，但是我把断点打到了`ConcurrentMapCacheManager`类中的方法`getCache(String name)`上后，测试过程发现根本就没有调用该方法，即缓存不生效！', views=0, published=true, tagIds='null', createTime=Fri Jul 31 19:00:00 CST 2020, updateTime=Fri Jul 31 19:00:00 CST 2020, category=null, comments=[], tags=[]}, Blog{id=80, name='全新的文章', content='仿佛违法击破发', description='21321321', views=0, published=false, tagIds='null', createTime=Tue Feb 02 15:39:11 CST 2021, updateTime=Tue Feb 09 16:39:22 CST 2021, category=null, comments=[], tags=[]}, Blog{id=81, name='全新的文章11', content='仿佛违法击破发到的', description='21321321顶点的', views=0, published=false, tagIds='null', createTime=Tue Jan 19 09:39:11 CST 2021, updateTime=Tue Feb 09 16:41:16 CST 2021, category=null, comments=[], tags=[]}, Blog{id=82, name='测试跳转', content='这是一个测试', description='测试噢', views=0, published=false, tagIds='null', createTime=Tue Feb 02 15:48:56 CST 2021, updateTime=Tue Feb 09 16:49:09 CST 2021, category=null, comments=[], tags=[]}, Blog{id=84, name='测试跳转111', content='分', description='测测', views=0, published=false, tagIds='null', createTime=Tue Feb 02 15:53:00 CST 2021, updateTime=Tue Feb 09 16:54:14 CST 2021, category=null, comments=[], tags=[]}, Blog{id=85, name='423343241', content='的', description='大无畏', views=0, published=false, tagIds='null', createTime=Tue Feb 02 15:54:56 CST 2021, updateTime=Tue Feb 09 16:55:04 CST 2021, category=null, comments=[], tags=[]}, Blog{id=86, name='234234', content='热热', description='43234243', views=0, published=false, tagIds='null', createTime=Tue Feb 09 16:57:19 CST 2021, updateTime=Tue Feb 09 16:57:19 CST 2021, category=null, comments=[], tags=[]}, Blog{id=87, name='7热热', content='4895', description='和符号为
', views=0, published=false, tagIds='null', createTime=Tue Feb 02 15:58:13 CST 2021, updateTime=Tue Feb 09 16:58:20 CST 2021, category=null, comments=[], tags=[]}, Blog{id=88, name='和热海文化文物', content='发', description='到的', views=0, published=false, tagIds='null', createTime=Tue Feb 02 15:59:20 CST 2021, updateTime=Tue Feb 09 16:59:26 CST 2021, category=null, comments=[], tags=[]}, Blog{id=89, name='二和黑', content='    烦烦烦', description='到的', views=0, published=false, tagIds='null', createTime=Tue Feb 02 16:22:25 CST 2021, updateTime=Tue Feb 09 17:22:33 CST 2021, category=null, comments=[], tags=[]}]
2021-02-09 17:32:14.844  INFO 14144 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/blog/20', ip='0:0:0:0:0:0:0:1', className='top.yalexin.rblog.controller.BlogController.getOneBlog', args=[20]}
2021-02-09 17:32:14.917  INFO 14144 --- [http-nio-8080-exec-6] top.yalexin.rblog.apsect.LogAspect       : result------>Blog{id=20, name='JavaScript语法三', content='

## js对象控制CSS

```html
<!DOCTYPE html>
<html lang="zh">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <style type="text/css">
        p {
            color: brown;
            width: fit-content;
            height: auto;
            background-color: aquamarine;
        }
    </style>
</head>

<body>
    <p id="p_id">这是一段测试的文字</p>
    <button onclick="change()">改变背景颜色</button>
    <script>
        function change() {
            document.getElementById("p_id").style.backgroundColor = "#ffffff";
        }
    </script>
</body>

</html>
```



其他的效果类似，方法都是先找到要改变的元素，然后设置新的CSS样式。

## 计时器

### 1.计时事件

通过JavaScript，我们可以在一个需要的时间间隔之后执行我们的任务，而不是在函数被调用后立即执行，我们称之为计时事件。

### 2.计时方法

1. setInterval(code,millisec[,"lang"])：间隔指定的毫秒数不停地执行指定的代码

   | 参数     | 描述                                                   |
   | :------- | :----------------------------------------------------- |
   | code     | 必需。要调用的函数或要执行的代码串。                   |
   | millisec | 必须。周期性执行或调用 code 之间的时间间隔，以毫秒计。 |

   例如：

   ```html
   <p id="time_p"></p>
   <script>
       var demo_time = setInterval( "getTime()",1000);
       function getTime(){
           var nowDate = new Date();
           var nowTime = nowDate.toLocaleTimeString();
           document.getElementById("time_p").innerHTML = nowTime;
       }
   </script>
   ```

   那我们想要停止执行怎么办？用下面这个方法就可以了

   ```javascript
   clearInterval(demo_time);
   ```

1. setTimeout(code,millisec[,"lang"])：延迟指定的毫秒数后执行指定的代码   

   例如

   ```javascript
   var demo_time = setTimeout( "getTime()",1000);//一秒后执行一次getTime()
   ```

   虽然说是执行一次，但是我们可以利用递归进行不断调用，从而实现setInterval()类似的效果，如

   ```html
   <p id="time_p"></p>
   <button onclick="stop_time()">停止计时</button>
   <script>
       var demo_time;
       function getTime(){
           var nowDate = new Date();
           var nowTime = nowDate.toLocaleTimeString();
           document.getElementById("time_p").innerHTML = nowTime;
           demo_time = setTimeout( "getTime()",3000);
       }
       function stop_time(){
           clearTimeout(demo_time);
       }
       getTime();
   </script>
   ```

   但是”可以“并不代表着推荐这么做，想想调用函数的本质是什么？不就是压栈吗？我们永不断地进行压栈，而没有弹栈，计算机的资源不久就会被消耗殆尽。因此，对于周期性的工作，我们还是 强烈推荐使用setInterval()方法。

   

## 利用screen对象获取屏幕信息

```html
<script>
    var a_height = screen.availHeight;
    var a_width = screen.availWidth;
    var height = screen.height;
    var width = screen.width;
    console.log("可用的屏幕高度："+a_height
                +"\n可用的屏幕宽度："+a_width
                +"\n屏幕的高度："+height
                +"\n屏幕的宽度："+width);
</script>
```

', description='## js对象控制CSS

```html
<!DOCTYPE html>
<html lang="zh">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <', views=0, published=true, tagIds='null', createTime=Mon Mar 16 12:20:00 CST 2020, updateTime=Mon Mar 16 12:20:00 CST 2020, category=null, comments=[], tags=[]}
2021-02-09 17:32:20.347  INFO 14144 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/blog/6', ip='0:0:0:0:0:0:0:1', className='top.yalexin.rblog.controller.BlogController.getOneBlog', args=[6]}
2021-02-09 17:32:20.369  INFO 14144 --- [http-nio-8080-exec-4] top.yalexin.rblog.apsect.LogAspect       : result------>null
2021-02-09 17:32:30.496  INFO 14144 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : request : {url='http://localhost:8080/api/blog/8', ip='0:0:0:0:0:0:0:1', className='top.yalexin.rblog.controller.BlogController.getOneBlog', args=[8]}
2021-02-09 17:32:30.568  INFO 14144 --- [http-nio-8080-exec-5] top.yalexin.rblog.apsect.LogAspect       : result------>Blog{id=8, name='搭建Hexo博客并部署到码云', content='
## 前言

我为什么要搭建博客？说实话我个人记忆力比较差，学过的东西经常会很快忘记，我自己又不爱做笔记，况且假如写在了笔记本上，笔记本又会被我弄丢，所以想到了把学过的东西记在博客上这种方法，但是我又不会web开发，刚好在别的地方了解到有hexo等的开源博客框架，心血来潮，趁着放寒假的时间就搭建了起来。


## 下载安装Node.js

从[官网]( https://nodejs.org/en/ )下载安装，安装完毕后在终端输入

```shell
node -v
```

假如出现版本号则说明安装成功，否则需要手动在系统的环境变量下的Path的值中添加node的安装路径。

## 安装Git

这个步骤应该不难，网上的教程实在是太多太详细了。

## 安装hexo相关文件：

在一个你喜欢的地方，新建一个文件夹，最好这个路径不要包含中文路径，在cmd窗口输入

```shell
npm install hexo-cli -g
```

## 初始化博客文件夹：

```shell
hexo init blog
```

## 进入博客文件夹：

```shell
cd blog
```

 <!-- more --> 

## 安装插件：

```shell
npm install
```

## 新建一篇文章命令：

``` shell
hexo new "My New Post"
```

## 启动服务预览

``` bash
hexo server
```

然后在本地浏览器输入 http://localhost:4000/ ，如果一切顺利，那么就可以出现你的博客了。

## 部署到第三方平台

当然了，我们自己的博客不仅仅是想让自己看，还想着通过网络，让更多的人看到，我们就可以借助第三方平台的page服务来展示我们的静态网站了，你可以通过GitHub，码云，coding等，我这里用来码云。

### 新建仓库

注册好码云后，新建一个仓库，将仓库的地址（可以是HTTPS形式的，也可以是SSH形式的，我的是https）复制，打开博客文件夹下的_config.yml文件（theme/theme_name/下也有一个，不要混淆），将刚刚复制好的地址粘贴到gitee的值，并在后面加上master分支：

```yaml
deploy:
  type: git
  repo:  
    gitee: https://gitee.com/xxxxx/xxxx.git,master
```

### 与远程仓库连接

在刚刚打开的文件夹中打开cmd终端，输入下面命令：

```shell
git config --global user.name空格+你的码云的名字
git config --global user.email空格+你的码云绑定的邮箱

```

### 安装Git部署插件

```shell
npm install hexo-deployer-git --save

```

### 部署

生成静态网页

```shell
hexo g

```

推送到远端

```shell
hexo d

```

接着到码云平台，打开你刚刚建好的仓库，如果仓库里边出现新的东西，说明部署成功了，接着我们依次点击 服务->gite pages -> 开启，然后打开平台给我们的网址，就可以访问我们的博客啦！

后期可以通过更换主题来增加美观度，主题可以在[hexo官网]( https://hexo.io/ )下载，也可以在GitHub下载，下载后在博客目录下的配置文件_config.yml中修改主题的名字

```yaml
## Themes: https://hexo.io/themes/
theme: # your theme name

```


并将你下载的主题文件夹放到博客目录下的themes文件夹中就可以了。

部署完毕，那我们如何编写文章？用普通文本编辑器？用HTML文件编写？其实，最方便的是使用.md文件编写，关于如何使用.md文件，请看[这里](https://yalexin.gitee.io/2020/02/23/markdown语法/) ', description='我为什么要搭建博客？说实话我个人记忆力比较差，学过的东西经常会很快忘记，我自己又不爱做笔记，况且假如写在了笔记本上，笔记本又会被我弄丢，所以想到了把学过的东西记在博客上这种方法，但是我又不会web开发，刚好在别的地方了解到有hexo等的开源博客框架，心血来潮，趁着放寒假的时间就搭建了起来。', views=2, published=true, tagIds='null', createTime=Sat Feb 22 21:51:00 CST 2020, updateTime=Sat Feb 22 21:51:00 CST 2020, category=null, comments=[], tags=[]}
